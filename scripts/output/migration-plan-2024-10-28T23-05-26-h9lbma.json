[
  {
    "_id": "4a90a01dc5093363281cd73e148a5ca39b1763cc2246255f1d4a7385b273bdbe",
    "_type": "desktopSdkDoc",
    "title": "compiling6",
    "pathName": "compiling6",
    "parent": "advanced_custom_drawing",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Compiling\n\nThe indicator code is now complete and needs to be compiled. You can compile this indicator by selecting the Compile menu item from within the **NinjaScript Editor** Right Click, by clicking the Compile icon on the toolbar at the top of the window, or by pressing the **F5** key on your keyboard. It is important to understand that this process makes the indicator ready for real-time use natively within **NinjaTrader**. It does not run as interpreted code, as many other applications do, but rather as a **C#** assembly. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "advanced_custom_drawing",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the New Indicator menu item to open the New Indicator Wizard.\n\n### Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![NSTuts1](nstuts1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n### Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its **Calculate** and **Overlay** settings. Click the More Properties button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below:\n\n![NSTutorialSetUpNoOverlayOnPrice](nstutorialsetupnooverlayonprice.png)\n\n### Adding Additional Data\n\nThe next page will allow you to configure one or more additional **Bars** objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n### Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalEventMethodsBlank](nstutadditionaleventmethodsblank.png)\n\n### Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom **CCI** indicator, we will create a single input parameter which can be changed by users in the Indicators window when applying or editing the indicator. This input parameter will determine the **CCI**'s period. We will select **int** as the Type, since integers are the most efficient native data types to be used for positive whole numbers, like those used to specify a number of bars to look back (a period). We will enter a \"Default\" value of \"14\" for the period, and a \"Min\" value of 1, to ensure that users do not enter zero or lower.\n\n![NSTuts5](nstuts5.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the Input Parameters dialogue.\n\n2. The Input Parameters dialogue can be used to define user inputs.\n\n### Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For the **CCI**, we will define a single plot, called \"CCI,\" and define five lines to draw in the indicator panel. For each item, first click the add button, then use the Plots and Lines dialogue to configure each item as seen below.\n\n![NSTuts6](nstuts6.png)\n\n1. The add button will allow you to configure plots and lines for the indicator.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic6).\n\n```"
  },
  {
    "_id": "dd9cf3a72458e4d867cdf179b1d2889229df0d2c29a9df1fb0eaa6e90d071685",
    "_type": "desktopSdkDoc",
    "title": "compiling5",
    "pathName": "compiling5",
    "parent": "advanced_custom_plot_colors",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Compiling\n\nThe indicator code is now complete and needs to be compiled. You can compile this indicator from within the **NinjaScript Editor** right mouse button menu \"Compile\" menu or simply press the **F5** key. It is important to understand that this process makes the indicator ready for real-time use and will run natively within **NinjaTrader** directly. It does not run interpreted as many other applications do. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "7781b9b3e3cdd3e61ceb81d160f0a08c196a54bb8d078a9b10b88999b09344c3",
    "_type": "desktopSdkDoc",
    "title": "Entering Calculation Logic",
    "pathName": "entering_calculation_logic",
    "parent": "advanced_custom_plot_colors",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The OnBarUpdate() method is called for each incoming tick or on the close of a bar (user defined) when performing real-time calculations and is called on each bar of a data series when re-calculating the indicator. For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed. Therefore, this is the main method called for indicator calculation and we will use this method to enter the script that will calculate the ROC value.\n\n## Setting Plot Thresholds  \n\nThe OnStateChange() method is called once before any bar data is loaded and is used to configure the indicator. The code below is automatically generated by the wizard and added to the OnStateChange() method. It configures the indicator for two plots and one line and sets the parameters.\n\n```csharp\nAddLine(Brushes.Black, 0, \"ZeroLine\");\nAddPlot(Brushes.Green, \"AboveZero\");\nAddPlot(Brushes.OrangeRed, \"BelowZero\");\n```\n\nEnter the following code in the OnStateChange() method and below the wizard generated code:\n\n```csharp\n// Set the threshold values for each plot\nPlots[0].Min = 0;\nPlots[1].Max = 0;\n```\n\nThe concept of setting threshold values is to set when and when not to paint a plot on the chart. In this indicator, we have an \"AboveZero\" plot with a default color of green which we only want to see when the value of ROC is above zero and a \"BelowZero\" plot with a default color of OrangeRed which we only want to see when the value of ROC is below zero. In order to make that happen we have to set the threshold values of each plot.\n\n**Plots[0].Min = 0;**\n\nThis statement says, in the collection of Plot objects, take the first one (**Plots[0]**) and set its minimum value to zero. This means any value below zero will not display.\n\n**Plots[1].Max = 0;**\n\nThis statement says, in the collection of Plot objects, take the second one (**Plots[1]**) and set its maximum value to zero. This means any value above zero will not display.\n\nWe now have a simple plot switching mechanism that displays the correct colored line depending on if the value of ROC is above or below zero. In fact, you can take this concept a little bit farther. You can even set different plots style (bar, dot etc..) depending on threshold values.\n\nA quick word about collections. Collections are objects that store a collection of objects, kind of like a container. In this case we are working with a collection of plots. In the above wizard generated code you will notice that we are adding new plots to the \"Plots\" collection. \"AboveZero\" was added first and then \"BelowZero\". This means that we can reference the \"AboveZero\" plot object through **Plots[0]**. The reason we don't pass in a value of 1 is because collections are zero based indexes. This means the first item has an index of 0, the second time an index of 1 and so forth.\n\n## Completing the Indicator\n\nThis indicator is actually quite simple in its implementation. The last thing we need to do is add the calculation code and set the value of ROC to both our plot lines.\n\nReplace the wizard generated code with the following code into the OnBarUpdate() method in the NinjaScript Editor:\n\n```csharp\n\n// Are there enough bars\nif (CurrentBar < Period) return;\n\n// Set the plot values\nAboveZero[0] = SMA(ROC(Period), Smooth)[0];\nBelowZero[0] = SMA(ROC(Period), Smooth)[0];\n```\n\nThe calculation first checks to ensure there are enough bars to complete the calculation and then sets both plot lines to the ROC value.\n\nThe class code in your editor should look identical to the image below. You are now ready to [compile the indicator](compiling.md) and configure it on a chart.\n\n```csharp\n\npublic class CustomROC : Indicator\n{\n    protected override void OnStateChange()\n    {\n        if (State == State.SetDefaults)\n        {\n            Description = @\"ROC with custom line color options\";\n            Name = \"CustomROC\";\n            Calculate = Calculate.OnBarClose;\n            IsOverlay = false;\n            DisplayInDataBox = true;\n            DrawOnPricePanel = true;\n            DrawHorizontalGridLines = true;\n            DrawVerticalGridLines = true;\n            PaintPriceMarkers = true;\n            ScaleJustification = NinjaTrader.Gui.Chart.ScaleJustification.Right;\n            //Disable this property if your indicator requires custom values that cumulate with each new market data event.\n            //See Help Guide for additional information.\n            IsSuspendedWhileInactive = true;\n            Period = 14;\n            Smooth = 3;\n            AddLine(Brushes.Black, 0, \"ZeroLine\");\n            AddPlot(Brushes.Green, \"AboveZero\");\n            AddPlot(Brushes.OrangeRed, \"BelowZero\");\n            Plots[0].Min = 0;\n            Plots[1].Max = 0;\n        }\n        else if (State == State.Configure)\n        {\n        }\n    }\n\n    protected override void OnBarUpdate()\n    {\n        // Are there enough bars\n        if (CurrentBar < Period) return;\n\n        // Set the plot values\n        AboveZero[0] = SMA(ROC(Period), Smooth)[0];\n        BelowZero[0] = SMA(ROC(Period), Smooth)[0];\n    }\n\n    #region Properties\n    [NinjaScriptProperty]\n    [Range(1, int.MaxValue)]\n    [Display(Name=\"Period\", Description=\"Number of periods\", Order=1, GroupName=\"Parameters\")]\n    public int Period\n    { get; set; }\n\n    [NinjaScriptProperty]\n    [Range(1, int.MaxValue)]\n    [Display(Name=\"Smooth\", Description=\"Smoothing rate\", Order=2, GroupName=\"Parameters\")]\n    public int Smooth\n    { get; set; }\n\n    [Browsable(false)]\n    [XmlIgnore]\n    public Series<double> AboveZero\n    {\n        get { return Values[0]; }\n    }\n\n    [Browsable(false)]\n    [XmlIgnore]\n    public Series<double> BelowZero\n    {\n        get { return Values[1]; }\n    }\n    #endregion\n}\n\n```"
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "advanced_custom_plot_colors",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the New Indicator menu item to open the New Indicator Wizard.\n\n## Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![CustomROCSetUp1](customrocsetup1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n## Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its Calculate and Overlay settings. Click the More Properties button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below and move forward by clicking the Next > button.\n\n![NSTutorialSetUpNoOverlayOnPrice](nstutorialsetupnooverlayonprice.png)\n\n## Adding Additional Data\n\nThe next page will allow you to configure one or more additional [Bars](bars) objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n## Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n## Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom indicator, our eventual goal will be to create a simple plot that follows either above or below the bars based upon the Close price of a specified bar compared to the preceding bar. To allow for the variable selection of a number of bars ago, we will create one input parameter and call it \"Periods.\" This variable will then be used to determine the number of bars used in the plot calculation.\n\n![CustomROCSetUp5](customrocsetup5.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the Input Parameters dialogue.\n\n2. The Input Parameters dialogue can be used to define user inputs.\n\n3. Click the add button again on the \"Input Parameters\" page and enter the information detailed in the Input Parameters dialogue marked 3.\n\nWe specify a default value of 10, which will refer to 10 bars in the calculation. We also specify a minimum value of 1 to ensure that we cannot enter a 0 or negative number for **Periods**.\n\n## Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For this indicator, we will define 1 line and 2 plots and a line, called \"Zero.\"\n\n![CustomROCSetUp6](customrocsetup6.png)\n\n1. Clicking the add button on the \"Plots and Lines\" page brings up the Plots and Lines dialogue.\n\n2. The Plots and Lines dialogue can be used to define the **ZeroLine**.\n\n3. Click the add button again on the \"Plots and Lines\" page and enter the information detailed in the Plots and Lines window marked 3 to add the **AboveZero** plot.\n\n4. Click the add button once more on the \"Plots and Lines\" page and enter the information detailed in the Plots and Lines window marked 4 to add the **BelowZero** plot.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic5.md).\n\n```"
  },
  {
    "_id": "bd523430db0ec28cc833a3f2c830b411b5ce640b7e8163ae2cff2f0c5ea7e58d",
    "_type": "desktopSdkDoc",
    "title": "Advanced - Custom Plot Colors via Thresholds",
    "pathName": "advanced_custom_plot_colors",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Custom Plot Colors via Thresholds Overview\n\nIn this advanced level tutorial we are going to build a custom indicator which is a ROC variation and paints one color above the zero band and another below. This indicator will show you how to use the concept of plot thresholds.\n\n* [Set Up](set_up8.md)\n* [Entering Calculation Logic](entering_calculation_logic5.md)\n* [Compiling](compiling5.md)\n* [Using](using5)"
  },
  {
    "_id": "aba73bf1f1c07b2d35c9b2f14b7ae04b571db42bb9659de08e4b3f5efddc43fe",
    "_type": "desktopSdkDoc",
    "title": "Advanced - Custom Drawing",
    "pathName": "advanced_custom_drawing",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Custom Drawing Overview\n\nIn this advanced tutorial, we are going to build a custom indicator which is a variation on the CCI, to show different drawing options for bar color, line color, and background color.\n\n* [Set Up](set_up9.md)\n* [Entering Calculation Logic](entering_calculation_logic6)\n* [Compiling](compiling6.md)\n* [Using](using6)\n\n{% callout type=\"note\" %}\n\nPlease note that the JavaScript code and HTML artifacts have been removed as per the instructions.\n{% /callout %}"
  },
  {
    "_id": "8fba246353b1ee0463c3cc493213d426b8a72a20ce35557e67add2d1292ab8c8",
    "_type": "desktopSdkDoc",
    "title": "Compiling",
    "pathName": "compiling",
    "parent": "beginner_indicator_on_indicator",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Compiling\n\nThe indicator code is now complete and needs to be compiled. You can compile this indicator from within the **NinjaScript Editor** right mouse button menu \"Compile\" menu or simply press the **F5** key. It is important to understand that this process makes the indicator ready for real-time use and will run natively within **NinjaTrader** directly. It does not run interpreted as many other applications do. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "7781b9b3e3cdd3e61ceb81d160f0a08c196a54bb8d078a9b10b88999b09344c3",
    "_type": "desktopSdkDoc",
    "title": "Entering Calculation Logic",
    "pathName": "entering_calculation_logic",
    "parent": "beginner_indicator_on_indicator",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The **OnBarUpdate()** method is called for each incoming tick, or on the close of a bar (if enabled) when performing real-time calculations, and is called on each bar of a **Bars** object when re-calculating the indicator (For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed). This is the main method used for indicator calculations, and we will calculate our core indicator logic (calculating an average of volume) within this method.\n\n## Calculating the Average\n\nNinjaTrader has built in indicators that you can reference in your calculations. Since we are calculating a simple moving average of volume it would make sense for us to use the built in SMA indicator and Volume indicators.\n\nEnter the following code into the **OnBarUpdate()** method in the NinjaScript Editor:\n\n```csharp\n// Calculate the volume average\ndouble average = SMA(VOL(), Periods)[0];\n```\n\nHere we declared the variable \"average\" which is of type double. This serves as the temporary storage for the current value of the simple moving average of volume. We then use the simple moving average indicator and pass in the volume indicator as its input, pass in our indicator \"Periods\" property (a parameter we defined in the wizard) and access the current value \"[0]\" that we will assign to our variable \"average\". If we wanted to assign the value one bar ago, we could have used \"[1]\".\n\n## Final Assignment\n\nEnter the following code into the **OnBarUpdate()** method and below the code snippet you entered above:\n\n```csharp\n// Set the calculated value to the plot\nMyPlot[0] = average;\n```\n\nHere we assign the \"average\" value to the property that represents the plot data using the '=' assignment operator. We have just finished coding our simple moving average of volume. Your class code should look identical to the code below. You are now ready to [compile the indicator](compiling2.md) and configure it on a chart.\n\n```csharp\npublic class VolSMA : Indicator\n{\n   protected override void OnStateChange()\n   {\n     if (State == State.SetDefaults)\n     {\n         Description                     = @\"Moving average of volume\";\n         Name                             = \"VolSMA\";\n         Calculate                         = Calculate.OnBarClose;\n         IsOverlay                         = false;\n         DisplayInDataBox                 = true;\n         DrawOnPricePanel                 = true;\n         DrawHorizontalGridLines           = true;\n         DrawVerticalGridLines             = true;\n         PaintPriceMarkers                 = true;\n         ScaleJustification               = NinjaTrader.Gui.Chart.ScaleJustification.Right;\n         //Disable this property if your indicator requires custom values that cumulate with each new market data event. \n         //See Help Guide for additional information.\n         IsSuspendedWhileInactive         = true;\n         Periods                           = 10;\n         AddPlot(Brushes.Orange, \"MyPlot\");\n     }\n     else if (State == State.Configure)\n     {\n     }\n   }\n   protected override void OnBarUpdate()\n   {\n     // Calculate the volume average\n     double average = SMA(VOL(), Periods)[0];\n     // Set the calculated value to the plot\n     MyPlot[0] = average;\n   }\n   #region Properties\n   [NinjaScriptProperty]\n   [Range(1, int.MaxValue)]\n   [Display(Name=\"Periods\", Description=\"Number of periods\", Order=1, GroupName=\"Parameters\")]\n   public int Periods\n   { get; set; }\n   [Browsable(false)]\n   [XmlIgnore]\n    public Series<double> MyPlot\n   {\n     get { return Values[0]; }\n   }\n   #endregion\n```"
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "beginner_indicator_on_indicator",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the New Indicator menu item to open the New Indicator Wizard.\n\n### Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![IndicatorOnIndicatorSetUp1](indicatoronindicatorsetup1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n### Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its **Calculate** and **Overlay** settings. Click the More Properties button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below and move forward by clicking the Next > button.\n\n![NSTutorialSetUpNoOverlayOnPrice](nstutorialsetupnooverlayonprice.png)\n\n### Adding Additional Data\n\nThe next page will allow you to configure one or more additional [Bars](bars) objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n### Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalEventMethodsBlank](nstutadditionaleventmethodsblank.png)\n\n### Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom indicator, our eventual goal will be to create a simple plot that follows either above or below the bars based upon the **Close** price of a specified bar compared to the preceding bar. To allow for the variable selection of a number of bars ago, we will create one input parameter and call it \"Periods.\" This variable will then be used to determine the number of bars used in the plot calculation.\n\n![IndicatorOnIndicator2](indicatoronindicator2.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the Input Parameters dialogue.\n\n2. The Input Parameters dialogue can be used to define user inputs.\n\nWe specify a default value of 10, which will refer to 10 bars in the calculation. We also specify a minimum value of 1 to ensure that we cannot enter a 0 or negative number for **Periods**.\n\n### Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For this indicator, we will define a single plot, called \"MyPlot.\"\n\n![NSTutAddPlotMyPlot](nstutaddplotmyplot.png)\n\n1. Clicking the add button on the \"Plots and Lines\" page brings up the Plots and Lines dialogue.\n\n2. The Plots and Lines dialogue can be used to define the plot.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic2.md).\n\n```"
  },
  {
    "_id": "8fba246353b1ee0463c3cc493213d426b8a72a20ce35557e67add2d1292ab8c8",
    "_type": "desktopSdkDoc",
    "title": "Compiling",
    "pathName": "compiling",
    "parent": "beginner_using_price_variables",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Compiling\n\nThe indicator code is now complete and needs to be compiled. You can compile this indicator by selecting the Compile menu item from within the **NinjaScript Editor** Right Click, by clicking the Compile icon on the toolbar at the top of the window, or by pressing the **F5** key on your keyboard. It is important to understand that this process makes the indicator ready for real-time use natively within **NinjaTrader**. It does not run as interpreted code, as many other applications do, but rather as a **C#** assembly. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "7781b9b3e3cdd3e61ceb81d160f0a08c196a54bb8d078a9b10b88999b09344c3",
    "_type": "desktopSdkDoc",
    "title": "Entering Calculation Logic",
    "pathName": "entering_calculation_logic",
    "parent": "beginner_using_price_variables",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The **OnBarUpdate()** method is called for each incoming tick, or on the close of a bar (if enabled) when performing real-time calculations, and is called on each bar of a **Bars** object when re-calculating the indicator (For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed). This is the main method used for indicator calculations, and we will calculate our core indicator logic (testing to see if a Close price on a specified bar was greater than the previous Close price) within this method.\n\n## Adding the Condition and Assigning the Plot Value\n\nEnter the following code in the **OnBarUpdate()** method in the NinjaScript Editor:\n\n```csharp\nValues[0][BarsAgo] = (Close[BarsAgo] > Close[(BarsAgo + 1)]) ? (High[BarsAgo] + (5 *TickSize)) : (Low[BarsAgo] - (5* TickSize))\n```\n\nAlthough the code above fits on a single line, it is doing several things. Firstly, it is important to understand the structure that we are using in this statement. We are using a **Ternary Operator**, which provides a way to assign one of two values to a variable based on a condition. We begin by stating that we wish to assign a value to the indicator plot at a bar index corresponding to **BarsAgo**. We do this by using **Values**, which is a collection holding values for all plots configured in the indicator:\n\n```csharp\n Values[0][BarsAgo] =\n```\n\nNext, we add a condition to test. In this case, we are testing to see whether **Close** at a bar index corresponding to the value of **BarsAgo** was greater than **Close** at a value of **BarsAgo + 1**. If **BarsAgo** was set to 5, for example, this would compare **Close[5]** to **Close[6]**:\n\n```csharp\nValues[0][BarsAgo] = (Close[BarsAgo] > Close[(BarsAgo + 1)]) ?\n```\n\nIf the condition evaluates to true, then the first expression will be run (the expression on the left side of the colon \":\"), which will assign the value of the indicator plot to the **High** price of the specified bar, plus five ticks. We obtain the tick size value for the configured instrument via the **TickSize** property:\n\n```csharp\nValues[0][BarsAgo] = (Close[BarsAgo] > Close[(BarsAgo + 1)]) ? (High[BarsAgo] + (5 * TickSize)) :\n```\n\nIf the condition evaluates to false, then the second expression will be run (the expression on the right side of the colon \":\", which will assign the value of the indicator plot to the **Low** price of the specified bar, less five ticks:\n\n```csharp\nValues[0][BarsAgo] = (Close[BarsAgo] > Close[(BarsAgo + 1)]) ? (High[BarsAgo] + (5 *TickSize)) : (Low[BarsAgo] - (5* TickSize))\n```\n\nThe core indicator logic is now in place, but running this code as it is can result in an \"Index out of range\" exception. Since we are looking a certain number of bars back in time, we need to make sure that there are always enough bars on the chart for us to look back. For example, if **BarsAgo** were set to 5, then we would be comparing the value of five bars ago to the value of six bars ago, but on Bars # 1, 2, 3, 4, or 5, at which point we do not have five or six bars to look back, the indicator will cause an error. To resolve this, we will add a condition which will prevent the core calculations from running unless we know there are enough bars on the chart. Add the following line just above the line you have been working on throughout this page:\n\n```csharp\nif(CurrentBar < BarsAgo + 1)\n   return;\n```\n\nThis line says, \"if there is not a number of bars equal to one number greater than the value of **BarsAgo**, then exit **OnBarUpdate()**.\"\n\nNow that everything is in place, your class code should look as below. You are now ready to **compile the indicator** and configure it on a chart:\n\n```csharp\npublic class PriceVariableTutorial : Indicator\n{\n   protected override void OnStateChange()\n   {\n       if (State == State.SetDefaults)\n       {\n           Description                     = @\"NinjaScript Price Variables Tutorial\";\n           Name                           = \"PriceVariableTutorial\";\n           Calculate                       = Calculate.OnBarClose;\n           IsOverlay                       = false;\n           DisplayInDataBox               = true;\n           DrawOnPricePanel               = true;\n           DrawHorizontalGridLines         = true;\n           DrawVerticalGridLines           = true;\n           PaintPriceMarkers               = true;\n           ScaleJustification               = NinjaTrader.Gui.Chart.ScaleJustification.Right;\n           //Disable this property if your indicator requires custom values that cumulate with each new market data event.\n           //See Help Guide for additional information.\n           IsSuspendedWhileInactive       = true;\n           BarsAgo                         = 0;\n           AddPlot(Brushes.Orange, \"MyPlot\");\n       }\n       else if (State == State.Configure)\n       {\n       }\n   }\n\n   protected override void OnBarUpdate()\n   {\n       if(CurrentBar < BarsAgo + 1)\n           return;\n\n       Values[0][BarsAgo] = (Close[BarsAgo] > Close[(BarsAgo + 1)]) ? (High[BarsAgo] + (5 * TickSize)) : (Low[BarsAgo] - (5 * TickSize));\n   }\n\n   #region Properties\n   [Range(0, int.MaxValue)]\n   [NinjaScriptProperty]\n   [Display(Name=\"BarsAgo\", Description=\"How many bars ago to use for the plot value\", Order=1)]\n   public int BarsAgo\n   { get; set; }\n\n   [Browsable(false)]\n   [XmlIgnore]\n   public Series<double> MyPlot\n   {\n       get { return Values[0]; }\n   }\n   #endregion\n}\n```"
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "beginner_using_price_variables",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the New Indicator menu item to open the New Indicator Wizard.\n\n### Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![PriceVariableTutorialSetUp1](pricevariabletutorialsetup1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n### Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its Calculate and Overlay settings. Click the More Properties button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below and move forward by clicking the Next > button.\n\n![NSTutorialSetUpNoOverlayOnPrice](nstutorialsetupnooverlayonprice.png)\n\n### Adding Additional Data\n\nThe next page will allow you to configure one or more additional [Bars](bars) objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n### Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalEventMethodsBlank](nstutadditionaleventmethodsblank.png)\n\n### Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom indicator, our eventual goal will be to create a simple plot that follows either above or below the bars based upon the Close price of a specified bar compared to the preceding bar. To allow for the variable selection of a number of bars ago, we will create one input parameter and call it \"BarsAgo.\" This variable will then be used in place of a number when specifying which bar's Close price to use for the indicator's condition.\n\n![PriceVariableTutorialSetUp4](pricevariabletutorialsetup4.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the Input Parameters dialogue.\n\n2. The Input Parameters dialogue can be used to define user inputs.\n\nWe specify a default value of 0, which will refer to \"zero bars ago,\" or the current bar. We also specify a minimum value of 0 to ensure that we cannot enter a negative number for **BarsAgo**.\n\n### Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For this indicator, we will define a single plot, called \"MyPlot.\"\n\n![NSTutAddPlotMyPlot](nstutaddplotmyplot.png)\n\n1. Clicking the add button on the \"Plots and Lines\" page brings up the Plots and Lines dialogue.\n\n2. The Plots and Lines dialogue can be used to define the plot.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic.md).\n\n```"
  },
  {
    "_id": "08ff2f1125f8035054bbb835909111bf9060904444bed8309ec59a88c617bf77",
    "_type": "desktopSdkDoc",
    "title": "Beginner - Indicator on Indicator",
    "pathName": "beginner_indicator_on_indicator",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Indicator on Indicator Overview\n\nIn this beginner level tutorial we are going to build a custom indicator that calculates a moving average of volume. This indicator will show you how to use the built in indicators of [Moving Average (SMA)](moving_average_-_simple_sma) and [Volume](volume.md).\n\n* [Set Up](set_up5.md)\n* [Entering Calculation Logic](entering_calculation_logic2.md)\n* [Compiling](compiling2.md)\n* [Using](using2)"
  },
  {
    "_id": "54c9e5f11d28e99fb86652e4b92541357ed544d92ea930cc3e23613fbc4dee56",
    "_type": "desktopSdkDoc",
    "title": "Beginner - Using price variables",
    "pathName": "beginner_using_price_variables",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Using Price Variables Overview\n\nIn this beginner level tutorial we are going to build a custom indicator that searches for a candlestick formation in which the closing price of a specified bar is greater than the closing price of the bar before it. This indicator will show you how to access price variables and use a conditional operator.\n\n- [Set Up](set_up4.md)\n- [Entering Calculation Logic](entering_calculation_logic.md)\n- [Compiling](compiling.md)\n- [Using](using)"
  },
  {
    "_id": "8fba246353b1ee0463c3cc493213d426b8a72a20ce35557e67add2d1292ab8c8",
    "_type": "desktopSdkDoc",
    "title": "Compiling",
    "pathName": "compiling",
    "parent": "intermediate_your_own_sma",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The indicator code is now complete and needs to be compiled. You can compile this indicator from within the **NinjaScript Editor** right mouse button menu \"Compile\" menu or simply press the **F5** key. It is important to understand that this process makes the indicator ready for real-time use and will run natively within **NinjaTrader** directly. It does not run interpreted as many other applications do. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "7781b9b3e3cdd3e61ceb81d160f0a08c196a54bb8d078a9b10b88999b09344c3",
    "_type": "desktopSdkDoc",
    "title": "Entering Calculation Logic",
    "pathName": "entering_calculation_logic",
    "parent": "intermediate_your_own_sma",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Entering Calculation Logic\n\nThe **OnBarUpdate()** method is called for each incoming tick, or on the close of a bar (if enabled) when performing real-time calculations, and is called on each bar of a **Bars** object when re-calculating the indicator (For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed). Therefore, this is the main method called for indicator calculation and we will use this method to enter the script that will calculate a simple moving average.\n\n## Are there enough bars?\n\nEnter the following code into the **OnBarUpdate()** method in the NinjaScript Editor:\n\n```csharp\n// Do not calculate if we don't have enough bars \nif (CurrentBar < Period) return;\n```\n\nTo calculate a 20 period moving average you will need a minimum of 20 bars of data. The first statement in our **OnBarUpdate()** method checks to see if there are enough bars of data to perform the moving average calculation. **CurrentBar** returns the index number of the current bar and this is checked against the user-defined parameter **Period**. If the current bar number is less than the user-defined period we \"return\" which skips calculating the moving average.\n\n## Getting a sum of closing prices\n\nEnter the following code into the **OnBarUpdate()** method and below the code snippet you entered above:\n\n```csharp\n// Get a sum of prices over the specified period\ndouble sum = 0; \nfor (int barsAgo = 0; barsAgo < Period; barsAgo++) \n{ \n   sum = sum + Input[barsAgo]; \n}\n```\n\nFirst we must declare a variable that will store our sum total.\n\n```csharp\ndouble sum = 0;\n```\n\nThe variable **sum** whose value is of type **double** will serve as temporary storage.\n\n```csharp\nfor (int barsAgo = 0; barsAgo < Period; barsAgo++) \n{ \n   sum = sum + Input[barsAgo]; \n}\n```\n\nNext we must calculate the sum. We use a standard \"for\" loop to skip through prices and add them to the **sum** variable. Although the command that represents the loop may look intimidating, it's really quite simple. Let's look at it in English....\n\nWhat the loop is saying is:\n\n1. the number of bars ago is now zero\n2. as long as the number of bars ago is less than the moving average period, then go to line 3 otherwise this loop is finished\n3. get the price **Input[number of bars ago]** and add it to the running sum total\n4. add one to the number of bars ago (if number of bars ago was zero it will now be one)\n5. go to line 2\n\nYou can find more information on [how loops work here](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/statements/iteration-statements). Once the loop has finished, it will have calculated the total sum of closing prices for the period of our moving average.\n\n* We use the value of **Input[barsAgo]** to get a price to use for our calculation. We could have substituted **Close[barsAgo]** to use closing prices or **High[barsAgo]** to use high prices. The reason we use **Input[barsAgo]** is since this allows flexibility for what the indicator is calculated based off of. Remember users have the option to select a price type (High, Open, Close etc...) from the Indicator Dialog window.\n\n## The final calculation\n\nEnter the following code into the **OnBarUpdate()** method and below the code snippet you entered above:\n\n```csharp\n// Calculate and set the average value to the 'MyPlot' property\nMyPlot[0] = sum / Period;\n```\n\nWe can now calculate the final moving average value and assign its value to the property that represents the plot data. We have just finished coding our simple moving average. The class code in your editor should look identical to the image below. You are now ready to [compile the indicator](compiling3.md).\n\n```csharp\npublic class MySMA : Indicator\n{\n   protected override void OnStateChange()\n   {\n     if (State == State.SetDefaults)\n     {\n         Description                     = @\"Simple Moving Average\";\n         Name                             = \"MySMA\";\n         Calculate                         = Calculate.OnBarClose;\n         IsOverlay                         = true;\n         DisplayInDataBox                 = true;\n         DrawOnPricePanel                 = true;\n         DrawHorizontalGridLines           = true;\n         DrawVerticalGridLines             = true;\n         PaintPriceMarkers                 = true;\n         ScaleJustification               = NinjaTrader.Gui.Chart.ScaleJustification.Right;\n         //Disable this property if your indicator requires custom values that cumulate with each new market data event. \n         //See Help Guide for additional information.\n         IsSuspendedWhileInactive         = true;\n         Period                           = 20;\n         AddPlot(Brushes.Orange, \"MyPlot\");\n     }\n     else if (State == State.Configure)\n     {\n     }\n   }\n\n   protected override void OnBarUpdate()\n   {\n     // Do not calculate if we don't have enough bars \n     if (CurrentBar < Period) return;\n       \n     // Get a sum of prices over the specified period\n     double sum = 0; \n     for (int barsAgo = 0; barsAgo < Period; barsAgo++) \n     { \n         sum = sum + Input[barsAgo]; \n     }\n       \n     // Calculate and set the average value to the 'MyPlot' property\n     MyPlot[0] = sum / Period;\n   }\n\n   #region Properties\n   [NinjaScriptProperty]\n   [Range(1, int.MaxValue)]\n   [Display(Name=\"Period\", Description=\"Number of Periods\", Order=1, GroupName=\"Parameters\")]\n   public int Period\n   { get; set; }\n\n   [Browsable(false)]\n   [XmlIgnore]\n   public Series<double> MyPlot\n   {\n     get { return Values[0]; }\n   }\n   #endregion\n}\n```\n\n## Alternate Implementation\n\nIn this tutorial we are using a \"for\" loop to iterate through a collection of prices and accumulate a sum value. We chose this approach to demonstrate the use of a loop. A simple moving average can actually be expressed in a more efficient manner using the built-in **SUM** indicator as shown below.\n\n```csharp\n// Do not calculate if we don't have enough bars\nif (CurrentBar < Period) return;\n\n// Calculate and set the 'average' value to the 'MyPlot' property\nMyPlot[0] = SUM(Input, Period)[0] / Period;\n```"
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "intermediate_your_own_sma",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the New Indicator menu item to open the New Indicator Wizard.\n\n### Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![YourOwnSMASetUp1](yourownsmasetup1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n### Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its **Calculate** and **Overlay** settings. Click the More Properties button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below and move forward by clicking the Next > button.\n\n![NSTutSetUpOverlayOnPrice](nstutsetupoverlayonprice.png)\n\n### Adding Additional Data\n\nThe next page will allow you to configure one or more additional [Bars](bars) objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n### Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalEventMethodsBlank](nstutadditionaleventmethodsblank.png)\n\n### Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom indicator, our eventual goal will be to create a simple plot that follows either above or below the bars based upon the **Close** price of a specified bar compared to the preceding bar. To allow for the variable selection of a number of bars ago, we will create one input parameter and call it \"Periods.\" This variable will then be used to determine the number of bars used in the plot calculation.\n\n![YourOwnSMASetUp3](yourownsmasetup3.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the Input Parameters dialogue.\n\n2. The Input Parameters dialogue can be used to define user inputs.\n\nWe specify a default value of 10, which will refer to 10 bars in the calculation. We also specify a minimum value of 1 to ensure that we cannot enter a 0 or negative number for **Periods**.\n\n### Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For this indicator, we will define a single plot, called \"MyPlot.\"\n\n![NSTutAddPlotMyPlot](nstutaddplotmyplot.png)\n\n1. Clicking the add button on the \"Plots and Lines\" page brings up the Plots and Lines dialogue.\n\n2. The Plots and Lines dialogue can be used to define the plot.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic3.md).\n\n```"
  },
  {
    "_id": "9cdd0f6fce466a0175bf044f7de7d858efe262a227de65ae8095689bebc239aa",
    "_type": "desktopSdkDoc",
    "title": "compiling4",
    "pathName": "compiling4",
    "parent": "intermediate_historical_custom_series",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Compiling\n\nThe indicator code is now complete and needs to be compiled. You can compile this indicator from within the **NinjaScript Editor** right mouse button menu \"Compile\" menu or simply press the **F5** key. It is important to understand that this process makes the indicator ready for real-time use and will run natively within **NinjaTrader** directly. It does not run interpreted as many other applications do. This provides you with the highest performance possible. If there are any errors reported during compiling, the error messages will be displayed at the bottom of the **NinjaScript Editor**."
  },
  {
    "_id": "7781b9b3e3cdd3e61ceb81d160f0a08c196a54bb8d078a9b10b88999b09344c3",
    "_type": "desktopSdkDoc",
    "title": "Entering Calculation Logic",
    "pathName": "entering_calculation_logic",
    "parent": "intermediate_historical_custom_series",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The OnBarUpdate() method is called for each incoming tick or on the close of a bar (user defined) when performing real-time calculations and is called on each bar of a data series when re-calculating the indicator. For example, an indicator would be re-calculated when adding it to an existing chart that has existing price data displayed. Therefore, this is the main method called for indicator calculation and we will use this method to enter the script that will do our calculations.\n\n## Creating the Series`<double>` Object\n\n1. Declare a variable (**MySeries** used in this example) of type **Series`<double>`** that will hold a **Series`<double>`** object within the region \"Variables\".\n\n2. Create a new **Series`<double>`** object and assign it to the **MySeries** variable within the **OnStateChange()** method.\n\n```csharp\nprivate Series<double> MySeries;\nprotected override void OnStateChange()\n{\n if (State == State.SetDefaults)\n {\n   ...\n }\n else if (State == State.DataLoaded)\n {\n   MySeries = new Series<double>(this);\n }\n}\n```\n\nStoring calculations in the DataSeries object  \n\nNow that we have our **Series`<double>`** object we can store double values into it. For this example we will store a simple Close minus Open calculation.\n\nEnter the following code into the **OnBarUpdate()** method:\n\n```csharp\n// Calculate the range of the current bar and set the value\nMySeries[0] = Close[0] - Open[0];\n```\n\nThe value of a **Series`<t>`** object will be aligned with the current bar. This means that all **Series`<t>`** objects will be synced with the **CurrentBar** index. It allows you to store A **double** value that corresponds with every bar.\n\nUsing **Series`<t>`** values  \n\nWith our new **Series`<double>`** object we can continue with further calculations easily. We can now use our **Series`<double>`** object as input to an indicator method such as **SMA** or instead of always writing **Close[0] - Open[0]** we can substitute our **Series`<double>`** object instead as per the example below.\n\nTo plot our final calculation we will store the calculation in our plot called **MyPlot**. In the **OnBarUpdate()** method add the following code snippet:\n\n```csharp\n// Add the bar's range to the SMA value\nMyPlot[0] = SMA[SMAPeriod](0) + MySeries[0];\n```\n\nHere we assign the **SMA** + **Series`<double>`** value to the property that represents the plot data using the \"=\" assignment operator. We have just finished coding our **CustomSeries** example. The class code in your editor should look identical to the below. You are now ready to [compile the indicator](compiling4.md) and configure it on a chart.\n\n```csharp\npublic class CustomSeries : Indicator\n{\n   private Series<double> MySeries;\n\n   protected override void OnStateChange()\n   {\n     if (State == State.SetDefaults)\n     {\n         Description                     = @\"Stores intermediary calculations without the use of plots\";\n         Name                             = \"CustomSeries\";\n         Calculate                         = Calculate.OnBarClose;\n         IsOverlay                         = false;\n         DisplayInDataBox                 = true;\n         DrawOnPricePanel                 = true;\n         DrawHorizontalGridLines           = true;\n         DrawVerticalGridLines             = true;\n         PaintPriceMarkers                 = true;\n         ScaleJustification                 = NinjaTrader.Gui.Chart.ScaleJustification.Right;\n         //Disable this property if your indicator requires custom values that cumulate with each new market data event.\n         //See Help Guide for additional information.\n         IsSuspendedWhileInactive         = true;\n         SMAPeriod                         = 5;\n         AddPlot(Brushes.Orange, \"MyPlot\");\n     }\n     else if (State == State.Configure)\n     {\n     }\n     else if (State == State.DataLoaded)\n     {\n         MySeries = new Series<double>(this);\n     }\n   }\n\n   protected override void OnBarUpdate()\n   {\n     // Calculate the range of the current bar and set the value\n     MySeries[0] = Close[0] - Open[0];\n\n     // Add the bar's range to the SMA value\n     MyPlot[0] = SMA[SMAPeriod](0) + MySeries[0];\n   }\n\n   #region Properties\n   [NinjaScriptProperty]\n   [Range(1, int.MaxValue)]\n   [Display(Name=\"SMAPeriod\", Description=\"Simple Moving Average Period\", Order=1, GroupName=\"Parameters\")]\n   public int SMAPeriod\n   { get; set; }\n\n   [Browsable(false)]\n   [XmlIgnore]\n   public Series<double> MyPlot\n   {\n     get { return Values[0]; }\n   }\n   #endregion\n}\n```"
  },
  {
    "_id": "f617495be1c584122ad681601f5bb67323ffd5de7539fae5a7c4852e1fc64018",
    "_type": "desktopSdkDoc",
    "title": "Set Up",
    "pathName": "set_up",
    "parent": "intermediate_historical_custom_series",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "The first step in creating a custom indicator is to use the custom indicator wizard. The wizard will generate the required **NinjaScript** code that will serve as the foundation for your custom indicator.\n\n1. Within the **NinjaTrader** [Control Center](control_center), select the New menu, then select the **NinjaScript Editor** menu item.\n\n2. Right mouse click the \"Indicators\" folder in the **NinjaScript Explorer** section, then select the **New Indicator** menu item to open the New Indicator Wizard.\n\n## Defining Indicator Properties and Name  \n\nFirst you will define your indicator's name and several indicator properties. Begin by clicking the Next > button on the first page of the wizard to view the page shown below.\n\n![CustomSeriesSetUp1](customseriessetup1.png)\n\n3. Enter the information as shown above.\n\n4. Click the Next > button.\n\n## Setting Default Properties\n\nThe next page will allow you to set defaults for basic properties related to your indicator, including its **Calculate** and **Overlay** settings. Click the **More Properties** button to expose additional properties. For this tutorial, we will not change any basic properties' defaults, and instead will leave them all set to the values shown below and move forward by clicking the Next > button.\n\n![NSTutorialSetUpNoOverlayOnPrice](nstutorialsetupnooverlayonprice.png)\n\n## Adding Additional Data\n\nThe next page will allow you to configure one or more additional [Bars](bars) objects for use by the indicator. For our purposes, we will leave this page blank and move forward by clicking the Next > button.\n\n![CustomSeriesSetUp3](customseriessetup3.png)\n\n1. Here we will click the arrow or the bold **Custom Series** text to be able to use the wizard to add our custom **Series`<t>`** object.\n\n2. Once the menu is expanded, we can click the add button to add a **Series`<t>`**.\n\n3. We will then enter the information above, and select **Double** as the variable type for the **Series`<t>`**.\n\n## Adding Event Methods\n\nThe next page will allow you to pre-populate certain event methods into the **NinjaScript** code generated by the wizard. For our purposes, we will leave all of the checkboxes corresponding to different event methods unchecked, and will move on by clicking the Next > button.\n\n![NSTutAdditionalDataBlank](nstutadditionaldatablank.png)\n\n## Defining Input Parameters\n\nThe next page will allow us to configure user input parameters for the indicator. For our custom indicator, our eventual goal will be to create a simple plot that follows either above or below the bars based upon the **Close** price of a specified bar compared to the preceding bar. To allow for the variable selection of a number of bars ago, we will create one input parameter and call it \"Periods.\" This variable will then be used to determine the number of bars used in the plot calculation.\n\n![CustomSeriesSetUp4](customseriessetup4.png)\n\n1. Clicking the add button on the \"Input Parameters\" page brings up the **Input Parameters** dialogue.\n\n2. The **Input Parameters** dialogue can be used to define user inputs.\n\nWe specify a default value of 10, which will refer to 10 bars in the calculation. We also specify a minimum value of 1 to ensure that we cannot enter a 0 or negative number for **Periods**.\n\n## Defining Plots and Lines\n\nThe next page will allow us to define plots and static lines for the indicator. For this indicator, we will define a single plot, called \"MyPlot.\"\n\n![NSTutAddPlotMyPlot](nstutaddplotmyplot.png)\n\n1. Clicking the add button on the \"Plots and Lines\" page brings up the **Plots and Lines** dialogue.\n\n2. The **Plots and Lines** dialogue can be used to define the plot.\n\nAfter this, click the Finish button, and the Indicator Wizard will generate a basic code structure implementing the parameters that you have set. You are now ready to move on to [entering calculation logic](entering_calculation_logic4.md).\n\n```"
  },
  {
    "_id": "5b711b887a15788cb4d72fb4ef70a6b2b6599f824ab6caa22d115391ca5ba044",
    "_type": "desktopSdkDoc",
    "title": "Intermediate - Historical Custom Series",
    "pathName": "intermediate_historical_custom_series",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Historical Custom Series Overview\n\nIn this intermediate level tutorial we are going to build a custom indicator that stores intermediary calculations without the use of plots. This indicator will show you how to use a **Series** object.\n\n* [Set Up](set_up7.md)\n* [Entering Calculation Logic](entering_calculation_logic4.md)\n* [Compiling](compiling4.md)\n* [Using](using4)\n\n```csharp\n\n\n* Historical Custom Series Overview\n* In this intermediate level tutorial we are going to build a custom indicator that stores intermediary calculations without the use of plots. This indicator will show you how to use a **Series** object.\n{% /table %}\n\n```"
  },
  {
    "_id": "0244c14acd94b610c8f735027b63d17b1d306f023bd3c49a251bab9dcff7e5ae",
    "_type": "desktopSdkDoc",
    "title": "Intermediate - Your own SMA",
    "pathName": "intermediate_your_own_sma",
    "parent": "developing_indicators",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Your Own SMA Overview\n\nIn this intermediate level tutorial we are going to build a simple moving average indicator. This indicator will show you how to use the **for** loop and a single case **if** statement.\n\n* [Set Up](set_up6.md)\n* [Entering Calculation Logic](entering_calculation_logic3.md)\n* [Compiling](compiling3.md)\n* [Using](using3)"
  }
]