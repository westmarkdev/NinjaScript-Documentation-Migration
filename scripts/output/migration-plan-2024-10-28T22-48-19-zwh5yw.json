[
  {
    "_id": "6e4f25cd51048cdf6deab3536849d8390f1cf704ab09372265b692b89d0ca803",
    "_type": "desktopSdkDoc",
    "title": "Best Practices for Distribution",
    "pathName": "best_practices",
    "parent": "commercial_distribution",
    "order": 2,
    "status": "updated",
    "section": "guides",
    "markdown": "The following are what we suggest for best practices for distribution.\n\n## Do not deploy NinjaScript Source Files\n\nIf you are a commercial vendor, you should never distribute the NinjaScript .cs source code files even if your IP is contained within an assembly or proprietary DLL. Source code files are editable by users and can result in unnecessary support issues.\n\n## Naming Conventions\n\nPlease use consistent naming convention with your indicators and strategies. We suggest adding a prefix to an indicator name. If your company name is \"Hyper\" you could name your indicators \"HyperTrend\" or \"HyperOscillator\" for example.\n\nIn the event that you provide NinjaScript export archives (zip files) as your means of distribution, NinjaTrader will automatically block incompatible scripts from importing so there will be no confusion by the user as to whether they are installing Version 7 or 8 scripts to their NinjaTrader installation. It is advisable to include the NinjaTrader version number in the export archive which will reduce potential support burden. For example, you could name your indicators “MyIndicator_7.zip” and “MyIndicator_8.zip”.\n\n## Clean up your resources\n\nAlways free up resources such as external windows DLL's or license management related resources. Resources should be freed within the [OnStateChange()](onstatechange) method in State.Terminate. NinjaTrader calls this method at the point at which a script is no longer used.\n\n## User Authentication Trigger\n\nIf you use a proprietary user authentication process, ensure that it is triggered within the [OnStateChange()](onstatechange) method in State.SetDefaults. This ensures that users are not forced to endure unnecessary delays on NinjaTrader start up or dialog windows that display available indicators and strategies as the windows are loaded. NinjaTrader, LLC provides a free licensing service for qualified 3rd party developers. For more information on this free service, contact your NinjaTrader Business Development representative.\n\n## User Authentication Check State\n\nA license check should only be performed once and maintain its check state.\n\n## User Authentication Time Out\n\nA license check should have a time out in case of internet issues, to enhance performance in this case.\n\n## Custom Installer\n\nIf you provide a custom installer, the installer should not overwrite any NinjaTrader deployed files, and you should provide an uninstall option which removes all installed files.\n\nIt is also preferred that you provide one installer that provides the user the option to install either a version 7 or version 8 compatible version of your product(s). Ensure that you only copy the correct files to the correct NinjaTrader installation folders since if you don’t it is possible that it could cause compile issues for the customer and it will be extremely difficult for all involved to isolate the cause.\n\nThese are the following folder names:\n\n* `Documents\\NinjaTrader 7\\bin\\Custom`\n* `Documents\\NinjaTrader 8\\bin\\Custom`\n\n## Test on Legacy Operating Systems\n\nSome NinjaTrader customers run on older Operating Systems (such as Windows 7) and you should make sure that your indicators, custom installers and external DLLs (if any are used) properly run on these legacy operating systems.\n\n## Expose Indicator States\n\nIf your proprietary indicator acts as a trend state (green bars are bullish, red bearish) its good practice to expose the indicators's state so that consumers of your indicators can use them within their own custom indicator or strategy."
  },
  {
    "_id": "03158cfcb8fb8cb8249b31c229e88c25e721a21dc80d09e859386d8b54794df0",
    "_type": "desktopSdkDoc",
    "title": "distribution_procedure",
    "pathName": "distribution_procedure",
    "parent": "commercial_distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "NinjaTrader makes it easy to distribute complete packages for your clients. Not only can you distribute your indicators and strategies, but you can also seamlessly deploy your own custom assemblies, native DLLs, chart templates, and Market Analyzer templates to your clients.\n\n## Creating the distribution package\n\nTo create a distribution package, please follow the steps shown here for creating a Export file containing your NinjaScript indicators and/or strategies.\n\nIt is strongly recommended that you export your scripts as an assembly and use SecureTeam's Agile.NET. Only this process will provide you with the highest level of security possible in order to protect your intellectual property. For more information on using SecureTeam's Agile.NET please see the [Protection/DLL Security](export) section.\n\nAfter you finish using the Export utility you will find the distribution package as a .zip file located in My Documents\\NinjaTrader 8\\bin\\Custom\\ExportNinjaScript. If you only wanted to distribute your NinjaScript files then providing your customers with this .zip and having them go through the [Import process](import) would install it on their machines. If you wish to add more custom files to your distribution package, please see the sections below.\n\n{% callout type=\"warning\" %}\nIt is important to let your customers know that NinjaTrader 8 indicators and strategies are NOT necessarily compatible with NinjaTrader Version 7.\n{% /callout %}\n\n### Adding custom assemblies or native DLLs\n\n1. Locate your base .zip distribution package\n2. Open the .zip\n3. Add to the .zip file your assemblies and/or your DLL files to the root directory of the .zip. These files cannot be behind any extra directory structures and must be directly in the root of the .zip\n\nFor custom assemblies, you will also need to add to the root of the .zip a .txt file called AdditionalReferences.txt\n\n1. Bring up the Windows Start Menu\n2. Go to the Run field and type \"notepad\" without the quotes and press Enter\n3. In Notepad, type the name of your custom assembly and then save the file as a text file with the name \"AdditionalReferences\".\n\n    Ex: If your custom assembly's name was MyCustomAssembly.dll and MyCustomAssembly.cs, in the AdditionalReferences.txt file you would type \"MyCustomAssembly\" without the quotes.\n\n{% callout type=\"note\" %}\nIf you have multiple custom assemblies to add you can append each of the assembly's names into the same AdditionalReferences.txt file on new lines\n{% /callout %}\n\n### Adding templates\n\nIf you are distributing an indicator package, you may also want to distribute a prebuilt Chart Template that your customers can use to quickly bring up preferred settings for your chart setup. The same instructions here would work though for all other templates as well, i.e. MarketAnalyzer, DrawingTools - as long as the relative folder under templates is correctly set per the template category you're working with. The below steps run through the process for Chart templates.\n\n1. Locate your base .zip distribution package\n2. Open the .zip\n3. Create a new directory called \"templates\" without the quotes\n4. Navigate into the \"templates\" directory and create another new directory called \"Chart\"\n5. Navigate into the \"Chart\" directory. Copy the .xml chart templates you wish to distribute from My Documents\\NinjaTrader 8\\templates\\Chart to this directory in the .zip\n\n### Adding workspaces\n\nIf you are distributing an indicator package, you may also want to distribute a prebuilt Workspace that your customers can use to quickly bring up preferred settings for your workspace. The below steps run through the process for workspaces.\n\n1. Locate your base .zip distribution package\n2. Open the .zip\n3. Create a new directory called \"workspaces\" without the quotes\n4. Navigate into the \"workspaces\" directory. Copy the .xml workspace you wish to distribute from My Documents\\NinjaTrader 8\\workspaces to this directory in the .zip\n\n### Adding custom resource files\n\nYou may run into the need to distribute other custom files such as pictures for buttons for use with your product as well. This can be achieved via the same approach as for the templates, as long as the resources folder is under the parent templates directory.\n\n1. Locate your base .zip distribution package\n2. Open the .zip\n3. Create a new directory called \"templates\" without the quotes\n4. Navigate into the \"templates\" directory and create another new directory, for example \"MyResources\"\n5. Navigate to the directory where your files are stored. Copy the resource files you wish to distribute from this directory to your custom directory from step 4 in the .zip\n\n{% callout type=\"note\" %}\nWhen modifying the .zip archives, if your zip utility application has an option for storing or recreating relative paths please be sure to turn this off as it will cause problems when importing the archive to NinjaTrader.\n{% /callout %}"
  },
  {
    "_id": "e20debe711dbc5e0f2c81573685aa5364f7c89d55294c9f775d25bbfbcfd3d34",
    "_type": "desktopSdkDoc",
    "title": "licensing_user_authentication",
    "pathName": "licensing_user_authentication",
    "parent": "commercial_distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Licensing/User Authentication\n\nNinjaTrader provides a free vendor license management service for user authentication to qualified 3rd party developers.\n\nThe service includes the following features:\n\n* One method call within your **NinjaScript** indicator or strategy's constructor will enable the authentication process\n* A **NinjaScript AddOn** dedicated to license management (Manage license, provide free trials)\n* Licenses are exclusively tied to a combination of user-defined prefix + **PC machine ID** value, ensuring that licenses cannot be shared\n* Manage all of your individual products, or group products together for licensing\n* Licenses expire based on time/date\n* Create free trial periods\n\nFor more information please contact [info@ninjatraderecosystem.com](mailto:info@ninjatraderecosystem.com) or your **NinjaTrader Business Development** representative. Once approved, you will receive a unique **Vendor ID** used to manage your user licenses, a **Vendor Licensing Help Guide** containing information, samples, and resources to guide you through the process of managing licensing."
  },
  {
    "_id": "3c2e470274adb0990e091987671688dc5ce5b7a0d6639d0911b78ecdc23ecbda",
    "_type": "desktopSdkDoc",
    "title": "Commercial Distribution",
    "pathName": "commercial_distribution",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Commercial Distribution Overview\n\nAs a commercial developer, you can distribute your proprietary indicators and strategies to the growing universe of **NinjaTrader** users. This section contains information you should understand before distributing your work to the public.\n\n* [Licensing/User Authentication](licensing_user_authentication)\n* [Best Practices](best_practices)\n* [Distribution Procedure](distribution_procedure)"
  },
  {
    "_id": "a960dbd880eacd2fd8d445dc5f9bb6b0ec1d5866bbfdba10efa82c41a56b2316",
    "_type": "desktopSdkDoc",
    "title": "considerations_for_compiled_assemblies",
    "pathName": "considerations_for_compiled_assemblies",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Using Compiled Assemblies\n\nCompiled assemblies (DLL's) allow you to bundle your scripts into a format that hides your proprietary code along with any supporting resources. Compiled assemblies provide distinct benefits, especially for commercially distributed code, but there are a few considerations to keep in mind. Typecasting and building resource files (sounds, images, etc.) into your assemblies must be approached differently to ensure cleanly packaged, error-free DLL's.\n\n## Using Custom enum Properties\n\nWhen creating custom enum properties, it is advised to create the enum outside of your **NinjaScript** class, and designating it in its own fully qualified namespace. For an example, please see [here](creating_a_user_defined_parame). When using the enum in code, please use the fully qualified namespace as opposed to using a using directive to shorthand the expression.\n\n## Casting Types in a DLL (Using dynamic Types)\n\nSometimes, you may need to cast your objects to **NinjaScript** types, such as when iterating through the **DrawObjects** collection to obtain a reference to a particular Drawing Object on a chart. When running **C#** code which has not been compiled into an assembly, typecasting can be done normally, as in the example below:\n\n```csharp\n// Typecasting in code outside of a compiled assembly\n\nprotected override void OnBarUpdate()\n{\n   foreach(HorizontalLine line in DrawObjects)\n   {\n       // Print the tag of each Horizontal Line on the chart\n       Print(String.Format(\"Horizontal Line {0} found.\", line.Tag));\n   }\n}\n```\n\nAn obstacle arises with traditional typecasting in a compiled assembly, since the **NinjaScript** type you attempt to cast will be present in both your DLL and **NinjaTrader**'s **Custom.dll** assembly. If you plan to compile your code into a DLL, you will need to use the [dynamic type](https://msdn.microsoft.com/en-us/library/dd264741.aspx) to avoid this conflict by dynamically assigning the type at runtime, using the guidelines below:\n\n1. Loop through your collection using the interface type\n2. Use **ToString()** to check the fully qualified namespace of the object in the loop\n3. Cast the object to **dynamic**, and reference properties of that object assuming it is the expected type\n\n```csharp\nforeach (IDrawingTool line in DrawObjects.ToList())\n{\n   // Use ToString().Equals() to detect the object's Type\n   if (line.ToString().Equals(\"NinjaTrader.NinjaScript.DrawingTools.HorizontalLine\"))\n   {\n       // Cast line as dynamic and access the object by assuming that it is the Type we expect\n       Print(String.Format(\"Horizontal Line {0} detected!\", (line as dynamic).Tag));\n   }\n}\n```\n\nThe above dynamic approach will work for primitive types. For instantiating more complex types / classes though, such as adding a new [PriceLevel](pricelevels) programmatically to an existing drawing tool, [Reflection](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/reflection) would need to be used.\n\n```csharp\n// Instantiating more complex types such as the PriceLevels class inside of a compiled assembly\n\nforeach (dynamic dt in DrawObjects.ToList())\n{\n   if(dt.ToString().Equals(\"NinjaTrader.NinjaScript.DrawingTools.FibonacciRetracements\"))\n   {\n     Type type         = dt.PriceLevels.GetType().GetGenericArguments()[0];\n     Assembly assembly = type.Assembly;\n     var pl           = assembly.CreateInstance(type.FullName, false, BindingFlags.CreateInstance, null, new object[] { 55.5, Brushes.Red, 2 }, new System.Globalization.CultureInfo(\"en-US\"), new object[] {});\n     dt.PriceLevels.GetType().GetMethod(\"Add\").Invoke(dt.PriceLevels, new object[] { pl });\n     this.ForceRefresh();\n   }\n}\n```\n\n## Working with the dynamic type\n\nUsing dynamic variables in the technique above requires careful attention to accessing members appropriately, and thus should be avoided if you do not intend to use or distribute compiled assemblies.\n\n* No Intelliprompt: Since the compiler cannot know which type you assume a dynamic variable to be, no Intelliprompt will be displayed to help search through type members. The same applies to **Visual Studio**'s Intellisense or similar utilities.\n* No Compile Errors: For the same reason, the compiler cannot know if you are using the variable in a way not supported by its expected type, trying to access members not present in that type, or other related errors. Thus, any such errors which would be caught by the compiler when typecasting will be missed, and will result in runtime errors instead. If a runtime error were to be triggered, the error may be more difficult to interpret.\n\nExample: If you tried to access **line.tag** (improper capitalization) in the examples above, you would receive the following errors:\n\n* Typecasting / Compile Error: \"'NinjaTrader.NinjaScript.DrawingTools.HorizontalLine' does not contain a definition for 'tag' and no extension method accepting a first argument of type 'NinjaTrader.NinjaScript.DrawingTools.HorizontalLine' can be found (are you missing a using directive or an assembly reference?)\"\n\n* dynamic / Runtime Error: \"Error on calling 'OnBarUpdate' method on bar 0: 'NinjaTrader.NinjaScript.DrawingTools.DrawingTool.tag' is inaccessible due to its protection level\"\n\n## Adding XAML and Other Files Into a DLL\n\nWhen [exporting a compiled assembly](export) through **NinjaTrader**, no additional resource files can be added. There are two ways around this. The first is to export the DLL from **NinjaTrader**, then open the exported .zip file, add any additional files, and re-zip the archive, but this will result in your resource files being fully accessible to end users. The second and recommended approach is to use a fully featured IDE such as **Visual Studio** to build your DLL's.\n\nFor more information on how to accomplish this with **Visual Studio**, see the \"AddOn Development Environment\" section of the [AddOn Development Overview](addon_development_overview) page. Although the page focuses on AddOn development, the sample project it provides can be used to develop other **NinjaScript** types, as well.\n\n## Exporting custom drawing tools as assembly / DLL\n\n{% callout type=\"warning\" %}\nWhen planning to distribute your custom drawing tools via assemblies, please understand **it's paramount that you implement your own **Draw** method** to allow the drawing tool getting called programmatically by other **NinjaScript** objects.\n{% /callout %}\n\nThe **NinjaTrader** default drawing tools would implement this via a partial class, for example you would see -\n\n```csharp\n// Default NinjaTrader drawing tool Draw. method handling\n\npublic static partial class Draw\n{\n}\n\n```\n\nHowever since partial classes could not span across two assemblies, therefore a custom non partial **Draw** method for your **NinjaScript** drawing tool would be needed.\n\n```csharp\n// Custom drawing tool Draw. method handling\n   \npublic static class MyDrawCustom\n{\n}\n```\n\n## Exports might not be backwards compatible\n\n**NinjaScript** exports might not be backwards compatible with previous versions of **NinjaTrader**.\n\nThis is known to happen every time a new type (e.g. Enum) was introduced, since the newly introduced types are not known to prior releases of **NinjaTrader**.\n\nTypically an error message like the following would be seen:\n\n> \"Error on calling 'SetState' method: Could not load type 'NinjaTrader.NinjaScript.Indicators.CumulativeDeltaType' from assembly 'NinjaTrader.Vendor, Version=8.0.12.0, Culture=neutral, PublicKeyToken=null'.\""
  },
  {
    "_id": "d46aee08cc49f6d1eb41800c1d6bab4506c960c700cff0efffe490d7cb1de5e3",
    "_type": "desktopSdkDoc",
    "title": "export",
    "pathName": "export",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "You can export **NinjaScript** for others to import in several formats:\n\n* **Source files** - **NinjaScript** source files that can be imported and edited by others.\n* **Assemblies** - A compiled assembly (DLL) of **NinjaScript** that \"hides\" your source code. This can be further [protected by SecureTeam's Agile.NET](protection_dll_security) to prevent theft of your intellectual property.\n\n{% callout type=\"note\" %}\n\nYou may want to provide other **NinjaTrader** users with source files of your **NinjaScript** in a format where they are able to view and edit them.\n{% /callout %}\n\n{% table %}\n\n* Step\n* Description\n\n---\n\n* 1\n* From the Control Center window select the menu Tools > Export > **NinjaScript**... to open the \"Export **NinjaScript**\" dialog window.\n\n---\n\n* 2\n* Press \"add\".\n\n---\n\n* 3\n* Use the \"Type\" drop down to filter available **NinjaScript** types.\n\n---\n\n* 4\n* Select all of the files that you want to export and press the \"OK\" button.\n\n---\n\n* 5\n* A list of all files that will be exported will be shown.\n\n---\n\n* 6\n* Press the \"Export\" button to export the selected files.\n\n---\n\n* 7\n* A file dialog will open where you can choose the location your zip export file will be created in. Per default the **NinjaScript Archive File** (.zip) file will be created in **My Documents\\<ninjatrader folder=\"\">\\bin\\Custom\\ExportNinjaScript**.\n\n---\n\n* 8\n* The file can be [imported](import) by another **NinjaTrader** application on a different PC.\n{% /table %}\n\n{% callout type=\"note\" %}\n\nYou may want to provide other **NinjaTrader** users with access to your proprietary indicators or strategies in a secure format preventing them from being able to see your proprietary source code. You can do this by exporting your **NinjaScript** indicators as a compiled **Microsoft .NET** assembly (DLL) file.\n{% /callout %}\n\n{% table %}\n\n* Step\n* Description\n\n---\n\n* 1\n* From the Control Center window select the menu Tools > Export > **NinjaScript**... to open the \"Export **NinjaScript**\" dialog window.\n\n---\n\n* 2\n* Select the option \"Export as compiled assembly\".\n\n---\n\n* 3\n* You can optionally select \"Protect compiled assembly\" (For information on protection see the \"[Protection/DLL Security](protection_dll_security)\" page).\n\n---\n\n* 4\n* Press \"add\".\n\n---\n\n* 5\n* Use the \"Type\" drop down to filter available **NinjaScript** types.\n\n---\n\n* 6\n* Select all of the files that you want to export and press the \"OK\" button.\n\n---\n\n* 7\n* A list of all files that will be exported will be shown.\n\n---\n\n* 8\n* Optionally enter information that describes the assembly in the \"Product\" and \"Version\" fields.\n\n---\n\n* 9\n* Press the \"Export\" button to export the selected files.\n\n---\n\n* 10\n* A file dialog will open where you can choose the location your zip export file will be created in. Per default the **NinjaScript Archive File** (.zip) file will be created in **My Documents\\<ninjatrader folder=\"\">\\bin\\Custom\\ExportNinjaScript**.\n\n---\n\n* 11\n* The file can be imported by another **NinjaTrader** application on a different PC.\n{% /table %}"
  },
  {
    "_id": "ee72c96d9bc25a037948f31fa7b8779b0df61139ae6ac6624921d0cfae70b5dd",
    "_type": "desktopSdkDoc",
    "title": "export_problems",
    "pathName": "export_problems",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Export Problems\n\nIf you are having difficulties exporting **NinjaScript** it could be due to one of the following reasons:\n\n{% callout type=\"note\" %}\n\nIf you receive the above error, you will need to compile your **NinjaScript** error-free before you can export. To see if your **NinjaScript** file is error free, open the **NinjaScript Editor** (Tool > Edit **NinjaScript**) and press F5 to compile. If you are trying to check a **NinjaScript Strategy** created from the **Strategy Wizard** you can do the same by finishing the wizard and seeing if you receive the “Strategy successfully generated” message.\n\nIf you receive any errors when compiling you will need to address them before exporting.\n{% /callout %}\n\n{% table %}\n\n---\n\n* [Export_Problems_1](images/Export_Problems_1.png)\n* If you are able to compile without errors and still experience exporting difficulties like the one above, check to see if you receive an error similar to this in the Control Center logs:\n\n> \"3/6/2014 9:25:30 AM|2|4|Error compiling export assembly: C:\\Users\\NinjaTrader\\Documents\\NinjaTrader 8\\bin\\Custom\\Indicator\\MyCustomIndicator.cs(42,18) : error CS0118: **NinjaTrader.Indicator.SMA** is a type but is used like a variable\"\n\n{% callout type=\"note\" %}\nThis error may have a different error code and message depending on which variant of .NET you have installed. An error message indicative of this issue would include an indicator name without quotation marks.\n{% /callout %}\n\nIf you experience this error, please follow this procedure:\n\n1. Take note of which indicator is referenced by the error. In the above example, it is the **SMA**\n2. Go to your **NinjaScript Export** utility. (Tools > Export > **NinjaScript**...)\n3. After press \"add\" select “System indicators” from the \"Type\" drop down\n4. Add the indicator that was referenced in the error to the export list along with your custom **NinjaScript** by pressing the > button\n5. Press the “Export” button to create your **NinjaScript Archive File**. If you receive the same error again, repeat this procedure until you add all the referenced system indicators and are able to successfully export your custom **NinjaScript**.\n{% /table %}\n\n{% callout type=\"note\" %}\nIf the indicator referenced in the error is another custom indicator you will need to follow the same procedure to add the custom indicator.\n{% /callout %}"
  },
  {
    "_id": "d942f64886578d8747312e368ed92d9f6b2a8d45556f0f924e2444fe911d15af",
    "_type": "desktopSdkDoc",
    "title": "import",
    "pathName": "import",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "You should only import **NinjaScript Archive** files (.zip) that you have obtained from a trusted source.\n\nTo import:\n\n1. From the Control Center window select the menu **Tools > Import > NinjaScript...** to open the \"Import\" dialog window.\n2. Select the file you want to import.\n3. Press the **Import** button."
  },
  {
    "_id": "7cd8fc9487fe707cad7f1e5a7d708fddf58938b9f4d150e2b92fc576f96f4860",
    "_type": "desktopSdkDoc",
    "title": "protection_dll_security",
    "pathName": "protection_dll_security",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "## Protection/DLL Security\n\nAlthough **.NET DLL** files are compiled which prevents users from being able to see your proprietary source code, they are still subject to decompilation and reverse engineering attempts. If you want a higher level of security, you can select the \"**Protect compiled assemblies**\" option which adds an additional layer of protection. This additional protection layer is provided by [SecureTeam's Agile.NET](http://www.secureteam.net/ninja-pricing \"SecureTeam's Agile.NET\") product which has been licensed by **NinjaTrader** and available at a reduced price to protect **NinjaTrader** assemblies. This product claims to completely stop **MSIL** disassembly and decompilation. We use it ourselves and are extremely happy with it.\n\nShould you wish to use **Agile.NET** for protecting your **NinjaScript** assemblies you will first need to go [here](http://www.secureteam.net/ninja-pricing \"CliSecure Download\") to download and purchase the product. Once installed, please run the **Agile.NET** standalone product once to input in the license information you should have received when you downloaded it. After that, when you use **NinjaTrader's Export NinjaScript** utility and select the \"**Protect compiled assemblies**\" option for export, it will automatically protect your **NinjaScript** assembly with **Agile.NET**.\n\nPlease note that this version of **Agile.NET** will only work for protecting **NinjaScript** assemblies within **NinjaTrader**. If you would like to protect other files outside of **NinjaTrader** please consider purchasing the full version of **Agile.NET** from **SecureTeam** directly [here](http://www.secureteam.net/ninja-pricing \"Agile.NET Purchase\") 'Agile.NET 6.0 Code Protection'. **NinjaScript** assemblies protected with the full version of **Agile.NET** will also work in **NinjaTrader**.\n\nAt this time we recommend using version [6.9.1.2](https://secureteam.net/content/AgileDotNetInstaller6912.exe)\n\nFor clients on 8.0.28.0 or older you can continue to use [6.6.0.35](https://secureteam.net/content/AgileDotNetInstaller66035.exe)"
  },
  {
    "_id": "141fe4d1c2fb7932530294a7c5fb01b996c0753e4015388740e7cc61a7dfc4cb",
    "_type": "desktopSdkDoc",
    "title": "remove-ninjascript-assembly",
    "pathName": "remove_ninjascript_assembly",
    "parent": "distribution",
    "order": 0,
    "status": "updated",
    "section": "guides",
    "markdown": "This will allow you to remove installed **NinjaScript** assembly files.\n\nTo remove a **NinjaScript** assembly:\n\n1. From the Control Center window select the menu **Tools** > **Remove NinjaScript Assembly**.\n2. Select the file(s) you want to remove (MultiSelect would be possible via holding **Shift** pressed while selecting the desired files for removal).\n3. Press the **Remove NinjaScript assembly** button.\n\n{% callout type=\"note\" %}\nRemove NinjaScript Assembly will not unload existing assemblies until restart, this means you should not import the same assemblies again until you have restarted **NinjaTrader**.\n{% /callout %}"
  }
]