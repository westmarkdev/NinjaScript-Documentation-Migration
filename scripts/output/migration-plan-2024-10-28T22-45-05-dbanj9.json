[
  {
    "_id": "0b328e9723f188806e6f664d632c44f79f04eeae2b16b9c083a3354b721ad5c5",
    "_type": "desktopSdkDoc",
    "title": "AccountSelector",
    "pathName": "accountselector",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\nAccountSelector can be used as an UI element users can interact with for selecting accounts.\n\n## Events and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* Cleanup()\n* Disposes of the AccountSelector (Note: calling the **NTTabPage base.Cleanup()** is sufficient to clean up this control)\n\n---\n\n* SelectedAccount\n* Returns an **Account** representing the selected account\n\n---\n\n* SelectionChanged\n* Event handler for when the selected account has changed\n{% /table %}\n\n## Examples\n\n```csharp\n/* Example of subscribing/unsubscribing to market data from an Add On. The concept can be carried over\nto any NinjaScript object you may be working on. */\npublic class MyAddOnTab : NTTabPage\n{\n     private AccountSelector accountSelector\n\n     public MyAddOnTab()\n     {\n         // Note: pageContent (not demonstrated in this example) is the page content of the XAML\n         // Find account selector\n         accountSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"accountSelector\") as AccountSelector;\n\n         // When the account selector's selection changes, unsubscribe and resubscribe\n         accountSelector.SelectionChanged += (o, args) =>\n         {\n             if (accountSelector.SelectedAccount != null)\n             {\n                 // Unsubscribe to any prior account subscriptions\n                 accountSelector.SelectedAccount.AccountItemUpdate -= OnAccountItemUpdate;\n                 accountSelector.SelectedAccount.ExecutionUpdate -= OnExecutionUpdate;\n                 accountSelector.SelectedAccount.OrderUpdate -= OnOrderUpdate;\n                 accountSelector.SelectedAccount.PositionUpdate -= OnPositionUpdate;\n\n                 // Subscribe to new account subscriptions\n                 accountSelector.SelectedAccount.AccountItemUpdate   += OnAccountItemUpdate;\n                 accountSelector.SelectedAccount.ExecutionUpdate     += OnExecutionUpdate;\n                 accountSelector.SelectedAccount.OrderUpdate         += OnOrderUpdate;\n                 accountSelector.SelectedAccount.PositionUpdate      += OnPositionUpdate;\n             }\n         };\n     }\n\n     // Called by TabControl when tab is being removed or window is closed\n     public override void Cleanup()\n     {\n         // Clean up our resources\n         base.Cleanup();\n     }\n\n     // Other required NTTabPage members left out for demonstration purposes. Be sure to add them in your own code.\n}\n```\n\n```xml\n<page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:accountdata=\"clr-namespace:NinjaTrader.Gui.AccountData;assembly=NinjaTrader.Gui\" xmlns:accountperformance=\"clr-namespace:NinjaTrader.Gui.AccountPerformance;assembly=NinjaTrader.Gui\" xmlns:atmstrategy=\"clr-namespace:NinjaTrader.Gui.NinjaScript.AtmStrategy;assembly=NinjaTrader.Gui\" xmlns:tools=\"clr-namespace:NinjaTrader.Gui.Tools;assembly=NinjaTrader.Gui\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n\n<grid>\n     <tools:accountselector horizontalalignment=\"Left\" verticalalignment=\"Top\" x:name=\"accountSelector\"></tools:accountselector>\n</grid>\n</page>\n```"
  },
  {
    "_id": "7fc1036d5ce6c76ad899ab9fc3609110912d6ee315d753d82fd35c5cc4d4ca71",
    "_type": "desktopSdkDoc",
    "title": "AtmStrategySelector",
    "pathName": "atmstrategyselector",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\nAtmStrategySelector is an UI element users can interact with for selecting ATM Strategies.\n\n## Events and Properties\n\n{% table %}\n\n---\n\n* Cleanup()\n* Disposes of the AtmStrategySelector  (Note: calling the **NTTabPage base.Cleanup()** is sufficient to clean up this control)\n\n---\n\n* CustomPropertiesChanged\n* Event handler for when properties have changed on the ATM strategy\n\n---\n\n* Id\n* A string identifying the ATM Strategy selector\n\n---\n\n* SelectedAtmStrategy\n* Returns an AtmStrategy representing the selected ATM strategy\n\n---\n\n* SelectionChanged\n* Event handler for when the selected ATM strategy has changed\n{% /table %}\n\n## Examples\n\nThis example demonstrates how to use the ATM strategy selector and properly link its behavior with the quantity up/down and TIF selectors.\n\n## Examples\n\n```csharp\nprivate QuantityUpDown qudSelector;\nprivate TifSelector tifSelector;\nprivate AtmStrategy.AtmStrategySelector atmStrategySelector;\n\nprivate DependencyObject LoadXAML()\n{\n    qudSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"qudSelector\") as QuantityUpDown;\n    tifSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"tifSelector\") as TifSelector;\n    tifSelector.SetBinding(TifSelector.AccountProperty, new Binding { Source = accountSelector, Path = new PropertyPath(\"SelectedAccount\") });\n    tifSelector.SelectionChanged += (o, args) =>\n    {\n        if (atmStrategySelector.SelectedAtmStrategy != null)\n            atmStrategySelector.SelectedAtmStrategy.TimeInForce = tifSelector.SelectedTif;\n    };\n    atmStrategySelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"atmStrategySelector\") as AtmStrategy.AtmStrategySelector;\n    atmStrategySelector.Id = Guid.NewGuid().ToString(\"N\");\n    if (atmStrategySelector != null)\n        atmStrategySelector.CustomPropertiesChanged += OnAtmCustomPropertiesChanged;\n    atmStrategySelector.SetBinding(AtmStrategy.AtmStrategySelector.AccountProperty, new Binding { Source = accountSelector, Path = new PropertyPath(\"SelectedAccount\") });\n    atmStrategySelector.SelectionChanged += (o, args) =>\n    {\n        if (atmStrategySelector.SelectedItem == null)\n            return;\n        if (args.AddedItems.Count > 0)\n        {\n            AtmStrategy selectedAtmStrategy = args.AddedItems[0] as AtmStrategy;\n            if (selectedAtmStrategy != null)\n                tifSelector.SelectedTif = selectedAtmStrategy.TimeInForce;\n        }\n    };\n}\n\nprivate void OnAtmCustomPropertiesChanged(object sender, NinjaScript.AtmStrategy.CustomPropertiesChangedEventArgs args)\n{\n    tifSelector.SelectedTif = args.NewTif;\n    qudSelector.Value = args.NewQuantity;\n}\n\npublic override void Cleanup()\n{\n    base.Cleanup();\n}\n```\n\n```xml\n<atmstrategy:atmstrategyselector grid.column=\"2\" grid.row=\"12\" linkedquantity=\"{Binding ElementName=qudSelector, Path=Value, Mode=OneWay}\" x:name=\"atmStrategySelector\">\n    <atmstrategy:atmstrategyselector.margin>\n        <thickness bottom=\"0\" left=\"{StaticResource MarginButtonLeft}\" right=\"{StaticResource MarginBase}\" top=\"{StaticResource MarginControl}\"></thickness>\n    </atmstrategy:atmstrategyselector.margin>\n</atmstrategy:atmstrategyselector>\n```"
  },
  {
    "_id": "59cb57b14e53b6ed2860a996ffa1573ce243dd1f33ba607c9a8d4262a34b02cc",
    "_type": "desktopSdkDoc",
    "title": "InstrumentSelector",
    "pathName": "instrumentselector",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\n**InstrumentSelector** is a UI element users can interact with for selecting instruments. This can be used with instrument linking between windows.\n\n## Events and Properties\n\n{% table %}\n\n---\n\n* **Cleanup()**\n* Disposes of the InstrumentSelector (Note: calling the **[NTTabPage base.Cleanup()](nttabpage_cleanup)** is sufficient to clean up this control)\n\n---\n\n* **Instrument**\n* An Instrument representing the selected instrument\n\n---\n\n* **InstrumentChanged**\n* Event handler for when the instrument changes on the instrument selector\n\n{% /table }\n\n## Examples\n\nThis example demonstrates how to use the instrument selector and properly link its behavior to windows linking.\n\n```csharp\nprivate InstrumentSelector instrumentSelector;\nprivate DependencyObject LoadXAML()\n{\n    // Note: pageContent (not demonstrated in this example) is the page content of the XAML\n\n    // Find the Instrument selector\n    instrumentSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"instrumentSelector\") as InstrumentSelector;\n    if (instrumentSelector != null)\n        instrumentSelector.InstrumentChanged += OnInstrumentChanged;\n}\n\n// This method is fired when our instrument selector changes instruments\nprivate void OnInstrumentChanged(object sender, EventArgs e)\n{\n    Instrument = sender as Cbi.Instrument;\n}\n\n// IInstrumentProvider member. Required if you want to use the instrument link mechanism in this Add On window\npublic Cbi.Instrument Instrument\n{\n    get { return instrument; }\n    set\n    {\n        instrument = value;\n        if (instrumentSelector != null)\n            instrumentSelector.Instrument = value;\n\n        // Send instrument to other windows linked to the same color\n        PropagateInstrumentChange(value);\n    }\n}\n\n// NOTE: Don't forget to clean up resources and unsubscribe to events\n// Called by TabControl when tab is being removed or window is closed\npublic override void Cleanup()\n{\n    // Clean up our resources\n    if (instrumentSelector != null)\n    {\n        instrumentSelector.InstrumentChanged -= OnInstrumentChanged;\n    }\n    base.Cleanup();\n\n```\n\n```xaml\n<page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:accountdata=\"clr-namespace:NinjaTrader.Gui.AccountData;assembly=NinjaTrader.Gui\" xmlns:accountperformance=\"clr-namespace:NinjaTrader.Gui.AccountPerformance;assembly=NinjaTrader.Gui\" xmlns:atmstrategy=\"clr-namespace:NinjaTrader.Gui.NinjaScript.AtmStrategy;assembly=NinjaTrader.Gui\" xmlns:tools=\"clr-namespace:NinjaTrader.Gui.Tools;assembly=NinjaTrader.Gui\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n\n<grid>\n    <grid.columndefinitions>\n        <columndefinition width=\"Auto\"></columndefinition>\n        <columndefinition width=\"*\"></columndefinition>\n    </grid.columndefinitions>\n    <tools:instrumentselector grid.column=\"0\" lastusedgroup=\"MyAddOn\" x:name=\"instrumentSelector\"></tools:instrumentselector>\n</grid>\n</page>\n```"
  },
  {
    "_id": "ccc57419e0a3ea5a790479c38de4490ac28bf9ab2faa3d34e0562ee90b322b60",
    "_type": "desktopSdkDoc",
    "title": "IntervalSelector",
    "pathName": "intervalselector",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\n**IntervalSelector** is as a UI element users can interact with for selecting intervals. This can be used with interval linking between windows.\n\n## Events and Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Cleanup()**\n* Disposes of the **IntervalSelector** (Note: calling the [**NTTabPage** base.**Cleanup()**](nttabpage_cleanup) is sufficient to clean up this control)\n\n---\n\n* **Interval**\n* A **BarsPeriod** representing the interval currently selected\n\n---\n\n* **IntervalChanged**\n* Event handler for when the interval changed\n{% /table %}\n\n## Examples\n\nThis example demonstrates how to use the interval selector and properly link its behavior to windows linking.\n\n```csharp\n\nprivate IntervalSelector intervalSelector;\n  \nprivate DependencyObject LoadXAML()\n{\n    // Note: pageContent (not demonstrated in this example) is the page content of the XAML\n  \n    // Find the Interval selector\n    intervalSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"intervalSelector\") as IntervalSelector;\n    if (intervalSelector != null)\n        intervalSelector.IntervalChanged += OnIntervalChanged;\n}\n  \n// This method is fired when our interval selector changes intervals\nprivate void OnIntervalChanged(object sender, BarsPeriodEventArgs e)\n{\n    if (e.BarsPeriod == null)\n        return;\n}\n  \n/***IIntervalProvider** member. Required if you want to use the interval linker mechanism on this window.\nNo functionality has been linked to the interval linker in this sample.*/\npublic BarsPeriod BarsPeriod { get; set; }\n  \n// NOTE: Don't forget to clean up resources and unsubscribe to events\n// Called by **TabControl** when tab is being removed or window is closed\npublic override void Cleanup()\n{\n    // Clean up our resources\n    if (intervalSelector != null)\n        intervalSelector.IntervalChanged -= OnIntervalChanged;\n\n    base.Cleanup();\n}\n```\n\n```XAML\n<page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:accountdata=\"clr-namespace:NinjaTrader.Gui.AccountData;assembly=NinjaTrader.Gui\" xmlns:accountperformance=\"clr-namespace:NinjaTrader.Gui.AccountPerformance;assembly=NinjaTrader.Gui\" xmlns:atmstrategy=\"clr-namespace:NinjaTrader.Gui.NinjaScript.AtmStrategy;assembly=NinjaTrader.Gui\" xmlns:tools=\"clr-namespace:NinjaTrader.Gui.Tools;assembly=NinjaTrader.Gui\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n  \n<grid>\n    <grid.columndefinitions>\n        <columndefinition width=\"Auto\"></columndefinition>\n        <columndefinition width=\"*\"></columndefinition>\n    </grid.columndefinitions>\n  \n    <tools:intervalselector grid.column=\"0\" horizontalalignment=\"Left\" x:name=\"intervalSelector\"></tools:intervalselector>\n</grid>\n</page>\n```"
  },
  {
    "_id": "12acf931af118b1feb87da2c69deb6a002135437b6cec335ba840e9177e6322b",
    "_type": "desktopSdkDoc",
    "title": "QuantityUpDown",
    "pathName": "quantityupdown",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\n**QuantityUpDown** can be used as a UI element users can interact with for selecting quantity.\n\n## Events and Properties\n\n{% table %}\n\n* Value\n* An int representing the quantity\n{% /table %}\n\n## Examples\n\nThis example demonstrates how to use the quantity up/down selector and properly link its behavior with the ATM strategy and TIF selectors.\n\n{% table %}\n\n* C#\n\n---\n\n* private QuantityUpDown qudSelector;\n* private TifSelector tifSelector;\n* private AtmStrategy.AtmStrategySelector atmStrategySelector;\n\nprivate DependencyObject LoadXAML()\n{\n    // Note: pageContent (not demonstrated in this example) is the page content of the XAML\n    // Find the Quantity Up-Down selector\n    qudSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"qudSelector\") as QuantityUpDown;\n\n    // Find the TIF selector\n    tifSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"tifSelector\") as TifSelector;\n\n    // Be sure to bind our account selector to our TIF selector to ensure proper functionality\n    tifSelector.SetBinding(TifSelector.AccountProperty, new Binding { Source = accountSelector,\n        Path = new PropertyPath(\"SelectedAccount\") });\n\n    // When our TIF selector's selection changes\n    tifSelector.SelectionChanged += (o, args) =>\n    {\n        // Change the selected TIF in the ATM strategy too\n        if (atmStrategySelector.SelectedAtmStrategy != null)\n            atmStrategySelector.SelectedAtmStrategy.TimeInForce = tifSelector.SelectedTif;\n    };\n\n    // Find ATM Strategy selector and attach event handler\n    atmStrategySelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"atmStrategySelector\") as AtmStrategy.AtmStrategySelector;\n    atmStrategySelector.Id = Guid.NewGuid().ToString(\"N\");\n    if (atmStrategySelector != null)\n        atmStrategySelector.CustomPropertiesChanged += OnAtmCustomPropertiesChanged;\n\n    // Be sure to bind our account selector to our ATM strategy selector to ensure proper functionality\n    atmStrategySelector.SetBinding(AtmStrategy.AtmStrategySelector.AccountProperty,\n        new Binding { Source = accountSelector, Path = new PropertyPath(\"SelectedAccount\") });\n\n    // When our ATM selector's selection changes\n    atmStrategySelector.SelectionChanged += (o, args) =>\n    {\n        if (atmStrategySelector.SelectedItem == null)\n            return;\n        if (args.AddedItems.Count > 0)\n        {\n            // Change the selected TIF in our TIF selector too\n            AtmStrategy selectedAtmStrategy = args.AddedItems[0] as AtmStrategy;\n            if (selectedAtmStrategy != null)\n                tifSelector.SelectedTif = selectedAtmStrategy.TimeInForce;\n        }\n    };\n}\n\nprivate void OnAtmCustomPropertiesChanged(object sender, NinjaScript.AtmStrategy.CustomPropertiesChangedEventArgs args)\n{\n    // Adjust our TIF and Quantity selectors to the new ATM strategy values\n    tifSelector.SelectedTif = args.NewTif;\n    qudSelector.Value = args.NewQuantity;\n}\n\n// NOTE: Don't forget to clean up resources and unsubscribe to events\n// Called by TabControl when tab is being removed or window is closed\npublic override void Cleanup()\n{\n    // Clean up our resources\n    base.Cleanup();\n}\n{% /table %}\n\n{% table %}\n\n* XAML\n\n---\n\n* <page xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" xmlns:accountdata=\"clr-namespace:NinjaTrader.Gui.AccountData;assembly=NinjaTrader.Gui\" xmlns:accountperformance=\"clr-namespace:NinjaTrader.Gui.AccountPerformance;assembly=NinjaTrader.Gui\" xmlns:atmstrategy=\"clr-namespace:NinjaTrader.Gui.NinjaScript.AtmStrategy;assembly=NinjaTrader.Gui\" xmlns:tools=\"clr-namespace:NinjaTrader.Gui.Tools;assembly=NinjaTrader.Gui\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\">\n\n<grid>\n    <grid.columndefinitions>\n        <columndefinition width=\"Auto\"></columndefinition>\n        <columndefinition width=\"Auto\"></columndefinition>\n        <columndefinition width=\"*\"></columndefinition>\n    </grid.columndefinitions>\n\n    <tools:quantityupdown grid.column=\"0\" value=\"1\" x:name=\"qudSelector\"></tools:quantityupdown>\n    <tools:tifselector grid.column=\"1\" x:name=\"tifSelector\">\n    <atmstrategy:atmstrategyselector grid.column=\"2\" linkedquantity=\"{Binding Value, \n    ElementName=qudSelector, Mode=OneWay}\" x:name=\"atmStrategySelector\"></atmstrategy:atmstrategyselector>\n</tools:tifselector></grid>\n</page>\n{% /table %}\n\n```"
  },
  {
    "_id": "2587dd25100a601e53f53f0b7eb24a6ecbe392559d15d7ae3a733540f5427638",
    "_type": "desktopSdkDoc",
    "title": "TifSelector",
    "pathName": "tifselector",
    "parent": "controls",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\n**TifSelector** can be used as a UI element users can interact with for selecting TIF.\n\n## Events and Properties\n\n{% table %}\n\n---\n\n* **Cleanup()** | Disposes of the **TifSelector** (Note: calling the [NTTabPage base.Cleanup()](nttabpage_cleanup) is sufficient to clean up this control)\n\n---\n\n* **SelectedTif** | A **TimeInForce** representing the selected TIF  \n\t- Possible values:  \n\t- **TimeInForce.Day**  \n\t- **TimeInForce.Gtc**  \n\t- **TimeInForce.Gtd**  \n\t- **TimeInForce.Ioc**  \n\t- **TimeInForce.Opg**\n\n---\n\n* **SelectionChanged** | Event handler for when the selected ATM strategy has changed\n{% /table %}\n\n## Examples\n\nThis example demonstrates how to use the **TIF selector** and properly link its behavior with the quantity up/down and TIF selectors.\n\n```csharp\nprivate QuantityUpDown                  qudSelector;\n\nprivate TifSelector                     tifSelector;\n\nprivate AtmStrategy.AtmStrategySelector atmStrategySelector;\n\nprivate DependencyObject LoadXAML()\n\n{\n\n    // Note: pageContent (not demonstrated in this example) is the page content of the XAML\n\n    // Find the Quantity Up-Down selector\n\n    qudSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"qudSelector\") as QuantityUpDown;\n\n    // Find the TIF selector\n\n    tifSelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"tifSelector\") as TifSelector;\n\n    // Be sure to bind our account selector to our TIF selector to ensure proper functionality\n\n    tifSelector.SetBinding(TifSelector.AccountProperty, new Binding { Source = accountSelector,  \n         Path = new PropertyPath(\"SelectedAccount\") });\n\n    // When our TIF selector's selection changes\n\n    tifSelector.SelectionChanged += (o, args) =>\n\n    {\n\n        // Change the selected TIF in the ATM strategy too\n\n        if (atmStrategySelector.SelectedAtmStrategy != null)\n\n              atmStrategySelector.SelectedAtmStrategy.TimeInForce = tifSelector.SelectedTif;\n\n    };\n\n    // Find ATM Strategy selector and attach event handler\n\n    atmStrategySelector = LogicalTreeHelper.FindLogicalNode(pageContent, \"atmStrategySelector\") as AtmStrategy.AtmStrategySelector;\n\n    atmStrategySelector.Id = Guid.NewGuid().ToString(\"N\");\n\n    if (atmStrategySelector != null)\n\n         atmStrategySelector.CustomPropertiesChanged += OnAtmCustomPropertiesChanged;\n\n    // Be sure to bind our account selector to our ATM strategy selector to ensure proper functionality\n\n    atmStrategySelector.SetBinding(AtmStrategy.AtmStrategySelector.AccountProperty,\n\n        new Binding { Source = accountSelector, Path = new PropertyPath(\"SelectedAccount\") });\n\n    // When our ATM selector's selection changes\n\n    atmStrategySelector.SelectionChanged += (o, args) =>\n\n    {\n\n        if (atmStrategySelector.SelectedItem == null)\n\n              return;\n\n        if (args.AddedItems.Count > 0)\n\n         {\n\n              // Change the selected TIF in our TIF selector too\n\n              AtmStrategy selectedAtmStrategy = args.AddedItems[0] as AtmStrategy;\n\n              if (selectedAtmStrategy != null)\n\n                   tifSelector.SelectedTif = selectedAtmStrategy.TimeInForce;\n\n         }\n\n };\n\n}\n\nprivate void OnAtmCustomPropertiesChanged(object sender, NinjaScript.AtmStrategy.CustomPropertiesChangedEventArgs args)\n\n{\n\n    // Adjust our TIF and Quantity selectors to the new ATM strategy values\n\n    tifSelector.SelectedTif = args.NewTif;\n\n    qudSelector.Value = args.NewQuantity;\n\n}\n\n// NOTE: Don't forget to clean up resources and unsubscribe to events\n\n// Called by TabControl when tab is being removed or window is closed\n\npublic override void Cleanup()\n\n{\n\n  // Clean up our resources  \n    base.Cleanup();\n\n}\n```\n\n```xaml\n<Page        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n\n xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n\n xmlns:Tools=\"clr-namespace:NinjaTrader.Gui.Tools;assembly=NinjaTrader.Gui\"\n\n xmlns:AccountPerformance=\"clr-namespace:NinjaTrader.Gui.AccountPerformance;assembly=NinjaTrader.Gui\"\n\n xmlns:AccountData=\"clr-namespace:NinjaTrader.Gui.AccountData;assembly=NinjaTrader.Gui\"\n\n xmlns:AtmStrategy=\"clr-namespace:NinjaTrader.Gui.NinjaScript.AtmStrategy;assembly=NinjaTrader.Gui\">\n\n<Grid>\n\n    <Grid.ColumnDefinitions>\n\n         <ColumnDefinition Width=\"Auto\"/>\n\n         <ColumnDefinition Width=\"Auto\"/>\n\n         <ColumnDefinition Width=\"*\"/>\n\n    </Grid.ColumnDefinitions>\n\n    <Tools:QuantityUpDown x:Name=\"qudSelector\" Value=\"1\" Grid.Column=\"0\"/>\n\n    <Tools:TifSelector x:Name=\"tifSelector\" Grid.Column=\"1\"/>\n\n    <AtmStrategy:AtmStrategySelector x:Name=\"atmStrategySelector\" LinkedQuantity=\"{Binding Value,\n\n    ElementName=qudSelector, Mode=OneWay}\" Grid.Column=\"2\"/>\n\n</Grid>\n```"
  }
]