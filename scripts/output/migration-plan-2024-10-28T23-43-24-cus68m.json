[
  {
    "_id": "b6bce5fe36b74d475463b2370a664f90b757455a8001b835f73cfc2cd7b7dd0b",
    "_type": "desktopSdkDoc",
    "title": "Accumulation/Distribution (ADL)",
    "pathName": "accumulation_distribution_adl",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThere are many indicators available to measure volume and the flow of money for a particular stock, index or security. One of the most popular volume indicators over the years has been the Accumulation/Distribution Line. The basic premise behind volume indicators, including the Accumulation/Distribution Line, is that volume precedes price. Volume reflects the amount of shares traded in a particular stock, and is a direct reflection of the money flowing into and out of a stock. Many times before a stock advances, there will be period of increased volume just prior to the move. Most volume or money flow indicators are designed to identify early increases in positive or negative volume flow to gain an edge before the price moves. (Note: the terms \"money flow\" and \"volume flow\" are essentially interchangeable.)\n\n## Syntax\n\n**ADL()**\n\n**ADL(ISeries<`double`> input)**\n\nReturns default value\n\n**ADL()[int barsAgo]**\n\n**ADL[ISeries<`double`> input](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n\n---\n\n* Indicator [source data](valid_input_data_for_indicator)\n{% /table %}\n\n## Example\n\n```csharp\n// Evaluates if ADL is rising\nbool isRising = IsRising(ADL());\nPrint(\"Is ADL rising? \" + isRising);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "45278cb840d8fa53c0f4b574b66b530e6bbc9432b2191d533d0d4fca3c46b949",
    "_type": "desktopSdkDoc",
    "title": "Adaptive Price Zone (APZ)",
    "pathName": "adaptive_price_zone_apz",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Adaptive Price Zone indicator from the S&C, September 2006 article \"Trading With An Adpative Price Zone\" by Lee Leibfarth is a set of bands based on a short term double smooth exponential moving average. The bands form a channel that surrounds the average price and tracks price fluctuations quickly, especially in volatile markets. As price crosses above the zone it can signal an opportunity to sell in anticipation of a reversal. As price crosses below the zone it can signal an opportunity to buy in anticipation of a reversal.\n\n## Syntax\n\n**APZ(double bandPct, int period)**\n\n**APZ(ISeries<`double`> input, double bandPct, int period)**\n\nReturns upper band value\n\n**APZ(double bandPct, int period).Upper[int barsAgo]**\n\n**APZ(ISeries<`double`> input, double bandPct, int period).Upper[int barsAgo]**\n\nReturns lower band value\n\n**APZ(double bandPct, int period).Lower[int barsAgo]**\n\n**APZ(ISeries<`double`> input, double bandPct, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* bandPct\n* The number of standard deviations\n\n---\n\n* input\n* Indicator source data\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Example\n\n```csharp\n// Prints the current upper band value of a 20 period APZ\ndouble upperValue = APZ(2, 20).Upper[0];\nPrint(\"The current APZ upper value is \" + upperValue.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "dd16713ee555b089e5c033a85b45d5ad9e2cc1aa3e879d3fe094f606f7f514cb",
    "_type": "desktopSdkDoc",
    "title": "Aroon",
    "pathName": "aroon",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by Tushar Chande in 1995, Aroon is an indicator system that can be used to determine whether a stock is trending or not and how strong the trend is. \"Aroon\" means \"Dawn's Early Light\" in Sanskrit and Chande chose that name for this indicator since it is designed to reveal the beginning of a new trend.\n\nThe Aroon indicator system consists of two lines, **Aroon(up)** and **Aroon(down)**. It takes a single parameter which is the number of time periods to use in the calculation. Aroon(up) is the amount of time (on a percentage basis) that has elapsed between the start of the time period and the point at which the highest price during that time period occurred. If the stock closes at a new high for the given period, Aroon(up) will be +100. For each subsequent period that passes without another new high, Aroon(up) moves down by an amount equal to (1 / # of periods) x 100.\n\n## Syntax\n\n**Aroon(int period)**\n**Aroon(ISeries<`double`> input, int period)**\n\nReturns up value\n\n**Aroon(int period).Up[int barsAgo]**\n**Aroon(ISeries<`double`> input, int period).Up[int barsAgo]**\n\nReturns down value\n\n**Aroon(int period).Down[int barsAgo]**\n**Aroon(ISeries<`double`> input, int period).Down[int barsAgo]**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current up/down values of a 20 period Aroon indicator\ndouble upValue = Aroon(20).Up[0];\ndouble downValue = Aroon(20).Down[0];\nPrint(\"The current Aroon up value is \" + upValue);\nPrint(\"The current Aroon down value is \" + downValue);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "75d20faac7f4d2aa4d6b925431fa545f0643d1565034e993b2eb4097b64be482",
    "_type": "desktopSdkDoc",
    "title": "Aroon Oscillator",
    "pathName": "aroon_oscillator",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA trend-following indicator that uses aspects of the Aroon indicator (\"Aroon up\" and \"Aroon down\") to gauge the strength of a current trend and the likelihood that it will continue. The Aroon oscillator is calculated by subtracting Aroon down from Aroon up. Readings above zero indicate that an uptrend is present, while readings below zero indicate that a downtrend is present.\n\nCourtesy of [Investopedia](http://investopedia.com/terms/a/aroonoscillator.asp)\n\n## Syntax\n\n**AroonOscillator(int period)**  \n\n**AroonOscillator(ISeries<`double`> input, int period)**\n\nReturns default value  \n\n**AroonOscillator[int period](int barsAgo)**  \n\n**AroonOscillator[ISeries<`double`> input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current values of a 20 period AroonOscillator using default price type\ndouble upValue = AroonOscillator(20)[0];\nPrint(\"The current AroonOscillator value is \" + upValue.ToString());\n\n// Prints the current values of a 20 period AroonOscillator using high price type\ndouble upValue = AroonOscillator(High, 20)[0];\nPrint(\"The current AroonOscillator value is \" + upValue.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "93939c37a51683b39f9a96a76c9a36b5b92685df27e61360256383104427260d",
    "_type": "desktopSdkDoc",
    "title": "Average Directional Index (ADX)",
    "pathName": "average_directional_index_adx",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nAn indicator used in technical analysis as an objective value for the strength of trend. ADX is non-directional so it will quantify a trend's strength regardless of whether it is up or down. ADX is usually plotted in a chart window along with two lines known as the DMI (Directional Movement Indicators). ADX is derived from the relationship of the DMI lines.\n\n... Courtesy of [Investopedia](http://investopedia.com/terms/a/adx.asp)\n\n## Syntax\n\n**ADX(int period)**  \n\n**ADX(ISeries<`double`> input, int period)**\n\nReturns default value  \n\n**ADX[int period](int barsAgo)**  \n\n**ADX[ISeries<`double`> input, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period ADX\ndouble value = ADX[20](0);\nPrint(\"The current ADX value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "0caa0c2cf9f209eb88d67b7aa582f43d9752c492fa20ba123452290138bb11b2",
    "_type": "desktopSdkDoc",
    "title": "Average Directional Movement Rating (ADXR)",
    "pathName": "average_directional_movement_rating_adxr",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe ADXR is equal to the current [ADX](average_directional_index_adx) plus the ADX from n bars ago divided by two.\n\n## Syntax\n\n**ADXR(int interval, int period)**\n\n**ADXR(ISeries<`double`> input, int interval, int period)**\n\nReturns default value\n\n**ADXR[int interval, int period](int barsAgo)**\n\n**ADXR[ISeries<`double`> input, int interval, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data\n\n---\n\n* interval\n* The interval between the first ADX value and the current ADX value\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Example\n\n```csharp\n// Prints the current value of a 20 period ADXR using default price type\ndouble value = ADXR(10, 20)[0];\nPrint(\"The current ADXR value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "39826898489bf81e083db898a29fa979b6b71a2acd2bc56ecdc815e2ff963a91",
    "_type": "desktopSdkDoc",
    "title": "Average True Range (ATR)",
    "pathName": "average_true_range_atr",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA measure of volatility introduced by Welles Wilder in his book: New Concepts in Technical Trading Systems.\n\nThe True Range indicator is the greatest of the following:\n\n* current high less the current low.\n* the absolute value of the current high less the previous close.\n* the absolute value of the current low less the previous close.\n\nThe Average True Range is a moving average (generally 14-days) of the True Ranges.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/terms/a/atr.asp)\n\nThe original Wilder formula for an exponential moving average with a smoothing constant (k = 1/ Period) is used to calculate the ATR.\n\n## Syntax\n\n**ATR(int period)**  \n**ATR(ISeries<`double>` input, int period)**\n\nReturns default value  \n**ATR[int period](int barsAgo)**  \n**ATR[ISeries<`double`> input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n\n* Description\n\n---\n\n* input\n\n* Indicator source data\n\n---\n\n* period\n\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Example\n\n```csharp\n// Prints the current value of a 20 period ATR using default price type\ndouble value = ATR(20)[0];\nPrint(\"The current ATR value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "10a1af20bcac8704156bc83543971e234098c520871783115fcf5055653eeb6d",
    "_type": "desktopSdkDoc",
    "title": "Balance of Power (BOP)",
    "pathName": "balance_of_power_bop",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe balance of power (BOP) indicator measures the strength of the bulls vs. bears by assessing the ability of each to push price to an extreme level.\n\n## Syntax\n\n**BOP(int smooth)**\n**BOP(ISeries<`double`> input, int smooth)**\n\nReturns default value  \n\n**BOP[int smooth](int barsAgo)**  \n**BOP[ISeries<`double`> input, int smooth](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* smooth\n\n---\n\n* Indicator source data\n* The smoothing period\n{% /table %}\n\n## Example\n\n```csharp\n// Prints the current value of BOP using default price type and 3 period smoothing\ndouble value = BOP(3)[0];\nPrint(\"The current BOP value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "3c65743c477b0db9a4edf19d8efdd49b425a1d98814136587325f5d558241f78",
    "_type": "desktopSdkDoc",
    "title": "Block Volume",
    "pathName": "block_volume",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nBlock volume detects block trades and display how many occurred per bar. This can be displayed either as trades or volume. Historical tick data is required to plot historically.\n\n## Syntax\n\n**BlockVolume(int blockSize, CountType countType)**\n\n**BlockVolume(ISeries<`double`> input, int blockSize, CountType countType)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data\n\n---\n\n* blockSize\n* The minimum volume a trade must be to be considered a block trade\n\n---\n\n* countType\n* The format to count the block trades. By number of block trades that occurred or total block trade volume\n{% /table %}\n\n## Examples\n\n```csharp\n// A 1 tick data series must be added to OnStateChange() as this indicator runs off of tick data\nelse if (State == State.Configure)\n{\n   AddDataSeries(Data.BarsPeriodType.Tick, 1);\n}\n \n// Prints the current value of an 80 block trade size counted in volume for the Block Volume\nif (BarsInProgress == 0)\n{\ndouble value = BlockVolume(80, CountType.Volume)[0];\nPrint(\"The current Block Volume value is \" + value.ToString());\n}\n```"
  },
  {
    "_id": "ab9b117f824acffe920b6bea72b9ac3acd70562d0b9015ea2e7a7a4331909387",
    "_type": "desktopSdkDoc",
    "title": "Bollinger Bands",
    "pathName": "bollinger_bands",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by John Bollinger, Bollinger Bands are an indicator that allows users to compare volatility and relative price levels over a period time. The indicator consists of three bands designed to encompass the majority of a security's price action.\n\n1. A simple moving average in the middle\n2. An upper band (SMA plus 2 standard deviations)\n3. A lower band (SMA minus 2 standard deviations)\n\nStandard deviation is a statistical unit of measure that provides a good assessment of a price plot's volatility. Using the standard deviation ensures that the bands will react quickly to price movements and reflect periods of high and low volatility. Sharp price increases (or decreases), and hence volatility, will lead to a widening of the bands.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_Bbands.html)\n\n## Syntax\n\n**Bollinger(double numStdDev, int period)**  \n**Bollinger(ISeries<`double`> input, double numStdDev, int period)**\n\nReturns upper band value  \n**Bollinger(double numStdDev, int period).Upper[int barsAgo]**  \n**Bollinger(ISeries<`double`> input, double numStdDev, int period).Upper[int barsAgo]**\n\nReturns lower band value  \n**Bollinger(double numStdDev, int period).Lower[int barsAgo]**  \n**Bollinger(ISeries<`double`> input, double numStdDev, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator [source data](valid_input_data_for_indicator)\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current upper band value of a 20 period Bollinger using default price type\ndouble upperValue = Bollinger(2, 20).Upper[0];\nPrint(\"The current Bollinger upper value is \" + upperValue.ToString());\n\n// Prints the current upper band value of a 20 period Bollinger using low price type\ndouble upperValue = Bollinger(Low, 2, 20).Upper[0];\nPrint(\"The current Bollinger upper value is \" + upperValue.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "98096314a3b91edd0c30cc2f4b5c3b8082efcb958ed8d6fa0f3de30099352fd9",
    "_type": "desktopSdkDoc",
    "title": "BuySell Pressure",
    "pathName": "buysell_pressure",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe **BuySellPressure** indicator displays both the current bar's buying and selling pressure as percentage values based on the categorization of trades as buy or sell trades. Trades are categorized in real-time as a buy (at the ask or above) or as a sell (at the bid or below). Trades in between the market are ignored.\n\n{% callout type=\"note\" %}\n\nFor historical calculations, [Tick Replay](tick_replay) must be enabled.\n\n{% /callout %}\n\n## Syntax\n\n**BuySellPressure()**  \n\n**BuySellPressure(ISeries`<double>` input)**\n\n## Returns buy pressure value  \n\n**BuySellPressure().BuyPressure[int barsAgo]**  \n\n**BuySellPressure(ISeries`<double>` input).BuyPressure[int barsAgo]**\n\n## Returns sell pressure value  \n\n**BuySellPressure().SellPressure[int barsAgo]**  \n\n**BuySellPressure(ISeries`<double>` input).SellPressure[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n{% /table %}\n\n## Examples\n\n```csharp\nprotected override void OnStateChange()\n{\n    if (State == State.SetDefaults)\n    {\n        // Indicators will inherit the Calculate mode from the hosting script.\n        // Since BuySellPressure requires the use of Calculate.OnEachTick, we must ensure the hosting script has this Calculate mode set\n        Calculate = Calculate.OnEachTick;\n    }\n}\n\nprotected override void OnBarUpdate()\n{\n    // This checks that 70% or more of the volume hit the ask or higher\n    if (State == State.Historical || BuySellPressure().BuyPressure[0] > 70)\n    {\n        EnterLong();\n    }\n}\n```\n\n{% callout type=\"note\" %}\n\nTip: Since this indicator operates in a real-time environment, remember to check for **State.Realtime**, or enable **Tick Replay** on the associated Data Series. In the above example we check that 50% or more of the volume hit the ask or higher. Our statement checks if the data is being calculated on historical data first, if true, we enter long, if not true (live), the statement then checks for the Buy Volume condition.\n\n{% /callout %}\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "db1270cfe406c620712843b81e6f91d61858d6e03e4dfc5cf4749e69d0249a73",
    "_type": "desktopSdkDoc",
    "title": "BuySell Volume",
    "pathName": "buysell_volume",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe **BuySellVolume** indicator displays a real-time horizontal histogram of volume categorized as buy or sell trades. Trades are categorized in real-time as a buy (at the ask or above) or as a sell (at the bid or below) and then color coded. Trades in between the market are ignored.\n\n{% callout type=\"note\" %}\n\nFor historical calculations, [Tick Replay](tick_replay) must be enabled.\n\n{% /callout %}\n\n## Syntax\n\n**BuySellVolume()**  \n\n**BuySellVolume(ISeries`<double>` input)**\n\nReturns buy volume  \n\n**BuySellVolume().Buys[int barsAgo]**  \n\n**BuySellVolume(ISeries`<double>` input).Buys[int barsAgo]**\n\nReturns sell volume  \n\n**BuySellVolume().Sells[int barsAgo]**  \n\n**BuySellVolume(ISeries`<double>` input).Sells[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* **Parameter**\n* **Description**\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n{% /table %}\n\n## Examples\n\n```csharp\nprotected override void OnStateChange()\n{\n    if (State == State.SetDefaults)\n    {\n        // Indicators will inherit the Calculate mode from the hosting script.\n        // Since BuySellVolume requires the use of Calculate.OnEachTick, we must ensure the hosting script has this Calculate mode set\n        Calculate = Calculate.OnEachTick;\n    }\n}\n\nprotected override void OnBarUpdate()\n{\n    // This checks that 5,000 or more of the volume hit the bid or lower\n    if (State == State.Historical || BuySellVolume().Sells[0] > 5000)\n    {\n        EnterLong();      \n    }\n}\n```\n\n{% callout type=\"note\" %}\n\nTip: Since this indicator operates in a real-time environment, remember to check for **State.Realtime**, or enable **Tick Replay** on the associated Data Series. In the above example we check that 5,000 or more of the volume hit the bid or lower. Our statement checks if the data is being calculated on historical data first; if true, we enter long. If not true (live), the statement then checks for the Buy Volume condition.\n\n{% /callout %}\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "10d54d83def96bb4d35c37fc23b5fd88a9c44385485e1e6f00f0d535e7c45f14",
    "_type": "desktopSdkDoc",
    "title": "Camarilla Pivots",
    "pathName": "camarilla_pivots",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nCamarilla pivots are a price analysis tool that generates potential support and resistance levels by multiplying the prior range then adding or subtracting it from the close.\n\n## Syntax\n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**\n\nReturns R1 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**\n\nReturns R2 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**\n\nReturns R3 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**\n\nReturns R4 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R4[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R4[int barsAgo]**\n\nReturns S1 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**\n\nReturns S2 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**\n\nReturns S3 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**\n\nReturns S4 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S4[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S4[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* **pivotRangeType**\n* Sets the range for the type of pivot calculated. Possible values are:  \n**PivotRange.Daily**  \n**PivotRange.Weekly**  \n**PivotRange.Monthly**\n\n---\n\n* **priorDayHLC**\n* Sets how the prior range High, Low, Close values are calculated. Possible values are:  \n**HLCCalculationMode.CalcFromIntradayData**  \n**HLCCalculationMode.DailyBars**  \n**HLCCalculationMode.UserDefinedValues**\n\n---\n\n* **userDefinedClose**\n* Sets the close for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* **userDefinedHigh**\n* Sets the high for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* **userDefinedLow**\n* Sets the low for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* **width**\n* Sets how long the Pivots lines will be drawn\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current R1 pivot value  \ndouble valueR1 = CamarillaPivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).R1[0];  \nPrint(\"The current Camarilla Pivots' R1 value is \" + valueR1.ToString());  \n// Prints the current S2 pivot value  \ndouble valueS2 = CamarillaPivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).S2[0];  \nPrint(\"The current Camarilla Pivots' S2 pivot value is \" + valueS2.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window.\n\n{% callout type=\"note\" %}\n\n* When using **HLCCalculationMode.DailyBars** it can be expected that a value of 0 is returned when the daily bars have not been loaded yet. Due to the asynchronous nature of this indicator calling daily bars you should only access the pivot values when the indicator has loaded all required Bars objects. To ensure you are accessing accurate values you can use **.[IsValidDataPoint()**](isvaliddatapoint) as a check:\n\n{% /callout %}\n\n```csharp\nif (CamarillaPivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp.IsValidDataPoint(0))  \n{  \n    // Prints the current pivot point value  \n    double valuePp = CamarillaPivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp[0];  \n    Print(\"The current Camarilla Pivots' pivot value is \" + valuePp.ToString());  \n}\n```"
  },
  {
    "_id": "bf402e437c2834137343ff25e9373e8c503a4c04a8931aaf302fb091b5e4a38e",
    "_type": "desktopSdkDoc",
    "title": "CandleStickPattern",
    "pathName": "candlestickpattern",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDetects the specified candle stick pattern.\n\n## Syntax\n\n**CandleStickPattern(ChartPattern pattern, int trendStrength)**  \n**CandleStickPattern(ISeries`<double>` input, ChartPattern pattern, int trendStrength)**\n\nReturns a value indicating if the specified pattern was detected  \n**CandleStickPattern[ChartPattern pattern, int trendStrength](int barsAgo)**  \n**CandleStickPattern[ISeries`<double>` input, ChartPattern pattern, int trendStrength](int barsAgo)**\n\n## Return Value\n\nA **double** value representing pattern found. Returns a value of 1 if the pattern is found; returns a value of 0 if no pattern was found.\n\nAccessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* pattern\n* Possible values are:\n  * **ChartPattern.BearishBeltHold**\n  * **ChartPattern.BearishEngulfing**\n  * **ChartPattern.BearishHarami**\n  * **ChartPattern.BearishHaramiCross**\n  * **ChartPattern.BullishBeltHold**\n  * **ChartPattern.BullishEngulfing**\n  * **ChartPattern.BullishHarami**\n  * **ChartPattern.BullishHaramiCross**\n  * **ChartPattern.DarkCloudCover**\n  * **ChartPattern.Doji**\n  * **ChartPattern.DownsideTasukiGap**\n  * **ChartPattern.EveningStar**\n  * **ChartPattern.FallingThreeMethods**\n  * **ChartPattern.Hammer**\n  * **ChartPattern.HangingMan**\n  * **ChartPattern.InvertedHammer**\n  * **ChartPattern.MorningStart**\n  * **ChartPattern.PiercingLine**\n  * **ChartPattern.RisingThreeMethods**\n  * **ChartPattern.ShootingStar**\n  * **ChartPattern.StickSandwich**\n  * **ChartPattern.ThreeBlackCrows**\n  * **ChartPattern.ThreeWhiteSoldiers**\n  * **ChartPattern.UpsideGapTwoCrows**\n  * **ChartPattern.UpsideTasukiGap**\n\n---\n\n* trendStrength\n* The number of required bars to the left and right of the swing point used to determine trend. A value of zero will exclude the requirement of a trend and only detect based on the candles themselves.\n{% /table %}\n\n## Examples\n\n```csharp\n// Go long if the current bar is a bullish engulfing pattern\nif (CandleStickPattern(ChartPattern.BullishEngulfing, 4)[0] == 1)\n    EnterLong();\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "aae277c226d20d1eecfad40346ce3e9358928589e3178f262f821dadfcd90714",
    "_type": "desktopSdkDoc",
    "title": "Chaikin Money Flow",
    "pathName": "chaikin_money_flow",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe formula for **Chaikin Money Flow** is the cumulative total of the Accumulation/Distribution Values for 21 periods divided by the cumulative total of volume for 21 periods.\n\n... Courtesy of [StockCharts](stockcharts)\n\n## Syntax\n\n**ChaikinMoneyFlow**(int period)  \n\n**ChaikinMoneyFlow**(ISeries`<double>` input, int period)\n\nReturns default value  \n\n**ChaikinMoneyFlow**[int period](int barsAgo)  \n\n**ChaikinMoneyFlow**[ISeries`<double>` input, int period](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period ChaikinMoneyFlow using default price type\ndouble value = ChaikinMoneyFlow[20](0);\nPrint(\"The current **ChaikinMoneyFlow** value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "cafb38167477d103f7cc21c2b1a9c9b1e1b112528d45ef184985dafc12f1db6e",
    "_type": "desktopSdkDoc",
    "title": "Chaikin Oscillator",
    "pathName": "chaikin_oscillator",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Chaikin Oscillator is simply the Moving Average Convergence Divergence indicator (MACD) applied to the Accumulation/Distribution Line. The formula is the difference between the 3-day exponential moving average and the 10-day exponential moving average of the Accumulation/Distribution Line. Just as the MACD-Histogram is an indicator to predict moving average crossovers in MACD, the Chaikin Oscillator is an indicator to predict changes in the Accumulation/Distribution Line.\n\n... Courtesy of [StockCharts](stockcharts)\n\n## Syntax\n\n**ChaikinOscillator**(int fast, int slow)  \n\n**ChaikinOscillator**(ISeries`<double>` input, int fast, int slow)\n\nReturns default value  \n\n**ChaikinOscillator**[int fast, int slow](int barsAgo)  \n\n**ChaikinOscillator**[ISeries`<double>` input, int fast, int slow](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* fast\n* input\n* slow\n\n---\n\n* The number of bars to calculate the fast **EMA**\n* Indicator source data ([?](valid_input_data_for_indicator))\n* The number of bars to calculate the slow **EMA**\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a ChaikinOscillator using default price type\ndouble value = ChaikinOscillator(3, 10)[0];\nPrint(\"The current ChaikinOscillator value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "4b874f5094523ebd01a23aee30bb42380af61903833638f78463a2ddd364a583",
    "_type": "desktopSdkDoc",
    "title": "Chaikin Volatility",
    "pathName": "chaikin_volatility",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Chaikin Volatility Indicator is the difference between two moving averages of a volume weighted accumulation-distribution line. By comparing the spread between a security's high and low prices, it quantifies volatility as a widening of the range between the high and the low price.\n\n## Syntax\n\n**ChaikinVolatility(int mAPeriod, int rOCPeriod)**  \n\n**ChaikinVolatility(ISeries`<double>` input, int mAPeriod, int rOCPeriod)**  \n\nReturns default value  \n\n**ChaikinVolatility**[int mAPeriod, int rOCPeriod](int barsAgo)  \n\n**ChaikinVolatility**[ISeries`<double>` input, int mAPeriod, int rOCPeriod](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* mAPeriod\n* Number of bars used in the moving average calculation\n\n---\n\n* rOCPeriod\n* Number of bars used in the rate of change calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of the 20 period Chaikin Volatility\ndouble value = ChaikinVolatility(20, 20)[0];\nPrint(\"The current Chaikin Volatility value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "a0ba1704d31771fc9c04ff2f58713ce0e23ef60104cd626bf1d8a02467359a93",
    "_type": "desktopSdkDoc",
    "title": "Chande Momentum Oscillator (CMO)",
    "pathName": "chande_momentum_oscillator_cmo",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Chande Momentum Oscillator was developed by Tushar S. Chande and is described in the 1994 book The New Technical Trader by Tushar S. Chande and Stanley Kroll. This indicator is a modified **RSI**. Where the **RSI** divides the upward movement by the net movement (up / (up + down)), the **CMO** divides the total movement by the net movement ((up - down) / (up + down)). Values under -50 indicate oversold conditions while values over 50 indicate overbought conditions.\n\n## Syntax\n\n**CMO(int period)**  \n\n**CMO(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**CMO[int period](int barsAgo)**  \n\n**CMO[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([**?**](valid_input_data_for_indicator.htm))\n\n---\n\n* period\n* The number of bars to include in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period CMO using default price type\ndouble value = CMO(20)[0];\nPrint(\"The current CMO value is \" + value.ToString());\n```\n\n```csharp\n// Prints the current value of a 20 period CMO using high price type\ndouble value = CMO(High, 20)[0];\nPrint(\"The current CMO value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "007d331354e96d46a5b82b89d78e90206c4c58476eb9de4e2352b59ccf5c1253",
    "_type": "desktopSdkDoc",
    "title": "Choppiness Index",
    "pathName": "choppiness_index",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Choppiness Index is designed to determine if the market is choppy (trading sideways) or not choppy (trading within a trend in either direction).\n\n## Syntax\n\n**ChoppinessIndex(int period)**\n\n**ChoppinessIndex(ISeries`<double>` input, int period)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 14 period Choppiness Index\ndouble value = ChoppinessIndex(14)[0];\nPrint(\"The current Choppiness Index value is \" + value.ToString());\n```"
  },
  {
    "_id": "13c127eb661d9a8a49281f7acfce028bec9242c0d4f90fdb58bb66452b620979",
    "_type": "desktopSdkDoc",
    "title": "Commitment Of Traders (COT)",
    "pathName": "commitment_of_traders_cot",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe COT indicator plots weekly data from the Commitment Of Traders report, indicating holdings of different participants in the U.S. futures market.\n\n{% callout type=\"note\" %}\n\nNotes:  \n\n1. Since the underlying COT reports are a weekly figure updated every Friday, it would not be meaningful to run this study outside **Calculate.OnBarClose**.  \n2. Default values of the 5 hard-coded plots are: 1 - Futures Non Commercial Net, 2 - Futures Commercial Net, 3 - Futures Non Reportable Positions Net, 4 - Futures Open Interest, 5 - Futures Total Net.  \n3. To access other reports and report fields, please see the 2nd example below. All fields available could be seen via **Intelliprompt** in the NinjaScript editor.  \n4. In the **CotReportField** enum, \"Pmpu\" represents: \"Producer/merchant/processor/user\" where **CotReportField.PmpuNet** would represent: \"Producer/merchant/processor/user Net\".  \n5. If a **CotReportField** enum is used that is not supported by the **ReportType**, OpenInterest will be seen.  \n{% /callout %}\n\n## Syntax\n\n**COT(int number)**\n\nReturns **Cot1** value  \n\n**COT(int number).Cot1[int barsAgo]**\n\nReturns **Cot2** value  \n\n**COT(int number).Cot2[int barsAgo]**\n\nReturns **Cot3** value  \n\n**COT(int number).Cot3[int barsAgo]**\n\nReturns **Cot4** value  \n\n**COT(int number).Cot4[int barsAgo]**\n\nReturns **Cot5** value  \n\n**COT(int number).Cot5[int barsAgo]**\n\n## Return Value\n\n**double**; Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* number\n* Sets the number of plots enabled\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of COT 4th plot (default Futures Open Interest), the COT(4) would allow us to access the Cot1, Cot2, Cot3 and Cot4 plots, but not Cot5 (since not enabled)  \ndouble value = COT(4).Cot4[0];  \nPrint(\"The current COT Futures Open Interest value is \" + value.ToString());\n\n// Advanced example where two plots in total are enabled (COT(2)). Next, the ReportType and Field are custom set per each plot.  \nelse if (State == State.DataLoaded)  \n{  \n    cot1 = COT(2);  \n    cot1.CotReport1.ReportType = CotReportType.Combined;  \n    cot1.CotReport2.ReportType = CotReportType.Combined;  \n    cot1.CotReport1.Field = CotReportField.OpenInterest;  \n    cot1.CotReport2.Field = CotReportField.TotalNet;  \n}  \n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > **NinjaScript Editor** > **Indicators** within the NinjaTrader Control Center window."
  },
  {
    "_id": "d6a7d4b475fea7b0cf8a04b268b2f95406984e6d55f43dc835176f12d10445f1",
    "_type": "desktopSdkDoc",
    "title": "Commodity Channel Index (CCI)",
    "pathName": "commodity_channel_index_cci",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by Donald Lambert, the Commodity Channel Index (CCI) was designed to identify cyclical turns in commodities. The assumption behind the indicator is that commodities (or stocks or bonds) move in cycles, with highs and lows coming at periodic intervals.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_CCI.html)\n\n## Syntax\n\n**CCI(int period)**  \n\n**CCI(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**CCI[int period](int barsAgo)**  \n\n**CCI[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n\n// Prints the current value of a 20 period CCI using default price type\ndouble value = CCI[20](0);\nPrint(\"The current CCI value is \" + value.ToString());\n\n// Prints the current value of a 20 period CCI using high price type\ndouble value = CCI[High, 20](0);\nPrint(\"The current CCI value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "577bf0c4f4ee4f887ec975d9f5356309244babf9fad24797025228a2092d78fd",
    "_type": "desktopSdkDoc",
    "title": "Correlation",
    "pathName": "correlation",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe correlation indicator will plot the correlation of the data series to a desired instrument. Values close to 1 indicate movement in the same direction. Values close to -1 indicate movement in opposite directions. Values near 0 indicate no correlation.\n\n## Syntax\n\n**Correlation(int period, string correlationSeries)**  \n\n**string correlationSeies(ISeries`<double>` input, int period, string correlationSeies)**\n\n## Return Value\n\n**double**; Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* correlationSeries\n* The data series to compare to\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n\n// The correlation data series must be added to OnStateChange() as this indicator runs off the correlation data series data\nelse if (State == State.Configure)\n{\n   AddDataSeries(\"SPY\");\n}\n\n// Checks the bars in progress and prints the current correlation to the SPY\nif (BarsInProgress == 0)\n{\n   double value = Correlation[20, \"SPY\"](0);\n   Print(\"The current correlation to the SPY is \" + value.ToString());\n}\n```\n\n{% callout type=\"note\" %}\n\nIf the correlation series does not plot during a time the input series plots, a value of zero would plot in the above example. You may consider ignoring zero values.\n\n{% /callout %}\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "24ad0e217c9be8e06a2968eafc44cc490a95171b74b6bb2327e1ff684c6e18e2",
    "_type": "desktopSdkDoc",
    "title": "Current Day OHL",
    "pathName": "current_day_ohl",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe current day (session) open, high and low values.\n\n{% callout type=\"note\" %}\n\nOnly use this indicator on intraday series.\n\n{% /callout %}\n\n## Syntax\n\n**CurrentDayOHL()**  \n\n**CurrentDayOHL(ISeries`<double>` input)**\n\n## Returns current session open value  \n\n**CurrentDayOHL().CurrentOpen[int barsAgo]**  \n\n**CurrentDayOHL(ISeries`<double>` input).CurrentOpen[int barsAgo]**\n\n## Returns current session high value  \n\n**CurrentDayOHL().CurrentHigh[int barsAgo]**  \n\n**CurrentDayOHL(ISeries`<double>` input).CurrentHigh[int barsAgo]**\n\n## Returns current session low value  \n\n**CurrentDayOHL().CurrentLow[int barsAgo]**  \n\n**CurrentDayOHL(ISeries`<double>` input).CurrentLow[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of the session low\ndouble value = CurrentDayOHL().CurrentLow[0];\nPrint(\"The current session low value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "b17ca88bd78f01f4ba473ce1ed73a725db122251209bd2902ac80d4c5407e6d8",
    "_type": "desktopSdkDoc",
    "title": "Darvas",
    "pathName": "darvas",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA trading strategy that was developed in 1956 by former ballroom dancer Nicolas Darvas. Darvas' trading technique involved buying into stocks that were trading at new 52-week highs with correspondingly high volumes.\n\n... Courtesy of [Investopedia](investopedia)\n\n## Syntax\n\n**Darvas()**\n\n**Darvas(ISeries`<double>` input)**\n\nReturns the upper value\n\n**Darvas().Upper[int barsAgo]**\n\n**Darvas(ISeries`<double>` input).Upper[int barsAgo]**\n\nReturns the lower value\n\n**Darvas().Lower[int barsAgo]**\n\n**Darvas(ISeries`<double>` input).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n{% /table %}\n\n## Examples\n\n```csharp // Prints the current upper Darvas value\ndouble value = Darvas().Upper[0];\nPrint(\"The current upper Darvas value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "3180e3ec56a094c00b1ec22457d06e29459f3737a93de5b65c9358097e3fc289",
    "_type": "desktopSdkDoc",
    "title": "Directional Movement (DM)",
    "pathName": "directional_movement_dm",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nSame as the **ADX** indicator with the addition of the +DI and -DI values.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/terms/d/dmi.asp)\n\n## Syntax\n\n**DM(int period)**  \n**DM(ISeries`<double>` input, int period)**\n\nReturns default ADX value  \n\n**DM[int period](int barsAgo)**  \n**DM[ISeries`<double>` input, int period](int barsAgo)**\n\nReturns +DI value  \n\n**DM(int period).DiPlus[int barsAgo]**  \n**DM(ISeries`<double>` input, int period).DiPlus[int barsAgo]**\n\nReturns -DI value  \n\n**DM(int period).DiMinus[int barsAgo]**  \n**DM(ISeries`<double>` input, int period).DiMinus[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period +DI using default price type\ndouble value = DM(20).DiPlus[0];\nPrint(\"The current +DI value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "42ab95005925a67caef52bd1dcb9d66702cabc4066a8aab3639369a6b4434fe3",
    "_type": "desktopSdkDoc",
    "title": "Directional Movement Index (DMI)",
    "pathName": "directional_movement_index_dmi",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nAn indicator developed by J. Welles Wilder for identifying when a definable trend is present in an instrument. That is, the DMI tells whether an instrument is trending or not.\n\n...Courtesy of [FMLabs](http://www.fmlabs.com/reference/default.htm?url=DX.htm)\n\n## Syntax\n\n**DMI(int period)**  \n\n**DMI(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**DMI[int period](int barsAgo)**  \n\n**DMI[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp // Prints the current value of a 20 period DMI using default price type\ndouble value = DMI[20](0);\nPrint(\"The current DMI value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "6416d663de23e740bf1116165ebae93fff2ab09ae2c17510e06a81dd86720bbe",
    "_type": "desktopSdkDoc",
    "title": "Disparity Index",
    "pathName": "disparity_index",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Disparity Index that measures the difference between the price and an exponential moving average. A value greater could suggest bullish momentum, while a value less than zero could suggest bearish momentum.\n\n## Syntax\n\n**DisparityIndex(int period)**\n\n**DisparityIndex(ISeries`<double>` input, int period)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 15 period Disparity Index\ndouble value = DisparityIndex(15)[0];\nPrint(\"The current Disparity Index value is \" + value.ToString());\n```"
  },
  {
    "_id": "ade6b3203a6023905ff12be42a0e3f9229bf93d70a019f93314cd31baa923000",
    "_type": "desktopSdkDoc",
    "title": "Donchian Channel",
    "pathName": "donchian_channel",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA moving average indicator developed by Richard Donchian. It plots the highest high and lowest low over a specific period.\n\n## Syntax\n\n**DonchianChannel(int period)**  \n\n**DonchianChannel(ISeries`<double>` input, int period)**\n\nReturns mean value (middle band) at a specified bar index  \n\n**DonchianChannel[int period](int barsAgo)**  \n\n**DonchianChannel[ISeries`<double>` input, int period](int barsAgo)**\n\nReturns upper band value at a specified bar index  \n\n**DonchianChannel(int period).Upper[int barsAgo]**  \n\n**DonchianChannel(ISeries`<double>` input, int period).Upper[int barsAgo]**\n\nReturns lower band value at a specified bar index  \n\n**DonchianChannel(int period).Lower[int barsAgo]**  \n\n**DonchianChannel(ISeries`<double>` input, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current upper value of a 20 period DonchianChannel using default price type\ndouble value = DonchianChannel(20).Upper[0];\nPrint(\"The current DonchianChannel upper value is \" + value.ToString());\n\n// Note the above call with a barsAgo of 0 includes the current Upper channel in the value. If we want to check for example for a break of this value, storing the last bar's channel value would be needed.\ndouble value = DonchianChannel(20).Upper[1];\nif (High[0] > value)\n Draw.ArrowUp(this, CurrentBar.ToString(), true, 0, Low[0] - TickSize, Brushes.Blue);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "4f55be2eec4d6112975cf57fd19bbd087c00e1ef3c656d5b46e46e252af1df39",
    "_type": "desktopSdkDoc",
    "title": "Double Stochastics",
    "pathName": "double_stochastics",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDouble Stochastics is a variation of the **Stochastics** indicator developed by William Blau.\n\n## Syntax\n\n**DoubleStochastics(int period)**  \n\n**DoubleStochastics(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**DoubleStochastics[int period](int barsAgo)**  \n\n**DoubleStochastics[ISeries`<double>` input, int period](int barsAgo)**\n\nReturns %K value  \n\n**DoubleStochastics(int period).K[int barsAgo]**  \n\n**DoubleStochastics(ISeries`<double>` input, int period).K[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value\ndouble value = DoubleStochastics[10](0);\nPrint(\"The current Double Stochastics value is \" + value.ToString());\n\n\n// Prints the current %K value\ndouble value = DoubleStochastics(10).K[0];\nPrint(\"The current Double Stochastics %K value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "1e094fe3a8d58355c02bd09cc59edeb5ec6e96a327ab27c393077336b08fff39",
    "_type": "desktopSdkDoc",
    "title": "Dynamic Momentum Index (DMIndex)",
    "pathName": "dynamic_momentum_index_dmindex",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nAn indicator used in technical analysis that determines overbought and oversold conditions of a particular asset. This indicator is very similar to the relative strength index (**RSI**). The main difference between the two is that the **RSI** uses a fixed number of time periods (usually 14), while the dynamic momentum index uses different time periods as volatility changes.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/terms/d/dynamicmomentumindex.asp)\n\n## Syntax\n\n**DMIndex**(**int smooth**)  \n**DMIndex**(**ISeries`<double>` input**, **int smooth**)\n\nReturns default value  \n**DMIndex**[**int period**](**int barsAgo**)  \n**DMIndex**[**ISeries`<double>` input**, **int smooth**](**int barsAgo**)\n\n## Return Value\n\n**double**; Accessing this method via an index value [**int barsAgo**] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* smooth\n\n---\n\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n* The number of bars to include in the calculation\n{% /table %}\n\n## Examples\n\n```csharp // Prints the current value of DMIndex using default price type\ndouble value = DMIndex[3](0);\nPrint(\"The current DMIndex value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > **NinjaScript** Editor > Indicators within the **NinjaTrader** Control Center window."
  },
  {
    "_id": "eec2ceb9da20e398dce88e499f57b6f2dd8d87f791d3925f31137946ae1870e7",
    "_type": "desktopSdkDoc",
    "title": "Ease of Movement",
    "pathName": "ease_of_movement",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Ease of Movement indicator was designed to illustrate the relationship between volume and price change. It shows how much volume is required to move prices.\n\nHigh Ease of Movement values occur when prices are moving upward with light volume. Low values occur when prices are moving downward on light volume. If prices are not moving or if heavy volume is required to move prices then the indicator will read near zero. A buy signal is produced when it crosses above zero. A sell signal is produced when the indicator crosses below zero (prices are moving downward more easily).\n\n## Syntax\n\n**EaseOfMovement(int smoothing, int volumeDivisor)**  \n\n**EaseOfMovement(ISeries`<double>` input, int smoothing, int volumeDivisor)**\n\nReturns default value  \n\n**EaseOfMovement[int smoothing, int volumeDivisor](int barsAgo)**  \n\n**EaseOfMovement[ISeries`<double>` input, int smoothing, int volumeDivisor](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* smoothing\n* The number of bars used to smooth the signal\n\n---\n\n* volumeDivisor\n* The value used to calculate the box ratio\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of Ease of Movement using default price type\ndouble value = EaseOfMovement(14, 10000)[0];\nPrint(\"The current Ease of Movement value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "01429afc5b7e01cc4c4da204da144d99b7ae9609d536dfea5965099f5a3a257e",
    "_type": "desktopSdkDoc",
    "title": "IsFalling()",
    "pathName": "isfalling",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Definition\n\nEvaluates a falling condition which is true when the current value is less than the value of 1 bar ago.\n\n## Method Return Value\n\nThis method returns true if a falling condition is present; otherwise, false.\n\n## Syntax  \n\n**IsFalling(ISeries`<double>` series)**\n\n## Parameters\n\n{% table %}\n\n---\n\n* **series**\n* Any **Series<`double`>** type object such as an indicator, Close, High, Low, etc...\n{% /table %}\n\n## Examples\n\n```csharp\nprotected override void OnBarUpdate()\n{\n   // If the 20 period SMA is falling (in downtrend) go short\n   if (IsFalling(SMA(20)))\n       EnterShort();\n}\n```"
  },
  {
    "_id": "ad9f6a422fc94076289b2c7ec3fcebf02808839e62a42abb845e5c7f8e2f3ce9",
    "_type": "desktopSdkDoc",
    "title": "Fibonacci Pivots",
    "pathName": "fibonacci_pivots",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nFibonacci pivots are a price analysis tool that generates potential support and resistance levels by multiplying the prior range against Fibonacci values then adding or subtracting it from the average of the prior high, low, and close.\n\n## Syntax\n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**\n\nReturns pivot point value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).Pp[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).PP[int barsAgo]**\n\nReturns R1 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**\n\nReturns R2 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**\n\nReturns R3 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**\n\nReturns S1 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**\n\nReturns S2 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**\n\nReturns S3 value  \n\n**FibonacciPivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**  \n\n**FibonacciPivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* pivotRangeType\n* Sets the range for the type of pivot calculated. Possible values are:  \n \t* PivotRange.Daily  \n \t* PivotRange.Weekly  \n \t* PivotRange.Monthly\n\n---\n\n* priorDayHLC\n* Sets how the prior range High, Low, Close values are calculated. Possible values are:  \n \t* HLCCalculationMode.CalcFromIntradayData  \n \t* HLCCalculationMode.DailyBars  \n \t* HLCCalculationMode.UserDefinedValues\n\n---\n\n* userDefinedClose\n* Sets the close for Pivots calculations when using HLCCalculationMode.UserDefinedValues.\n\n---\n\n* userDefinedHigh\n* Sets the high for Pivots calculations when using HLCCalculationMode.UserDefinedValues.\n\n---\n\n* userDefinedLow\n* Sets the low for Pivots calculations when using HLCCalculationMode.UserDefinedValues.\n\n---\n\n* width\n* Sets how long the Pivots lines will be drawn\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current pivot point value  \ndouble valuePp = FibonacciPivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).Pp[0];  \nPrint(\"The current Fibonacci Pivots' pivot value is \" + valuePp.ToString());  \n// Prints the current S2 pivot value  \ndouble valueS2 = FibonacciPivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).S2[0];  \nPrint(\"The current Fibonacci Pivots' S2 pivot value is \" + valueS2.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window.\n\n{% callout type=\"note\" %}\n\nTip: When using HLCCalculationMode.DailyBars it can be expected that a value of 0 is returned when the daily bars have not been loaded yet. Due to the asynchronous nature of this indicator calling daily bars you should only access the pivot values when the indicator has loaded all required Bars objects. To ensure you are accessing accurate values you can use **.IsValidDataPoint()** as a check:\n\n{% /callout %}\n\n```csharp\n// Evaluates that this is a valid pivot point value  \nif (FibonacciPivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp.IsValidDataPoint(0))  \n{  \n     // Prints the current pivot point value  \n     double valuePp = FibonacciPivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp[0];  \n     Print(\"The current Pivots' pivot value is \" + valuePp.ToString());  \n}  \n```"
  },
  {
    "_id": "0b92c7bdb2cff0bdc32cb44d0989aca67299dc78e90cca51f0f3087d98744b15",
    "_type": "desktopSdkDoc",
    "title": "Fisher Transform",
    "pathName": "fisher_transform",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nWith distinct turning points and a rapid response time, the Fisher Transform uses the assumption that while prices do not have a normal or Gaussian probability density function (that familiar bell-shaped curve), you can create a nearly Gaussian probability density function by normalizing price (or an indicator such as **RSI**) and applying the Fisher Transform. Use the resulting peak swings to clearly identify price reversals.\n\n## Syntax\n\n**FisherTransform(int period)**  \n**FisherTransform(ISeries`<double>` input, int period)**\n\nReturns default value  \n**FisherTransform[int period](int barsAgo)**  \n**FisherTransform[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 10 period using default (median) price type\ndouble value = FisherTransform(10)[0];\nPrint(\"The current Fisher Transform value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "b683c26b1065845a68b550bfbb7df514c5b2aa8a6e33fd98842ca9bd7fe9b7e8",
    "_type": "desktopSdkDoc",
    "title": "Forecast Oscillator (FOSC)",
    "pathName": "forecast_oscillator_fosc",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Forecast Oscillator calculates the percentage difference between the actual price and the Time Series Forecast (the endpoint of a linear regression line). When the price and the forecast are equal, the Oscillator is zero. When the price is greater than the forecast, the Oscillator is greater than zero. When the price is less than the forecast, the Oscillator is less than zero.\n\n... Courtesy of [FM Labs](fm-labs)\n\n## Syntax\n\n**FOSC(int period)**  \n**FOSC(ISeries`<double>` input, int period)**\n\nReturns default value  \n**FOSC[int period](int barsAgo)**  \n**FOSC[ISeries`<double>` input, int period**](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid-input-data-for-indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Evaluates if the current bar **FOSC** is above zero\nif (FOSC[14](0) > 0)\n   Print(\"FOSC is above zero indicating prices may rise\");\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "dc08bf4324df69d6f88b727c89233a15b8d751aaa9ca8014c52061c52bb42a3c",
    "_type": "desktopSdkDoc",
    "title": "Keltner Channel",
    "pathName": "keltner_channel",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nKeltner Channel indicator is based on volatility using a pair of values placed as an \"envelope\" around the data field.\n\n## Syntax\n\n**KeltnerChannel(double offsetMultiplier, int period)**  \n**KeltnerChannel(ISeries`<double>` input, double offsetMultiplier, int period)**\n\nReturns midline value  \n**KeltnerChannel[double offsetMultiplier, int period](int barsAgo)**  \n**KeltnerChannel[ISeries`<double>` input, double offsetMultiplier, int period](int barsAgo)**\n\nReturns upper band value  \n**KeltnerChannel(double offsetMultiplier, int period).Upper[int barsAgo]**  \n**KeltnerChannel(ISeries`<double>` input, double offsetMultiplier, int period).Upper[int barsAgo]**\n\nReturns lower band value  \n**KeltnerChannel(double offsetMultiplier, int period).Lower[int barsAgo]**  \n**KeltnerChannel(ISeries`<double>` input, double offsetMultiplier, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current upper value of a 20 period KeltnerChannel using default price type\ndouble value = KeltnerChannel(1.5, 20).Upper[0];\nPrint(\"The current KeltnerChannel upper value is \" + value.ToString());\n\n// Prints the current lower value of a 20 period KeltnerChannel using high price type\ndouble value = KeltnerChannel(High, 1.5, 20).Lower[0];\nPrint(\"The current KeltnerChannel lower value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "78b0fb8da41dedac926d3f5efaed3b2bdab55e4046b2d02ab77fb0f81b5a466b",
    "_type": "desktopSdkDoc",
    "title": "KeyReversalDown",
    "pathName": "keyreversaldown",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns a value of 1 when the current close is less than the prior close and the current high has penetrated the highest high of the last n bars.\n\n## Syntax\n\n**KeyReversalDown(int period)**  \n\n**KeyReversalDown(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**KeyReversalDown[int period](int barsAgo)**  \n\n**KeyReversalDown[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// If we get a reversal over the past 10 bars go short\nif (KeyReversalDown(10)[0] == 1)\n    EnterShort();\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "9f40e57636d9e4a15ee684fdce499eb6f5603f41414b7d135b89e44653417166",
    "_type": "desktopSdkDoc",
    "title": "KeyReversalUp",
    "pathName": "keyreversalup",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns a value of 1 when the current close is greater than the prior close and the current low has penetrated the lowest low of the last n bars.\n\n## Syntax\n\n**KeyReversalUp(int period)**  \n\n**KeyReversalUp(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**KeyReversalUp[int period](int barsAgo)**  \n\n**KeyReversalUp[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([valid_input_data_for_indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// If we get a reversal over the past 10 bars go long\nif (KeyReversalUp(10)[0] == 1)\n    EnterLong();\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "2c14f57d11df674847996176eaf7a4298dc46a32656150937373b3eb873e3547",
    "_type": "desktopSdkDoc",
    "title": "Linear Regression",
    "pathName": "linear_regression",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Linear Regression Indicator plots the trend of a security's price over time. That trend is determined by calculating a Linear Regression Trendline using the least squares method. This ensures the minimum distance between the data points and a Linear Regression Trendline.\n\n## Syntax\n\n**LinReg(int period)**  \n\n**LinReg(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**LinReg[int period](int barsAgo)**  \n\n**LinReg[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([valid_input_data_for_indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n{% /table %}\n\n## Examples\n\n```csharp\n\n// Prints the current value of a 20 period LinReg using default price type\ndouble value = LinReg[20](0);\nPrint(\"The current LinReg value is \" + value.ToString());\n\n// Prints the current value of a 20 period LinReg using high price type\ndouble value = LinReg[High, 20](0);\nPrint(\"The current LinReg value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "f5a04f104f27ae1cdca5ff0b7e9cefbaafcc8d0b26e699b10f5a719ea388f626",
    "_type": "desktopSdkDoc",
    "title": "Linear Regression Intercept",
    "pathName": "linear_regression_intercept",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Linear Regression Intercept provides the intercept value of the **Linear Regression** trendline.\n\n## Syntax\n\n**LinRegIntercept(int period)**  \n\n**LinRegIntercept(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**LinRegIntercept[int period](int barsAgo)**  \n\n**LinRegIntercept[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current intercept value of a 20 period LinReg using default price type\ndouble value = LinRegIntercept(20)[0];\nPrint(\"The current intercept value is \" + value.ToString());\n// Prints the current intercept value of a 20 period LinReg using high price type\ndouble value = LinRegIntercept(High, 20)[0];\nPrint(\"The current intercept value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "a9485ce23f1b102558969459ab7dc676238f75aca629cf70bdf629c818ed7e4a",
    "_type": "desktopSdkDoc",
    "title": "Linear Regression Slope",
    "pathName": "linear_regression_slope",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Linear Regression Slope provides the slope value of the **Linear Regression** trendline.\n\n## Syntax\n\n**LinRegSlope(int period)**  \n\n**LinRegSlope(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**LinRegSlope[int period](int barsAgo)**  \n\n**LinRegSlope[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n\n// Prints the current slope value of a 20 period LinReg using default price type\ndouble value = LinRegSlope[20](0);\nPrint(\"The current slope value is \" + value.ToString());\n\n// Prints the current slope value of a 20 period LinReg using high price type\ndouble value = LinRegSlope[High, 20](0);\nPrint(\"The current slope value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "feac99b03f66a5dbbbde00966ab8cf1b399b325ca775f8b431603205b0b634b0",
    "_type": "desktopSdkDoc",
    "title": "MA Envelopes",
    "pathName": "ma_envelopes",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Moving Average Envelope consists of moving averages calculated from the underlying price, shifted up and down by a fixed percentage.\n\n## Syntax\n\n**MAEnvelopes(double envelopePercentage, int mAType, int period)**\n\n**MAEnvelopes(ISeries`<double>` input, double envelopePercentage, int mAType, int period)**\n\n## Returns upper band levels\n\n**MAEnvelopes(double envelopePercentage, int mAType, int period).Upper[int barsAgo]**\n\n**MAEnvelopes(ISeries`<double>` input, double envelopePercentage, int mAType, int period).Upper[int barsAgo]**\n\n## Returns moving average value\n\n**MAEnvelopes(double envelopePercentage, int mAType, int period).Middle[int barsAgo]**\n\n**MAEnvelopes(ISeries`<double>` input, double envelopePercentage, int mAType, int period).Middle[int barsAgo]**\n\n## Returns lower band levels\n\n**MAEnvelopes(double envelopePercentage, int mAType, int period).Lower[int barsAgo]**\n\n**MAEnvelopes(ISeries`<double>` input, double envelopePercentage, int mAType, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* envelopePercentage\n* Percentage around MA that envelopes will be drawn\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* mAType\n* Moving average type:\n \t* 1 = EMA\n \t* 2 = HMA\n \t* 3 = SMA\n \t* 4 = TMA\n \t* 5 = TEMA\n \t* 6 = WMA\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current upper band value of a 20 period SMA envelope using default price type\ndouble upperValue = MAEnvelopes(0.2, 3, 20).Upper[0];\nPrint(\"The current SMA envelope upper value is \" + upperValue.ToString());\n\n// Prints the current lower band value of a 20 period SMA envelope using low price type\ndouble lowerValue = MAEnvelopes(Low, 0.2, 3, 20).Lower[0];\nPrint(\"The current SMA envelope lower value is \" + lowerValue.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "ec85ec6db293acf5004c59104c3174f63a9033e3e88e4afe3be6fabb036b18cc",
    "_type": "desktopSdkDoc",
    "title": "Maximum (MAX)",
    "pathName": "maximum_max",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns the highest value over the specified period.\n\n## Syntax\n\n**MAX(int period)**  \n\n**MAX(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**MAX[int period](int barsAgo)**  \n\n**MAX[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the highest high value over the last 20 periods\ndouble value = MAX(High, 20)[0];\nPrint(\"The current MAX value is \" + value.ToString());\n\n// Note the above call with a barsAgo of 0 includes the current MAX of the input high series in the value. If we want to check for example for a break of this value, storing the last bar's MAX would be needed.\ndouble value = MAX(High, 20)[1];\n\nif (High[0] > value)\n    Draw.ArrowUp(this, CurrentBar.ToString(), true, 0, Low[0] - TickSize, Brushes.Blue);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "a4a5da3951be59b49d895b7fd838255853e3b64168248ea9960dd47e1d9d3525",
    "_type": "desktopSdkDoc",
    "title": "McClellan Oscillator",
    "pathName": "mcclellan_oscillator",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nMcClellan Oscillator is the difference between two exponential moving averages of the NYSE advance decline spread. This indicator requires ADV and DECL index data.\n\n## Syntax\n\n**McClellanOscillator(int fastPeriod, int slowPeriod)**  \n**McClellanOscillator(ISeries`<double>` input, int fastPeriod, int slowPeriod)**\n\n## Return Value\n\n**double**; Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* **fastPeriod**\n* Number of bars used in the fast moving average calculation\n\n---\n\n* **slowPeriod**\n* Number of bars used in the slow moving average calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// An ADV and DECL data series must be added to OnStateChange()\nelse if (State == State.Configure)\n{\n    AddDataSeries(\"^ADV\");\n    AddDataSeries(\"^DECL\");\n}\n\n// Prints the current value of the McClellan Oscillator with a 19 fast period moving average & 39 slow period\ndouble value = McClellanOscillator(19, 39)[0];\nPrint(\"The current McClellan Oscillator value is \" + value.ToString());\n```"
  },
  {
    "_id": "4f558382aa9036f97705c6d1fb24b0e5aa6a2dea27ce60f0c80d98a8ae5eb708",
    "_type": "desktopSdkDoc",
    "title": "Minimum (MIN)",
    "pathName": "minimum_min",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns the lowest value over the specified period.\n\n## Syntax\n\n**MIN(int period)**  \n\n**MIN(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**MIN[int period](int barsAgo)**  \n\n**MIN[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the lowest low value over the last 20 periods\ndouble value = MIN[Low, 20](0);\nPrint(\"The current MIN value is \" + value.ToString());\n// Note the above call with a barsAgo of 0 includes the current MIN of the input low series in the value. If we want to check for example for a break of this value, storing the last bar's MIN would be needed.\ndouble value = MIN[Low, 20](1);\nif (Low[0] < value)\n   Draw.ArrowDown(this, CurrentBar.ToString(), true, 0, High[0] + TickSize, Brushes.Red);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "446be308664e1964b816217ba48334a777837850765f863efbba3c6608da6b90",
    "_type": "desktopSdkDoc",
    "title": "Momentum",
    "pathName": "momentum",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nBy measuring the amount that a security's price has changed over a given time span, the Momentum indicator provides an indication of a market's velocity and to some degree, a measure of the extent to which a trend still holds true. It can also be helpful in spotting likely reversal points.\n\n## Syntax\n\n**Momentum(int period)**  \n\n**Momentum(ISeries`<double>` input, int period)**\n\n**Returns default value**\n\n**Momentum[int period](int barsAgo)**  \n\n**Momentum[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input** | Indicator source data [**?**](valid_input_data_for_indicator)\n* **period** | Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period Momentum using default price type\ndouble value = Momentum[20](0);\nPrint(\"The current Momentum value is \" + value.ToString());\n  \n// Prints the current value of a 20 period Momentum using high price type\ndouble value = Momentum[High, 20](0);\nPrint(\"The current Momentum value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "26c6ff6adb51f8a2a572efd73e62bafc0f901800552adb0cecd6c092ed9c26e6",
    "_type": "desktopSdkDoc",
    "title": "Money Flow Index (MFI)",
    "pathName": "money_flow_index_mfi",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Money Flow Index (MFI) is a momentum indicator that is similar to the Relative Strength Index (RSI) in both interpretation and calculation. However, MFI is a more rigid indicator in that it is volume-weighted, and is therefore a good measure of the strength of money flowing in and out of a security.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_MFI.htm)\n\n## Syntax\n\n**MFI(int period)**  \n\n**MFI(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**MFI[int period](int barsAgo)**  \n\n**MFI[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period MFI using default price type\ndouble value = MFI[20](0);\nPrint(\"The current MFI value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "3b2465cc138dd142dded0750cb29dc5b128c0f7b383c95471d31902eb1ed408d",
    "_type": "desktopSdkDoc",
    "title": "Money Flow Oscillator",
    "pathName": "money_flow_oscillator",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Money Flow Oscillator measures the amount of money flow volume over a specific period. A move into positive territory indicates buying pressure while a move into negative territory indicates selling pressure.\n\n## Syntax\n\n**MoneyFlowOscillator**(int period)\n\n**MoneyFlowOscillator**(**ISeries`<double>`** input, int period)\n\n## Return Value\n\n**double;** Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n\n* Description\n\n---\n\n* input\n\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n\n---\n\n* period\n\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 10 period Money Flow Oscillator\ndouble value = MoneyFlowOscillator(10)[0];\nPrint(\"The current Money Flow Oscillator value is \" + value.ToString());\n```"
  },
  {
    "_id": "50feefdab65bf7662f7fa2a62089398ddd8a03cf66dad1b89a7866135bddb8d6",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Double Exponential (DEMA)",
    "pathName": "moving_average_double_exponential_dema",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Double Exponential Moving Average (DEMA) is a combination of a single exponential moving average and a double exponential moving average. The advantage is that gives a reduced amount of lag time than either of the two separate moving averages alone.\n\n## Syntax\n\n**DEMA(int period)**  \n\n**DEMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**DEMA[int period](int barsAgo)**  \n\n**DEMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period DEMA using default price type**\ndouble value = DEMA(20)[0];\nPrint(\"The current DEMA value is \" + value.ToString());\n// Prints the current value of a 20 period DEMA using high price type**\ndouble value = DEMA(High, 20)[0];\nPrint(\"The current DEMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "b7a07e35021d8135c2a307a14c70f9037869fe33718b60142cf2315db45dd8b5",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Exponential (EMA)",
    "pathName": "moving_average_exponential_ema",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe exponential moving average is but one type of a moving average. In a simple moving average, all price data has an equal weight in the computation of the average with the oldest value removed as each new value is added. In the exponential moving average equation the most recent market action is assigned greater importance as the average is calculated. The oldest pricing data in the exponential moving average is however never removed.\n\n## Syntax\n\n**EMA**(int period)  \n\n**EMA**(**ISeries`<double>`** input, int period)\n\nReturns default value  \n\n**EMA**[int period](int barsAgo)  \n\n**EMA**[**ISeries`<double>`** input, int period](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period EMA using default price type\ndouble value = EMA(20)[0];\nPrint(\"The current EMA value is \" + value.ToString());\n  \n// Prints the current value of a 20 period EMA using high price type\ndouble value = EMA(High, 20)[0];\nPrint(\"The current EMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "8aec484d4308bbc8a7fed825a4fb566718d0cda20bc8f7a538991efb5ba44f98",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Hull (HMA)",
    "pathName": "moving_average_hull_hma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe HMA manages to keep up with rapid changes in price activity whilst having superior smoothing over an SMA of the same period. The HMA employs weighted moving averages and dampens the smoothing effect (and resulting lag) by using the square root of the period instead of the actual period itself. Developed by Alan Hull.\n\n## Syntax\n\n**HMA(int period)**  \n\n**HMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**HMA[int period](int barsAgo)**  \n\n**HMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n\n// Prints the current value of a 20 period HMA using default price type\ndouble value = HMA[20](0);\nPrint(\"The current HMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period HMA using high price type\ndouble value = HMA[High, 20](0);\nPrint(\"The current HMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "e4f0476620f799c1cf13d6f1e8a3f24ee1e08e0bb20875e1510bff72773c70ce",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Kaufman's Adaptive (KAMA)",
    "pathName": "moving_average_kaufmans_adaptive",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by Perry Kaufman, this indicator is an EMA using an Efficiency Ratio to modify the smoothing constant, which ranges from a minimum of Fast Length to a maximum of Slow Length.\n\n## Syntax\n\n**KAMA**(int fast, int period, int slow)  \n**KAMA**(ISeries`<double>` input, int fast, int period, int slow)\n\nReturns default value  \n**KAMA**[int fast, int period, int slow](int barsAgo)  \n**KAMA**[ISeries`<double>` input, int fast, int period, int slow](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **fast**\n* Fast length\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n\n---\n\n* **slow**\n* Slow length\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period KAMA using default price type\ndouble value = KAMA[2, 20, 30](0);\nPrint(\"The current KAMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period KAMA using high price type\ndouble value = KAMA[High, 2, 20, 30](0);\nPrint(\"The current KAMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "b006195d5003568f4f6e4d66378a8da649f253d3dbe80c615621b643d5bb6e4f",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Mesa Adaptive (MAMA)",
    "pathName": "moving_average_mesa_adaptive",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe MESA Adaptive Moving Average (MAMA) adapts to price movement in an entirely new and unique way. The adaptation is based on the rate change of phase as measured by the Hilbert Transform Discriminator. The advantage of this method of adaptation is that it features a fast attack average and a slow decay average so that composite average rapidly ratchets behind price changes and holds the average value until the next ratchet occurs.\n\n## Syntax\n\n**MAMA(double fastLimit, double slowLimit)**  \n**MAMA(ISeries`<double>` input, double fastLimit, double slowLimit)**\n\nReturns MAMA value  \n\n**MAMA[double fastLimit, double slowLimit](int barsAgo)**  \n**MAMA[ISeries`<double>` input, double fastLimit, double slowLimit](int barsAgo)**\n\nReturns Fama (Following Adaptive Moving Average) value  \n\n**MAMA(double fastLimit, double slowLimit).Fama[int barsAgo]**  \n**MAMA(ISeries`<double>` input, double fastLimit, double slowLimit).Fama[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* fastLimit\n* Upper limit of the alpha value\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* slowLimit\n* Lower limit of the alpha value\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period MAMA using default price type\ndouble value = MAMA(0.5, 0.05).Default[0];\nPrint(\"The current MAMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period Fama using high price type\ndouble value = MAMA(High, 0.5, 0.05).Fama[0];\nPrint(\"The current Fama value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "a17d6b799ce88e39978884f1b4490ca69c160e3819b19fd13ec8bac961e4761f",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Simple (SMA)",
    "pathName": "moving_average_simple_sma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Simple Moving Average is calculated by summing the closing prices of the security for a period of time and then dividing this total by the number of time periods. Sometimes called an arithmetic moving average, the SMA is basically the average stock price over time.\n\n## Syntax\n\n**SMA(int period)**  \n\n**SMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**SMA[int period](int barsAgo)**  \n\n**SMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period SMA using default price type\ndouble value = SMA[20](0);\nPrint(\"The current SMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period SMA using high price type**\ndouble value = SMA[High, 20](0);\nPrint(\"The current SMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "3ebc9fe752405f77bd6ad40c0c52b6e6e86d4d700571d35b74861dafd7b94c21",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - T3 (T3)",
    "pathName": "moving_average_t3_t3",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe T3 is a type of moving average, or smoothing function. It is based on the DEMA. The T3 takes the DEMA calculation and adds a vfactor which is between zero and 1. The resultant function is called the GD, or Generalized DEMA. A GD with vfactor of 1 is the same as the DEMA. A GD with a vfactor of zero is the same as an Exponential Moving Average. The T3 typically uses a vfactor of 0.7.\n\n... Courtesy of [FMLabs](http://www.fmlabs.com/reference/default.htm?url=T3.htm)\n\n## Syntax\n\n**T3(int period, int tCount, double vFactor)**\n\n**T3(ISeries`<double>` input, int period, int tCount, double vFactor)**\n\nReturns default value\n\n**T3[int period, int tCount, double vFactor](int barsAgo)**\n\n**T3[ISeries`<double>` input, int period, int tCount, double vFactor](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* tCount\n* Number of smooth iterations\n\n---\n\n* vFactor\n* A multiplier fudge factor\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period T3 using default price type\ndouble value = T3(20, 3, 0.7)[0];\nPrint(\"The current T3 value is \" + value.ToString());\n\n// Prints the current value of a 20 period T3 using high price type\ndouble value = T3(High, 20, 3, 0.7)[0];\nPrint(\"The current T3 value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "fc32be6ff75880c7d6abd34e9a7874eb6ba26c9065b9741ad1846a9d162197fd",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Triangular (TMA)",
    "pathName": "moving_average_triangular_tma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Triangular Moving Average is a form of **Weighted Moving Average** wherein the weights are assigned in a triangular pattern. For example, the weights for a 7 period Triangular Moving Average would be 1, 2, 3, 4, 3, 2, 1. This gives more weight to the middle of the time series and less weight to the oldest and newest data.\n\n## Syntax\n\n**TMA(int period)**  \n\n**TMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**TMA[int period](int barsAgo)**  \n\n**TMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([**valid input data for indicator**](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period TMA using default price type\ndouble value = TMA(20)[0];\nPrint(\"The current TMA value is \" + value.ToString());\n  \n// Prints the current value of a 20 period TMA using high price type\ndouble value = TMA(High, 20)[0];\nPrint(\"The current TMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "d5c56e8faef7d1aa85c62bf32839cf0a913f0332f1023dccf0be1ece0cf13157",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Triple Exponential (TRIX)",
    "pathName": "moving_average_triple_exponential_trix",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe triple exponential average (TRIX) indicator is an oscillator used to identify oversold and overbought markets, and it can also be used as a momentum indicator.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/articles/technical/02/092402.asp)\n\n## Syntax\n\n**TRIX(int period, int signalPeriod)**  \n\n**TRIX(ISeries`<double>` input, int period, int signalPeriod)**\n\nReturns trix value  \n\n**TRIX[int period, int signalPeriod](int barsAgo)**  \n\n**TRIX[ISeries`<double>` input, int period, int signalPeriod](int barsAgo)**\n\nReturns signal value  \n\n**TRIX(int period, int signalPeriod).Signal[int barsAgo]**  \n\n**TRIX(ISeries`<double>` input, int period, int signalPeriod).Signal[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* signalPeriod\n* Period for signal line\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period TRIX using default price type\ndouble value = TRIX(20, 3).Default[0];\nPrint(\"The current TRIX value is \" + value.ToString());\n\n// Prints the current signal value of a 20 period TRIX using high price type\ndouble value = TRIX(High, 20, 3).Signal[0];\nPrint(\"The current TRIX signal value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "3c49484acdbdbe5752bcda21db7e2f3c69bc443c169b5ca439bc03d115f64a72",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Triple Exponential (TEMA)",
    "pathName": "moving_average_triple_exponential_tema",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe TEMA is a smoothing indicator. It was developed by Patrick Mulloy and is described in his article in the January, 1994 issue of Technical Analysis of Stocks and Commodities magazine.\n\n## Syntax\n\n**TEMA(int period)**  \n\n**TEMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**TEMA[int period](int barsAgo)**  \n\n**TEMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period TEMA using default price type\ndouble value = TEMA(20)[0];\nPrint(\"The current TEMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period TEMA using high price type\ndouble value = TEMA(High, 20)[0];\nPrint(\"The current TEMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "595792efd0145108083bcaaa64583f3723f745682faa4ac46404b6cd6171be6f",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Variable (VMA)",
    "pathName": "moving_average_variable_vma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA Variable Moving Average is an exponential moving average that automatically adjusts its smoothing percentage based on market volatility. Giving more weight to the current data increases sensitivity thus making it a better signal indicator for short and long term markets.\n\n## Syntax\n\n**VMA**(int period, int volatilityPeriod)  \n**VMA**(**ISeries`<double>`** input, int period, int volatilityPeriod)\n\nReturns default value  \n**VMA**[int period, int volatilityPeriod](int barsAgo)  \n**VMA**[**ISeries`<double>`** input, int period, int volatilityPeriod](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* volatilityPeriod\n* The number of bars used to calculate the [CMO](chande_momentum_oscillator_cmo) based volatility index\n{% /table %}\n\n## Examples\n\n```csharp\n// OnBarUpdate method of a strategy\nprotected override void OnBarUpdate()\n{\n   // Print out the VMA value of lows 3 bars ago for fun\n   double value = VMA(Low, 9, 9)[3];\n   Print(\"The value is \" + value.ToString());\n \n   // Go long if price closes above the current VMA value\n   if (Close[0] > VMA(9, 9)[0])\n       EnterLong();\n}\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "6b3ec04c25597086c253f532f4c567fa18584ac4ca37025788a0b95464975594",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Volume Weighted (VWMA)",
    "pathName": "moving_average_volume_weighted_vwma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Volume Weighted Moving Average is a weighted moving average that uses the volume as the weighting factor, so that higher volume days have more weight. It is a non-cumulative moving average, in that only data within the time period is used in the calculation.\n\n## Syntax\n\n**VWMA(int period)**  \n\n**VWMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**VWMA[int period](int barsAgo)**  \n\n**VWMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// OnBarUpdate method\nprotected override void OnBarUpdate()\n{\n   // Evaluates for a VWMA cross over to the long side\n   if (CrossAbove(VWMA(14), VWMA(40), 1))\n       Print(\"We have a moving average cross over long\");\n\n   // Prints the current 14 period VWMA of high prices to the output window\n   double value = VWMA[High, 14](0);\n   Print(\"The current VWMA value of high prices is \" + value.ToString());\n}\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "55019117077878128cff80cbe78214b91de68c9ac3e7240d38b4d3cfc425817a",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Weighted (WMA)",
    "pathName": "moving_average_weighted_wma",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Weighted Moving Average gives the latest price more weight than prior prices. Each prior price in the period gets progressively less weight as they become older.\n\n## Syntax\n\n**WMA(int period)**  \n\n**WMA(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**WMA[int period](int barsAgo)**  \n\n**WMA[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period WMA using default price type\ndouble value = WMA[20](0);\nPrint(\"The current WMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period WMA using high price type\ndouble value = WMA[High, 20](0);\nPrint(\"The current WMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "8a8111f9ca78af6665493967f41ce66dc27ff7c8becb43e05307911c2aaaeba9",
    "_type": "desktopSdkDoc",
    "title": "Moving Average - Zero Lag Exponential (ZLEMA)",
    "pathName": "moving_average_zero_lag_exponential_zlema",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Zero-Lag Exponential Moving Average is a variation on the Exponential Moving Average. The Zero-Lag keeps the benefit of the heavier weighting of recent values, but attempts to remove lag by subtracting older data to minimize the cumulative effect.\n\n... Courtesy of [FMLabs](http://www.fmlabs.com/reference/default.htm?url=ZeroLagExpMA.htm)\n\n## Syntax\n\n**ZLEMA**(int period)  \n\n**ZLEMA**(ISeries`<double>` input, int period)\n\nReturns default value  \n\n**ZLEMA**[int period](int barsAgo)  \n\n**ZLEMA**[ISeries`<double>` input, int period](int barsAgo)\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period ZLEMA using default price type\ndouble value = ZLEMA[20](0);\nPrint(\"The current SMA value is \" + value.ToString());\n\n// Prints the current value of a 20 period ZLEMA using high price type\ndouble value = ZLEMA[High, 20](0);\nPrint(\"The current ZLEMA value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "97f4fcf5686dc562d5569bd8aba5113b5ea71015e68651d63cd093edc79aff24",
    "_type": "desktopSdkDoc",
    "title": "Moving Average Convergence-Divergence (MACD)",
    "pathName": "moving_average_convergence_divergence_macd",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nMACD uses moving averages, which are lagging indicators, to include some trend-following characteristics. These lagging indicators are turned into a momentum oscillator by subtracting the longer moving average from the shorter moving average.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_MACD1.html)\n\n## Syntax\n\n**MACD(int fast, int slow, int smooth)**  \n**MACD(ISeries`<double>` input, int fast, int slow, int smooth)**\n\nReturns MACD value  \n**MACD[int fast, int slow, int smooth](int barsAgo)**  \n**MACD[ISeries`<double>` input, int fast, int slow, int smooth](int barsAgo)**\n\nReturns average value  \n**MACD(int fast, int slow, int smooth).Avg[int barsAgo]**  \n**MACD(ISeries`<double>` input, int fast, int slow, int smooth).Avg[int barsAgo]**\n\nReturns difference value  \n**MACD(int fast, int slow, int smooth).Diff[int barsAgo]**  \n**MACD(ISeries`<double>` input, int fast, int slow, int smooth).Diff[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* fast\n* The number of bars to calculate the fast [**EMA**](moving_average_-_exponential_e)\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* slow\n* The numbers of bars to calculate the slow EMA\n\n---\n\n* smooth\n* The number of bars to calculate the EMA signal line\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current MACD value\ndouble value = MACD(12, 26, 9)[0];\nPrint(\"The current MACD value is \" + value.ToString());\n\n// Prints the current MACD average value\ndouble value = MACD(12, 26, 9).Avg[0];\nPrint(\"The current MACD average value is \" + value.ToString());\n\n// Prints the current MACD difference value\ndouble value = MACD(12, 26, 9).Diff[0];\nPrint(\"The current MACD difference value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > **NinjaScript** Editor > Indicators within the **NinjaTrader** Control Center window."
  },
  {
    "_id": "802f04b3a8c08d22290282875107e5bc53658fa36c690bc6ba1384e1724b9fe3",
    "_type": "desktopSdkDoc",
    "title": "Moving Average Ribbon",
    "pathName": "moving_average_ribbon",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Moving Average Ribbon is a series of incrementing moving averages.\n\n## Syntax\n\n**MovingAverageribbon(RibbonMAType movingAverage, int basePeriod, int incrementalPeriod)**\n\n**MovingAverageribbon(ISeries`<double>` input, RibbonMAType movingAverage, int basePeriod, int incrementalPeriod)**\n\n**Returns the MovingAverage1 value (Replace the 1 with the desired moving average you want the value to return)**\n\n**MovingAverageribbon(RibbonMAType movingAverage, int basePeriod, int incrementalPeriod).MovingAverage1[int barsAgo]**\n\n**MovingAverageribbon(ISeries`<double>` input, RibbonMAType movingAverage, int basePeriod, int incrementalPeriod).MovingAverage1[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* RibbonMAType\n* basePeriod\n* incrementalPeriod\n\n---\n\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n* Moving average to use for calculations\n* Number of bars used in the calculation for the fastest moving average\n* Number of bars to increase for the calculation in each additional moving average\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of the 3rd moving average\ndouble value = MovingAverageRibbon(RibbonMAType.Exponential, 10, 10).MovingAverage3[0];\nPrint(\"The current 3rd moving average's value is \" + value.ToString());\n```"
  },
  {
    "_id": "57c55586d8a0b845d9652b6c21d6fc503b4411f9e022f1e65feb69bf1636e132",
    "_type": "desktopSdkDoc",
    "title": "Net Change Display",
    "pathName": "net_change_display",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDisplays net change on the chart.\n\n## Syntax\n\n**NetChangeDisplay(PerformanceUnit, NetChangePosition location)**\n\n**NetChangeDisplay(ISeries`<double>` input, PerformanceUnit, NetChangePosition location)**\n\n## Return Value\n\ndouble\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **PerformanceUnit**\n* Format of the calculation of net change\n\n---\n\n* **NetChangePosition**\n* Location to display net change on the chart\n{% /table %}\n\n## Examples\n\n```csharp\n\n// Runs on realtime since there is no historical data for this indicator\nif (State == State.Historical)\nreturn;\nelse if (State >= State.Realtime)\n{\n// Prints the current tick value of the net change\nvar ncd = NetChangeDisplay(PerformanceUnit.Ticks, NetChangePosition.BottomRight);\nPrint(\"The current Net Change value is \" + ncd.NetChange);\n}\n```\n\n{% callout type=\"note\" %}\n\nThis indicator only plots real-time. Historical values will print as 0.\n\n{% /callout %}"
  },
  {
    "_id": "41c75c6ddd963ff3edd8ac155c2b0879460084fc4469c23798519a4dce4af409",
    "_type": "desktopSdkDoc",
    "title": "n Bars Down",
    "pathName": "n_bars_down",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nEvaluates for n number of consecutive lower closes. Returns a value of 1 when the condition is true or 0 when false.\n\n## Syntax\n\n**NBarsDown(int barCount, bool barDown, bool lowerHigh, bool lowerLow)**  \n\n**NBarsDown(ISeries`<double>` input, int barCount, bool barDown, bool lowerHigh, bool lowerLow)**\n\nReturns default value  \n\n**NBarsDown[int barCount, bool barDown, bool lowerHigh, bool lowerLow](int barsAgo)**  \n\n**NBarsDown[ISeries`<double>` input, bool barCount, int barDown, bool lowerHigh, bool lowerLow](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* barCount\n* The number of required consecutive lower closes\n\n---\n\n* barDown\n* Each bar's open must be less than the close; true or false\n\n---\n\n* lowerHigh\n* Consecutive lower highs required; true or false\n\n---\n\n* lowerLow\n* Consecutive lower lows required; true or false\n{% /table %}\n\n## Examples\n\n```csharp\n// OnBarUpdate method\nprotected override void OnBarUpdate()\n{\n   // Evaluates if we have 3 consecutive lower closes\n   double value = NBarsDown(3, true, true, true)[0];\n \n   if (value == 1)\n       Print(\"We have three consecutive lower closes\");\n}\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "f4967f139e267db59b47da7a9347bdc7ed264c7f6809e154b288275371fbaa50",
    "_type": "desktopSdkDoc",
    "title": "n Bars Up",
    "pathName": "n_bars_up",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nEvaluates for n number of consecutive higher closes. Returns a value of 1 when the condition is true or 0 when false.\n\n## Syntax\n\n**NBarsUp(int barCount, bool barUp, bool higherHigh, bool higherLow)**  \n\n**NBarsUp(ISeries`<double>` input, int barCount, bool barUp, bool higherHigh, bool higherLow)**\n\nReturns default value  \n\n**NBarsUp[int barCount, bool barUp, bool higherHigh, bool higherLow](int barsAgo)**  \n\n**NBarsUp[ISeries`<double>` input, int barCount, bool barUp, bool higherHigh, bool higherLow](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **barCount**\n* The number of required consecutive higher closes\n\n---\n\n* **barUp**\n* Each bar's close must be higher than the open; true or false\n\n---\n\n* **higherHigh**\n* Consecutive higher highs required; true or false\n\n---\n\n* **higherLow**\n* Consecutive higher lows required; true or false\n{% /table %}\n\n## Examples\n\n```csharp\n// OnBarUpdate method\nprotected override void OnBarUpdate()\n{\n   // Evaluates if we have 3 consecutive higher closes\n   double value = NBarsUp(3, true, true, true)[0];\n \n   if (value == 1)\n       Print(\"We have three consecutive higher closes\");\n}\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "fc0ccc3e1a1be75ec0b1d8aef28d7f839d55e9404c8abd62f4465b5bf48665e4",
    "_type": "desktopSdkDoc",
    "title": "On Balance Volume (OBV)",
    "pathName": "on_balance_volume_obv",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nOBV is a simple indicator that adds a period's volume when the close is up and subtracts the period's volume when the close is down. A cumulative total of the volume additions and subtractions forms the OBV line. This line can then be compared with the price chart of the underlying security to look for divergences or confirmation.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic-obv.htm)\n\n## Syntax\n\n**OBV()**  \n\n**OBV(ISeries`<double>` input)**\n\nReturns default value  \n\n**OBV()[int barsAgo]**  \n\n**OBV[ISeries`<double>` input](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of OBV\ndouble value = OBV()[0];\nPrint(\"The current OBV value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "9ac74fb8a474cacb5c0ad7ff52c5e54425038fa0e79496bb86904447be04ec64",
    "_type": "desktopSdkDoc",
    "title": "Order Flow Cumulative Delta",
    "pathName": "order_flow_cumulative_delta",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nAn indicator that accumulates the volume of orders filled at bid and ask prices or up and down ticks throughout the session and compares them to determine buy/sell pressure.\n\n## Syntax\n\n**OrderFlowCumulativeDelta(CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter)**\n\n**OrderFlowCumulativeDelta(ISeries`<double>` input, CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter)**\n\n## Returns Open value\n\n**OrderFlowCumulativeDelta(CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaOpen[int barsAgo]**\n\n**OrderFlowCumulativeDelta(ISeries`<double>` input, CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaOpen[int barsAgo]**\n\n## Returns High value\n\n**OrderFlowCumulativeDelta(CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaHigh[int barsAgo]**\n\n**OrderFlowCumulativeDelta(ISeries`<double>` input, CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaHigh[int barsAgo]**\n\n## Returns Low value\n\n**OrderFlowCumulativeDelta(CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaLow[int barsAgo]**\n\n**OrderFlowCumulativeDelta(ISeries`<double>` input, CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaLow[int barsAgo]**\n\n## Returns Close value\n\n**OrderFlowCumulativeDelta(CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaClose[int barsAgo]**\n\n**OrderFlowCumulativeDelta(ISeries`<double>` input, CumulativeDeltaType deltaType, CumulativeDeltaPeriod period, int sizeFilter).DeltaClose[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* deltaType\n* The type of data to delta calculates on:\n  * BidAsk\n  * UpDownTick\n\n---\n\n* period\n* The period in which the delta accumulates:\n  * Session\n  * Bar\n\n---\n\n* sizeFilter\n* Input to exclude volume less than the selected value\n{% /table %}\n\n## Examples\n\n```csharp\n// Calling the OrderFlowCumulativeDelta() method directly\n// A 1 tick data series must be added to the OnStateChange() as this indicator runs off of tick data\nelse if (State == State.Configure)\n{\n   AddDataSeries(Data.BarsPeriodType.Tick, 1);\n}\n\n// OnBarUpdate() logic\nif (BarsInProgress == 0)\n{\n    // Print the close of the cumulative delta bar with a delta type of Bid Ask and with a Session period\n    Print(\"Delta Close: \" + OrderFlowCumulativeDelta(BarsArray[0], CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0).DeltaClose[0]);\n}\nelse if (BarsInProgress == 1)\n{\n    // We have to update the secondary series of the cached indicator to make sure the values we get in BarsInProgress == 0 are in sync\n    OrderFlowCumulativeDelta(BarsArray[0], CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0).Update(OrderFlowCumulativeDelta(BarsArray[0], CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0).BarsArray[1].Count - 1, 1);\n}\n```\n\n```csharp\n// Calling the OrderFlowCumulativeDelta() method by reference\n\n// A 1 tick data series must be added to OnStateChange() as this indicator runs off of tick data\nelse if (State == State.Configure)\n{\n    AddDataSeries(Data.BarsPeriodType.Tick, 1);\n}\nelse if (State == State.DataLoaded)\n{\n    // Instantiate the indicator\n    cumulativeDelta = OrderFlowCumulativeDelta(CumulativeDeltaType.BidAsk, CumulativeDeltaPeriod.Session, 0);\n}\n\nif (BarsInProgress == 0)\n{\n    // Print the close of the cumulative delta bar with a delta type of Bid Ask and with a Session period\n    Print(\"Delta Close: \" + cumulativeDelta.DeltaClose[0]);\n}\nelse if (BarsInProgress == 1)\n{\n    // We have to update the secondary series of the hosted indicator to make sure the values we get in BarsInProgress == 0 are in sync\n    cumulativeDelta.Update(cumulativeDelta.BarsArray[1].Count - 1, 1);\n}\n```"
  },
  {
    "_id": "4d722cd83e1f7ddfbe05d59ff18280f906d68443b699527c3d206f124f00e05c",
    "_type": "desktopSdkDoc",
    "title": "Order Flow Volumetric Bars",
    "pathName": "order_flow_volumetric_bars",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nNinjaTrader Order Flow Volumetric bars provide a detailed ‘x-ray’ view into each price bar’s aggressive buying and selling activity. This technique primarily attempts to answer the question which side was the most aggressive at each price level. This is done by calculating the delta (greek for difference) between buying and selling volume.\n\nMany of the NinjaTrader Order Flow Volumetric Bar and Bar Statistics values could be accessed from your custom NinjaScript objects further leveraging the power of these analysis techniques.\n\n## Methods and Properties the VolumetricBarsType exposes\n\n{% table %}\n\n* Parameter\n\n* Description\n\n---\n\n* BarDelta\n\n* Gets a long value with the total bar's delta\n\n---\n\n* CumulativeDelta\n\n* Gets a long value with the cumulative delta (Note: the accumulation is reset at the session break)\n\n---\n\n* DeltaSh\n\n* The delta since last time price touched the high of the bar, usually negative\n\n---\n\n* DeltaSl\n\n* The delta since last time price touched the low of the bar, usually positive.\n\n---\n\n* GetAskVolumeForPrice(double price)\n\n* Gets the ask volume (long value) for the passed in price\n\n---\n\n* GetBidVolumeForPrice(double price)\n\n* Gets the sell volume (long value) for the passed in price\n\n---\n\n* GetDeltaForPrice(double price)\n\n* Gets the horizontal delta (long value) for the passed in price\n\n---\n\n* GetDeltaPercent()\n\n* Gets A double value with the delta % of volume for the bar\n\n---\n\n* GetMaximumPositiveDelta()\n\n* Gets the highest positive delta (long value) for the bar (if there is no positive delta in the bar, it will get the lowest negative delta)\n\n---\n\n* GetMaximumNegativeDelta()\n\n* Gets the highest negative delta (long value) for the bar (if there is no negative delta in the bar, it will get the lowest positive delta)\n\n---\n\n* GetMaximumVolume(bool? askVolume, out double price)\n\n* Gets the highest Ask, Bid or combined volume (long value) for the bar and returns the price at which it occurred.\n\n* pass in true for getting the highest Ask volume\n\n* pass in false for getting the highest Bid volume\n\n* pass in null for getting the highest combined volume\n\n* For scenarios where Ticks per level is greater than 1, this method will return the lowest price - with Ticks per level known, the remaining prices in the result cell could be custom calculated if desired.\n\n---\n\n* GetTotalVolumeForPrice(double price)\n\n* Gets the total volume (long value) for the passed in price\n\n---\n\n* MaxSeenDelta\n\n* Gets the highest delta (long value) seen intrabar\n\n---\n\n* MinSeenDelta\n\n* Gets the lowest delta (long value) seen intrabar\n\n---\n\n* TotalBuyingVolume\n\n* Gets the total buying volume (long value) for the bar\n\n---\n\n* TotalSellingVolume\n\n* Gets the total selling volume (long value) for the bar\n\n---\n\n* Trades\n\n* Gets to total number of trades (long value) for the bar\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\nprotected override void OnBarUpdate()\n{\n    if (Bars == null)\n        return;\n\n    // This sample assumes the Volumetric series is the primary DataSeries on the chart, if you would want to add a Volumetric series to a \n    // script, you could call AddVolumetric() in State.Configure and then for example use\n    // NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType barsType = BarsArray[1].BarsType as \n    // NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType;\n\n    NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType barsType = Bars.BarsSeries.BarsType as \n        NinjaTrader.NinjaScript.BarsTypes.VolumetricBarsType;\n\n    if (barsType == null)\n        return;\n\n    try\n    {\n        double price;\n        Print(\"=========================================================================\");\n        Print(\"Bar: \" + CurrentBar);\n        Print(\"Trades: \" + barsType.Volumes[CurrentBar].Trades);\n        Print(\"Total Volume: \" + barsType.Volumes[CurrentBar].TotalVolume);\n        Print(\"Total Buying Volume: \" + barsType.Volumes[CurrentBar].TotalBuyingVolume);\n        Print(\"Total Selling Volume: \" + barsType.Volumes[CurrentBar].TotalSellingVolume);\n        Print(\"Delta for bar: \" + barsType.Volumes[CurrentBar].BarDelta);\n        Print(\"Delta for bar (%): \" + barsType.Volumes[CurrentBar].GetDeltaPercent());\n        Print(\"Delta for Close: \" + barsType.Volumes[CurrentBar].GetDeltaForPrice(Close[0]));\n        Print(\"Ask for Close: \" + barsType.Volumes[CurrentBar].GetAskVolumeForPrice(Close[0]));\n        Print(\"Bid for Close: \" + barsType.Volumes[CurrentBar].GetBidVolumeForPrice(Close[0]));\n        Print(\"Volume for Close: \" + barsType.Volumes[CurrentBar].GetTotalVolumeForPrice(Close[0]));\n        Print(\"Maximum Ask: \" + barsType.Volumes[CurrentBar].GetMaximumVolume(true, out price) + \" at price: \" + price);\n        Print(\"Maximum Bid: \" + barsType.Volumes[CurrentBar].GetMaximumVolume(false, out price) + \" at price: \" + price);\n        Print(\"Maximum Combined: \" + barsType.Volumes[CurrentBar].GetMaximumVolume(null, out price) + \" at price: \" + price);\n        Print(\"Maximum Positive Delta: \" + barsType.Volumes[CurrentBar].GetMaximumPositiveDelta());\n        Print(\"Maximum Negative Delta: \" + barsType.Volumes[CurrentBar].GetMaximumNegativeDelta());\n        Print(\"Max seen delta (bar): \" + barsType.Volumes[CurrentBar].MaxSeenDelta);\n        Print(\"Min seen delta (bar): \" + barsType.Volumes[CurrentBar].MinSeenDelta);\n        Print(\"Cumulative delta (bar): \" + barsType.Volumes[CurrentBar].CumulativeDelta);\n        Print(\"Delta Since High (bar): \" + barsType.Volumes[CurrentBar].DeltaSh);\n        Print(\"Delta Since Low (bar): \" + barsType.Volumes[CurrentBar].DeltaSl);\n    }\n    catch{}\n}\n```\n\n{% callout type=\"note\" %}\n\nPlease note in the example above a **CurrentBar** reference is used as index, and not a BarsAgo reference.\n\n{% /callout %}"
  },
  {
    "_id": "bf0831ba06aa9c943b3fa27147571974b41f61e335a3497f5e05bc80056f246b",
    "_type": "desktopSdkDoc",
    "title": "Order Flow VWAP",
    "pathName": "order_flow_vwap",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nVolume Weighted Average Price. A total of the dollars traded for every transaction (price multiplied by number of shares traded) and then divided by the total shares traded for the day. Also included are standard deviation bands.\n\n## Syntax\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier)**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier)**\n\nReturns the VWAP value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).VWAP[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).VWAP[int barsAgo]**\n\nReturns the StdDev1Upper value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev1Upper[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev1Upper[int barsAgo]**\n\nReturns the StdDev1Lower value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev1Lower[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev1Lower[int barsAgo]**\n\nReturns the StdDev2Upper value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev2Upper[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev2Upper[int barsAgo]**\n\nReturns the StdDev2Lower value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev2Lower[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev2Lower[int barsAgo]**\n\nReturns the StdDev3Upper value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev3Upper[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev3Upper[int barsAgo]**\n\nReturns the StdDev3Lower value\n\n**OrderFlowVWAP(VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev3Lower[int barsAgo]**\n\n**OrderFlowVWAP(ISeries`<double>` input, VWAPResolution resolution, TradingHours tradingHoursInstance, VWAPStandardDeviations numStandardDeviations, double sD1Multiplier, double sD2Multiplier, double sD3Multiplier).StdDev3Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* resolution\n* The data the indicator will run off of: Standard, Tick\n\n---\n\n* tradingHoursInstance\n* The trading hour template that will indicate when the VWAP resets\n\n---\n\n* numStandardDeviations\n* The number of standard deviations of the VWAP\n\n---\n\n* sD1Multiplier\n* The multiplier for the first standard deviation\n\n---\n\n* sD2Multiplier\n* The multiplier for the second standard deviation\n\n---\n\n* sD3Multiplier\n* The multiplier for the third standard deviation\n{% /table %}\n\n## Examples\n\n```csharp\n// A 1 tick data series must be added to the OnStateChange() if using a Tick Resolution (our second example call below in OnBarUpdate())\nelse if (State == State.Configure)\n{\n  AddDataSeries(Data.BarsPeriodType.Tick, 1);\n}\n  \n// OnBarUpdate() logic\nif (BarsInProgress == 0)\n{\n  // Prints the VWAP value using a standard resolution off of RTH trading hours\n  double VWAPValue = OrderFlowVWAP(VWAPResolution.Standard, TradingHours.String2TradingHours(\"CME US Index Futures RTH\"), VWAPStandardDeviations.Three, 1, 2, 3).VWAP[0];\n  Print(\"The current VWAP with a standard resolution on CME US Index Futures RTH is \" + VWAPValue.ToString());\n  \n// Prints the first upper standard deviation value using a tick resolution off of trading hours of the Data Series\n  double VWAPStdDevUp1 = OrderFlowVWAP(VWAPResolution.Tick, Bars.TradingHours, VWAPStandardDeviations.Three, 1, 2, 3).StdDev1Upper[0];\n  Print(\"The current VWAP with a tick resolution on \" + Bars.TradingHours.ToString() + \" is \" + VWAPStdDevUp1.ToString());\n}\nelse if (BarsInProgress == 1)\n{\n  // We have to update the secondary tick series of the cached indicator using Tick Resolution to make sure the values we get in BarsInProgress == 0 are in sync\n  OrderFlowVWAP(BarsArray[0], VWAPResolution.Tick, BarsArray[0].TradingHours, VWAPStandardDeviations.Three, 1, 2, 3).Update(OrderFlowVWAP(BarsArray[0], VWAPResolution.Tick, BarsArray[0].TradingHours, VWAPStandardDeviations.Three, 1, 2, 3).BarsArray[1].Count - 1, 1);\n}\n```\n\n{% callout type=\"note\" }\n\n1. Referencing multiple **OrderFlowVWAP**'s with different ResetInterval’s in a single NinjaScript Indicator / Strategy is not supported by default. Please contact [platformsupport@ninjatrader.com](mailto:platformsupport@ninjatrader.com) for a workaround.\n2. Referencing **OrderFlowVWAP** in a NinjaScript indicator or strategy which runs on either **Calcuate.OnEachTick** or **.OnPriceChange**, historical data is needed for accurate calculations.\n{% /table %}"
  },
  {
    "_id": "fc6a5f4bcf016b84cc006fd6c5400f24bb1324c7b89d9af9c8588d88de0658c8",
    "_type": "desktopSdkDoc",
    "title": "Parabolic SAR",
    "pathName": "parabolic_sar",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe parabolic SAR is a technical indicator that is used by many traders to determine the direction of an asset's momentum and the point in time when this momentum has a higher-than-normal probability of switching directions.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/articles/technical/02/042202.asp)\n\n## Syntax\n\n**ParabolicSAR(double acceleration, double accelerationMax, double accelerationStep)**\n\n**ParabolicSAR(ISeries`<double>` input, double acceleration, double accelerationMax, double accelerationStep)**\n\nReturns default value  \n\n**ParabolicSAR[double acceleration, double accelerationMax, double accelerationStep](int barsAgo)**  \n\n**ParabolicSAR[ISeries`<double>` input, double acceleration, double accelerationStep, double accelerationMax](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n---\n\n* **acceleration**\n* Acceleration value\n\n---\n\n* **accelerationStep**\n* Step value used to increment acceleration value\n\n---\n\n* **accelerationMax**\n* Max acceleration value\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of ParabolicSAR using default price type\ndouble value = ParabolicSAR(0.02, 0.2, 0.02)[0];\nPrint(\"The current ParabolicSAR value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "15b7fb70983d4e027f790777f162f032246ff79cf4af8bba7dc1e49614eca5a1",
    "_type": "desktopSdkDoc",
    "title": "Percentage Price Oscillator (PPO)",
    "pathName": "percentage_price_oscillator_pp",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Percentage Price Oscillator shows the percentage difference between two **exponential moving averages**.\n\n## Syntax\n\n**PPO(int fast, int slow, int smooth)**  \n\n**PPO(ISeries`<double>` input, int fast, int slow, int smooth)**\n\nReturns default value  \n\n**PPO[int fast, int slow, int smooth](int barsAgo)**  \n\n**PPO[ISeries`<double>` input, int fast, int slow, int smooth](int barsAgo)**\n\nReturns smoothed value  \n\n**PPO(int fast, int slow, int smooth).Smoothed[int barsAgo]**  \n\n**PPO(ISeries`<double>` input, int fast, int slow, int smooth).Smoothed[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* fast\n* The number of bars to calculate the fast EMA\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* slow\n* The number of bars to calculate the slow EMA\n\n---\n\n* smooth\n* The number of bars to calculate the EMA signal line\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period Percentage Price Oscillator\ndouble value = PPO(12, 26, 9)[0];\nPrint(\"The current Percentage Price Oscillator value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "dd4f1b19af691d0b9cce69af0404be49085e0be4ad509720a2421dfd0d245e71",
    "_type": "desktopSdkDoc",
    "title": "Pivots",
    "pathName": "pivots",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe pivot point is used as a predictive indicator. If the following day's market price falls below the pivot point, it may be used as a new resistance level. Conversely, if the market price rises above the pivot point, it may act as the new support level.\n\n... Courtesy of [Investopedia](http://www.investopedia.com/articles/technical/04/041404.asp)\n\n## Syntax\n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width)**\n\nReturns pivot point value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).Pp[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).PP[int barsAgo]**\n\nReturns R1 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R1[int barsAgo]**\n\nReturns R2 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R2[int barsAgo]**\n\nReturns R3 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).R3[int barsAgo]**\n\nReturns S1 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S1[int barsAgo]**\n\nReturns S2 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S2[int barsAgo]**\n\nReturns S3 value  \n\n**Pivots(PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**  \n\n**Pivots(ISeries`<double>` input, PivotRange pivotRangeType, HLCCalculationMode priorDayHLC, double userDefinedClose, double userDefinedHigh, double userDefinedLow, int width).S3[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n\n---\n\n* pivotRangeType\n* Sets the range for the type of pivot calculated. Possible values are: **PivotRange.Daily**, **PivotRange.Weekly**, **PivotRange.Monthly**\n\n---\n\n* priorDayHLC\n* Sets how the prior range High, Low, Close values are calculated. Possible values are: **HLCCalculationMode.CalcFromIntradayData**, **HLCCalculationMode.DailyBars**, **HLCCalculationMode.UserDefinedValues**\n\n---\n\n* userDefinedClose\n* Sets the close for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* userDefinedHigh\n* Sets the high for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* userDefinedLow\n* Sets the low for Pivots calculations when using **HLCCalculationMode.UserDefinedValues**.\n\n---\n\n* width\n* Sets how long the Pivots lines will be drawn\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current pivot point value\ndouble value = Pivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).Pp[0];\nPrint(\"The current Pivots' pivot value is \" + value.ToString());\n\n// Prints the current S2 pivot value\ndouble value = Pivots(PivotRange.Daily, HLCCalculationMode.CalcFromIntradayData, 0, 0, 0, 20).S2[0];\nPrint(\"The current Pivots' S2 pivot value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window.\n\n{% callout type=\"note\" %}\n\nWhen using **HLCCalculationMode.DailyBars** it can be expected that a value of 0 is returned when the daily bars have not been loaded yet. Due to the asynchronous nature of this indicator calling daily bars you should only access the pivot values when the indicator has loaded all required Bars objects. To ensure you are accessing accurate values you can use **.[IsValidDataPoint()](isvaliddatapoint.htm)** as a check:\n\n{% /callout %}\n\n```csharp\n// Evaluates that this is a valid pivot point value\nif (Pivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp.IsValidDataPoint(0))\n{\n     // Prints the current pivot point value\n     double value = Pivots(PivotRange.Daily, HLCCalculationMode.DailyBars, 0, 0, 0, 20).Pp[0];\n     Print(\"The current Pivots' pivot value is \" + value.ToString());\n}\n```"
  },
  {
    "_id": "c3dad76d8a9eb536d7148040eeb5de190cb0754c32fc1064e0c3e306dec86184",
    "_type": "desktopSdkDoc",
    "title": "Polarized Fractal Efficiency (PFE)",
    "pathName": "polarized_fractal_efficiency_pfe",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Polarized Fractal Efficiency indicator uses fractal geometry to determine how efficiently the price is moving. When the **PFE** is zigzagging around zero, then the price is congested and not trending. When the **PFE** is smooth and above/below zero, then the price is in an up/down trend. The higher/lower the **PFE** value, the stronger the trend is.\n\n... Courtesy of [FMLabs](http://www.fmlabs.com/reference/default.htm?url=PFE.htm)\n\n## Syntax\n\n**PFE(int period, int smooth)**  \n\n**PFE(ISeries`<double>` input, int period, int smooth)**\n\nReturns default value  \n\n**PFE[int period, int smooth](int barsAgo)**  \n\n**PFE[ISeries`<double>` input, int period, int smooth](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* smooth\n* The smoothing factor to be applied\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period PFE using default price type\ndouble value = PFE(20, 2)[0];\nPrint(\"The current PFE value is \" + value.ToString());\n\n// Prints the current value of a 20 period PFE using high price type\ndouble value = PFE(High, 20, 2)[0];\nPrint(\"The current PFE value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "d04e004d075457a688bf1656444218f3b371a1e9b8b6c9488977ebf2cc80f2ad",
    "_type": "desktopSdkDoc",
    "title": "Price Oscillator",
    "pathName": "price_oscillator",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Price Oscillator is an indicator based on the difference between two **moving averages**, and is expressed as either a percentage or in absolute terms.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_priceOscillator.html)\n\n## Syntax\n\n**PriceOscillator(int fast, int slow, int smooth)**  \n**PriceOscillator(ISeries`<double>` input, int fast, int slow, int smooth)**\n\nReturns default value  \n**PriceOscillator[int fast, int slow, int smooth](int barsAgo)**  \n**PriceOscillator[ISeries`<double>` input, int fast, int slow, int smooth](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* fast\n* The number of bars to calculate the fast **EMA**\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* slow\n* The number of bars to calculate the slow **EMA**\n\n---\n\n* smooth\n* The number of bars to calculate the **EMA** signal line\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period PriceOscillator using default price type\ndouble value = PriceOscillator(12, 26, 9)[0];\nPrint(\"The current PriceOscillator value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "4cf75a76e2bb4ebd2938ad5baeebd801b0134f17eaf2da7cf3aefcb7d486d865",
    "_type": "desktopSdkDoc",
    "title": "Prior Day OHLC",
    "pathName": "prior_day_ohlc",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe prior day (session) open, high, low and close values.\n\n{% callout type=\"note\" %}\n\nOnly use this indicator on intraday series.\n\n{% /callout %}\n\n## Syntax\n\n**PriorDayOHLC()**  \n\n**PriorDayOHLC(ISeries`<double>` input)**\n\nReturns prior session open value  \n\n**PriorDayOHLC().PriorOpen[int barsAgo]**  \n\n**PriorDayOHLC(ISeries`<double>` input).PriorOpen[int barsAgo]**\n\nReturns prior session high value  \n\n**PriorDayOHLC().PriorHigh[int barsAgo]**  \n\n**PriorDayOHLC(ISeries`<double>` input).PriorHigh[int barsAgo]**\n\nReturns prior session low value  \n\n**PriorDayOHLC().PriorLow[int barsAgo]**  \n\n**PriorDayOHLC(ISeries`<double>` input).PriorLow[int barsAgo]**\n\nReturns prior session close value  \n\n**PriorDayOHLC().PriorClose[int barsAgo]**  \n\n**PriorDayOHLC(ISeries`<double>` input).PriorClose[int barsAgo]**\n\n## Return Value\n\n**double**; Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the value of the prior session low\ndouble value = PriorDayOHLC().PriorLow[0];\nPrint(\"The prior session low value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "528f571880d513bc6763f516ebea6a5098105a49a912b62c3ee7a59c8ea016a4",
    "_type": "desktopSdkDoc",
    "title": "Psychological Line",
    "pathName": "psychological_line",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Psychological Line is the ratio of the number of rising bars over the specified number of bars.\n\n## Syntax\n\n**PsychologicalLine(int period)**\n\n**PsychologicalLine(ISeries`<double>` input, int period)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n\n* Description\n\n---\n\n* input\n\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n\n---\n\n* period\n\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 10 period Psychological Line\ndouble value = PsychologicalLine[10](0);\nPrint(\"The current Psychological Line value is \" + value.ToString());\n```"
  },
  {
    "_id": "2269c0be009b610cfdbb8cfe9253ad37cf95062fb3f5a7560268ff259ea9f087",
    "_type": "desktopSdkDoc",
    "title": "Range",
    "pathName": "range",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns the range of a bar.\n\n## Syntax\n\n**Range()**  \n**Range(ISeries`<double>` input)**\n\nReturns default value  \n**Range()[int barsAgo]**  \n**Range[ISeries`<double>` input](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the range of the current bar\ndouble value = Range()[0];\nPrint(\"The current bar's range is \" + value.ToString());\n\n// Prints the 20 period simple moving average of range\ndouble value = SMA(Range(), 20)[0];\nPrint(\"The 20 period average of range is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "ddf0b0deb3a8ce21e786e97454e2baf228117a526818983a2023166e96d83e33",
    "_type": "desktopSdkDoc",
    "title": "Range Indicator (RIND)",
    "pathName": "range_indicator_rind",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Range indicator compares the intraday range (high - low) to the inter-day (close - previous close) range. When the inter-day range is less than the intraday range, the Range Indicator will be a high value. This signals an end to the current trend. When the Range Indicator is at a low level, a new trend is about to start.\n\nThe Range Indicator was developed by Jack Weinberg and was introduced in his article in the June, 1995 issue of Technical Analysis of Stocks & Commodities magazine.\n\n## Syntax\n\n**RIND(int periodQ, int smooth)**  \n**RIND(ISeries`<double>` input, int periodQ, int smooth)**\n\nReturns default value  \n**RIND[int periodQ, int smooth](int barsAgo)**  \n**RIND[ISeries`<double>` input, int periodQ, int smooth](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* input\n* periodQ\n* smooth\n\n---\n\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n* The number of bars to include in the calculation for the short term stochastic range lookback\n* The number of bars to include for the EMA smoothing of the indicator\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints out a historical RIND value\ndouble value = RIND[3, 10](5);\nPrint(\"RIND value of 5 bars ago is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "a41abc3a1742ade5ef423f1187e767f15b7c628335d54545ffae2c6b0069d211",
    "_type": "desktopSdkDoc",
    "title": "Rate of Change (ROC)",
    "pathName": "rate_of_change_roc",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Rate of Change (ROC) indicator is a very simple yet effective momentum oscillator that measures the percent change in price from one period to the next. The ROC calculation compares the current price with the price n periods ago.\n\n... Courtesy of [StockCharts](stockcharts)\n\n## Syntax\n\n**ROC(int period)**  \n**ROC(ISeries`<double>` input, int period)**\n\nReturns default value  \n**ROC[int period](int barsAgo)**  \n**ROC[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\nPrints the current value of a 20 period ROC using default price type\ndouble value = ROC[20](0);\nPrint(\"The current ROC value is \" + value.ToString());\n\n// Prints the current value of a 20 period ROC using high price type\ndouble value = ROC[High, 20](0);\nPrint(\"The current ROC value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "78b672507fa45642eec6ae54c3342e660880f619e086ab71695fcf627ae8bfa3",
    "_type": "desktopSdkDoc",
    "title": "Regression Channel",
    "pathName": "regression_channel",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nA Regression Channel is created by drawing parallel lines above and below the **Linear Regression** line.\n\nParallel and equidistant lines are drawn n standard deviations (width parameter) above and below a Linear Regression trendline. The distance between the channel lines and the regression line is the greatest distance that any one closing price is from the regression line. Regression Channels contain price movement, the top channel line provides resistance and the bottom channel line provides support. A reversal in trend may be indicated when prices remain outside the channel for a longer period of time.\n\nA Linear Regression trendline shows where equilibrium exists but Linear Regression Channels show the range prices can be expected to deviate from a trendline.\n\n## Syntax\n\n**RegressionChannel(int period, double width)**  \n\n**RegressionChannel(ISeries`<double>` input, int period, double width)**  \n\n**Returns default midline value**  \n\n**RegressionChannel[int period, double width](int barsAgo)**  \n\n**RegressionChannel[ISeries`<double>` input, int period, double width](int barsAgo)**  \n\n**Returns upper channel value**  \n\n**RegressionChannel(int period, double width).Upper[int barsAgo]**  \n\n**RegressionChannel(ISeries`<double>` input, int period, double width).Upper[int barsAgo]**  \n\n**Returns lower channel value**  \n\n**RegressionChannel(int period, double width).Lower[int barsAgo]**  \n\n**RegressionChannel(ISeries`<double>` input, int period, double width).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* width\n* Number of std deviations to calculate the channel lines\n{% /table %}\n\n{% callout type=\"note\" %}\n\nTip: You should not access historical values of this indicator since the values can change from bar to bar. The values from n bars ago does not reflect what the values of the current bar really are. It is suggested that you only access the current bar value for this indicator.\n\n{% /callout %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period channel using default price type\ndouble value = RegressionChannel(20, 2).Upper[0];\nPrint(\"The current upper channel value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "96dadfb2df64baec1eaf55586d96221ea74314cd833626acaa2c8717a405a031",
    "_type": "desktopSdkDoc",
    "title": "Relative Spread Strength (RSS)",
    "pathName": "relative_spread_strength_rss",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by Ian Copsey, **Relative Spread Strength** is a variation to the [Relative Strength Index](relative_strength_index_rsi).\n\n## Syntax\n\n**RSS(int eMA1, int eMA2, int length)**\n\n**RSS(ISeries`<double>` input, int eMA1, int eMA2, int length)**\n\nReturns default value\n\n**RSS[int eMA1, int eMA2, int length](int barsAgo)**\n\n**RSS[ISeries`<double>` input, int eMA1, int eMA2, int length](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* eMA1\n* First EMA's period\n\n---\n\n* eMA2\n* Second EMA's period\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* length\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of the RSS using default price type\ndouble value = RSS[10, 40, 5](0);\nPrint(\"The current RSS value is \" + value.ToString());\n\n// Prints the current value of the RSS using high price type\ndouble value = RSS[High, 10, 40, 5](0);\nPrint(\"The current RSS value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "c2eec4fb4ef0c73f76529e70d6b188e6b906d46be1a6a0578a5288212537c418",
    "_type": "desktopSdkDoc",
    "title": "Relative Strength Index (RSI)",
    "pathName": "relative_strength_index_rsi",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by J. Welles Wilder and introduced in his 1978 book, New Concepts in Technical Trading Systems, the Relative Strength Index (RSI) is an extremely useful and popular momentum oscillator. The RSI compares the magnitude of a stock's recent gains to the magnitude of its recent losses and turns that information into a number that ranges from 0 to 100.\n\n... Courtesy of [StockCharts](http://stockcharts.com/education/IndicatorAnalysis/indic_RSI.html)\n\nThe original Wilder formula for an exponential moving average with a smoothing constant (k = 1/ Period) is used to calculate the RSI.\n\n## Syntax\n\n**RSI(int period, int smooth)**  \n**RSI(ISeries`<double>` input, int period, int smooth)**\n\nReturns default value  \n**RSI[int period, int smooth](int barsAgo)**  \n**RSI[ISeries`<double>` input, int period, int smooth](int barsAgo)**\n\nReturns avg value  \n**RSI(int period, int smooth).Avg[int barsAgo]**  \n**RSI(ISeries`<double>` input, int period, int smooth).Avg[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n* smooth\n* Smoothing period\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period RSI using default price type\ndouble value = RSI[20, 3](0);\nPrint(\"The current RSI value is \" + value.ToString());\n\n// Prints the current value of a 20 period RSI using high price type\ndouble value = RSI[**High**, 20, 3](0);\nPrint(\"The current RSI value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "2349e6389cce7b5d6f25037ab02886375e8ac77dff112e86b712e084cc28ed17",
    "_type": "desktopSdkDoc",
    "title": "Relative Vigor Index",
    "pathName": "relative_vigor_index",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Relative Vigor Index measures the strength of a trend by comparing an instruments closing price to its price range. It's based on the fact that prices tend to close higher than they open in up trends, and closer lower than they open in downtrends.\n\n## Syntax\n\n**RelativeVigorIndex(int period)**\n\n**RelativeVigorIndex(ISeries`<double>` input, int period)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **int barsAgo** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 10 period Relative Vigor Index\ndouble value = RelativeVigorIndex(10)[0];\nPrint(\"The current Relative Vigor Index value is \" + value.ToString());\n```"
  },
  {
    "_id": "e1cefe33a9cb7761d3b9d58c5c17af77241eb0a4290430221316370a3287038b",
    "_type": "desktopSdkDoc",
    "title": "Relative Volatility Index (RVI)",
    "pathName": "relative_volatility_index_rvi",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by Donald Dorsey, the Relative Volatility Index is the **RSI** using the standard deviation over the indicator period in place of the daily price change. The RVI measures the direction of volatility on a scale from 0 to 100. Readings below 50 indicate that the direction of volatility is to the downside and that you should be looking to sell, readings above 50 indicate that the direction of volatility is to the upside and that you should be looking to buy.\n\n## Syntax\n\n**RVI(int period)**  \n\n**RVI(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**RVI[int period](int barsAgo)**  \n\n**RVI[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// OnBarUpdate method\nprotected override void OnBarUpdate()\n{\n    // Check for buy condition\n    if (RVI(14)[0] > 50 && CrossAbove(SMA(9), SMA(14), 1))\n    {\n        EnterLong();\n    }\n}\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "4220dcacfeb3f6bd0df9bb90dfd0f3eb6938f67bcf3860677f2a08517b3db9bf",
    "_type": "desktopSdkDoc",
    "title": "R-squared",
    "pathName": "r_squared",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe **r-squared** indicator calculates how well the price approximates a linear regression line. The indicator gets its name from the calculation, which is, the square of the correlation coefficient (referred to in mathematics by the Greek letter rho, or r). The range of the **r-squared** is from zero to one.\n\n... Courtesy of [FMLabs](http://www.fmlabs.com/reference/default.htm?url=rsquared.htm)\n\n## Syntax\n\n**RSquared(int period)**\n\n**RSquared(ISeries`<double>` input, int period)**\n\nReturns default value\n\n**RSquared[int period](int barsAgo)**\n\n**RSquared[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator.htm))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period R-squared using default price type\ndouble value = RSquared[20](0);\nPrint(\"The current R-squared value is \" + value.ToString());\n\n// Prints the current value of a 20 period R-squared using high price type\ndouble value = RSquared[High, 20](0);\nPrint(\"The current R-squared value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "accc07e9a756d276f200529e8ca0360f0396fc7f44c074456b3d9171e668ee61",
    "_type": "desktopSdkDoc",
    "title": "Standard Deviation (StdDev)",
    "pathName": "standard_deviation_stddev",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nIn probability theory and statistics, **standard deviation** is a measure of the variability or dispersion of a population, a data set, or a probability distribution. A low **standard deviation** indicates that the data points tend to be very close to the same value (the mean), while high **standard deviation** indicates that the data are “spread out” over a large range of values.\n\n... Courtesy of [Wikipedia](standard_deviation)\n\n## Syntax\n\n**StdDev(int period)**  \n\n**StdDev(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**StdDev[int period](int barsAgo)**  \n\n**StdDev[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period **StdDev** using default price type\ndouble value = StdDev[20](0);\nPrint(\"The current **StdDev** value is \" + value.ToString());\n\n// Prints the current value of a 20 period **StdDev** using high price type\ndouble value = StdDev[High, 20](0);\nPrint(\"The current **StdDev** value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > **NinjaScript** Editor > Indicators within the **NinjaTrader** Control Center window."
  },
  {
    "_id": "17a06f6b187dd6f2489ed6fde08175450a0ae1aac9fdffd338cf0bd7149419fc",
    "_type": "desktopSdkDoc",
    "title": "Standard Error (StdError)",
    "pathName": "standard_error_stderror",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe standard error of a method of measurement or estimation is the standard deviation of the sampling distribution associated with the estimation method. The term may also be used to refer to an estimate of that standard deviation, derived from a particular sample used to compute the estimate.\n\n... Courtesy of [Wikipedia](http://en.wikipedia.org/wiki/Standard_error_(statistics))\n\n## Syntax\n\n**StdError(int period)**  \n**StdError(ISeries`<double>` input, int period)**\n\nReturns default value which is the mid line (also known as linear regression)  \n**StdError[int period](int barsAgo)**  \n**StdError[ISeries`<double>` input, int period](int barsAgo)**\n\nReturns upper value  \n**StdError(int period).Upper[int barsAgo]**  \n**StdError(ISeries`<double>` input, int period).Upper[int barsAgo]**\n\nReturns lower value  \n**StdError(int period).Lower[int barsAgo]**  \n**StdError(ISeries`<double>` input, int period).Lower[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current upper value of a 20 period **StdError** using default price type\ndouble value = StdError(20).Upper[0];\nPrint(\"The current upper Standard Error value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "2d65f7f329c9d2f948e335b8d26b96572dfd4cd8395a7dd8acde234aa9e76c22",
    "_type": "desktopSdkDoc",
    "title": "Stochastics",
    "pathName": "stochastics",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by George C. Lane in the late 1950s, the Stochastic Oscillator is a momentum indicator that shows the location of the current close relative to the high/low range over a set number of periods. Closing levels that are consistently near the top of the range indicate accumulation (buying pressure) and those near the bottom of the range indicate distribution (selling pressure).\n\n... Courtesy of [StockCharts](stockcharts)\n\n## Syntax\n\n**Stochastics(int periodD, int periodK, int smooth)**  \n**Stochastics(ISeries`<double>` input, int periodD, int periodK, int smooth)**\n\n**Returns %D value**  \n**Stochastics(int periodD, int periodK, int smooth).D[int barsAgo]**  \n**Stochastics(ISeries`<double>` input, int periodD, int periodK, int smooth).D[int barsAgo]**\n\n**Returns %K value**  \n**Stochastics(int periodD, int periodK, int smooth).K[int barsAgo]**  \n**Stochastics(ISeries`<double>` input, int periodD, int periodK, int smooth).K[int barsAgo]**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **input**\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* **periodD**\n* The period for the moving average of periodD\n\n---\n\n* **periodK**\n* The period for the moving average of periodK\n\n---\n\n* **smooth**\n* The smoothing value to be used\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current %D value\ndouble value = Stochastics(7, 14, 3).D[0];\nPrint(\"The current Stochastics %D value is \" + value.ToString());\n\n// Prints the current %K value\ndouble value = Stochastics(7, 14, 3).K[0];\nPrint(\"The current Stochastics %K value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "9563e18b5b8acf3db090689324ad3190f27acd03fcb2ab8ae77bca46901bd1d2",
    "_type": "desktopSdkDoc",
    "title": "Stochastics Fast",
    "pathName": "stochastics_fast",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nDeveloped by George C. Lane in the late 1950s, the Stochastic Oscillator is a momentum indicator that shows the location of the current close relative to the high/low range over a set number of periods. Closing levels that are consistently near the top of the range indicate accumulation (buying pressure) and those near the bottom of the range indicate distribution (selling pressure).\n\n... Courtesy of [StockCharts](stockcharts)\n\n## Syntax\n\n**StochasticsFast(int periodD, int periodK)**  \n\n**StochasticsFast(ISeries`<double>` input, int periodD, int periodK)**\n\nReturns %D value  \n\n**StochasticsFast(int periodD, int periodK).D[int barsAgo]**  \n\n**StochasticsFast(ISeries`<double>` input, int periodD, int periodK).D[int barsAgo]**\n\nReturns %K value  \n\n**StochasticsFast(int periodD, int periodK).K[int barsAgo]**  \n\n**StochasticsFast(ISeries`<double>` input, int periodD, int periodK).K[int barsAgo]**\n\n## Return Value\n\n**double;** Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* periodD\n* The period for the moving average of periodD\n\n---\n\n* periodK\n* The period for the moving average of periodK\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current %D value\ndouble value = StochasticsFast(3, 14).D[0];\nPrint(\"The current StochasticsFast %D value is \" + value.ToString());\n\n// Prints the current %K value\ndouble value = StochasticsFast(3, 14).K[0];\nPrint(\"The current StochasticsFast %K value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "67b6770bf8678ee21db9f695d660ecf87e00d2e62818d6eb8cae028cfd48198f",
    "_type": "desktopSdkDoc",
    "title": "Stochastics RSI (StochRSI)",
    "pathName": "stochastics_rsi_stochrsi",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThis is an indicator on indicator implementation. It is simply a **[Stochastics](stochastics)** indicator applied on **[RSI](relative_strength_index_rsi)**.\n\n## Syntax\n\n**StochRSI(int period)**  \n\n**StochRSI(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**StochRSI[int period](int barsAgo)**  \n\n**StochRSI[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data (**[?](valid_input_data_for_indicator)**)\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n## Examples\n\n```csharp\n// Evaluates if the current bar StochRSI value is greater than the value one bar ago\nif (StochRSI[14](0) > StochRSI[14](1))\n   Print(\"Stochastics RSI is rising\");\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "d54ad1becd3a42772043d0b20c83ec9903619f5f986243a165cc137c3ca47b6e",
    "_type": "desktopSdkDoc",
    "title": "Summation (SUM)",
    "pathName": "summation_sum",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nReturns the sum of the values taken over a specified period.\n\n## Syntax\n\n**SUM(int period)**  \n\n**SUM(ISeries`<double>` input, int period)**\n\nReturns default value  \n\n**SUM[int period](int barsAgo)**  \n\n**SUM[ISeries`<double>` input, int period](int barsAgo)**\n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* input\n* Indicator source data ([**valid_input_data_for_indicator**](valid_input_data_for_indicator))\n\n---\n\n* period\n* Number of bars used in the calculation\n\n---\n\n{% /table %}sed in the calculation\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period SUM using default price type\ndouble value = SUM[20](0);\nPrint(\"The current SUM value is \" + value.ToString());\n\n// Prints the current value of a 20 period SUM using high price type\ndouble value = SUM[High, 20](0);\nPrint(\"The current SUM value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "2da977e917bcbc5ef3b51217c7882607dd49d8afdc04a2f90790f562ef287393",
    "_type": "desktopSdkDoc",
    "title": "Swing",
    "pathName": "swing",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe **Swing** indicator will plot lines that represent the swing points based on the strength (number of bars to the left and right of the swing point) parameter provided, it's mostly a visual tool and not meant to be predictive in nature. Only after the strength number of bars has passed since the extreme point, the swing return value could be definitely set, thus the indicator updates its calculations as new incoming data warrants so.\n\nYou can access methods within this indicator to determine the number of bars ago a swing point occurred or the current swing value.\n\n{% callout type=\"note\" %}\n\nTip: To workaround the situation, where the indicator has to recalculate - you could only access the **SwingHigh** / **Low** values the number of swing strength bars ago - those values are calculated in their final state.\n\n{% /callout %}\n\n## Syntax - Bars Ago\n\n**High Bar**  \n**Swing(int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod**  \n**Swing(ISeries`<double>` input, int strength).SwingHighBar(int barsAgo, int instance, int lookBackPeriod)**  \n\n**Low Bar**  \n**Swing(int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod**  \n**Swing(ISeries`<double>` input, int strength).SwingLowBar(int barsAgo, int instance, int lookBackPeriod)**  \n\n## Return Value\n\nAn **int** value representing the number of bars ago. Returns a value of -1 if a swing point is not found within the look back period.\n\n## Syntax - Value\n\n**High Value**  \n**Swing(int strength).SwingHigh[int barsAgo]**  \n**Swing(ISeries`<double>` input, int strength).SwingHigh[int barsAgo]**  \n\n**Low Value**  \n**Swing(int strength).SwingLow[int barsAgo]**  \n**Swing(ISeries`<double>` input, int strength).SwingLow[int barsAgo]**  \n\n## Return Value\n\n**double;** Accessing this method via an index value **[int barsAgo]** returns the indicator value of the referenced bar.\n\n* A return value of 0 (zero) will be returned if the CurrentBar number is less than the \"strength\" value, or a swing pivot has not yet been found.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n\n* Description\n\n---\n\n* barsAgo\n\n* The number of bars ago that serves as the starting bar from which to work backwards\n\n---\n\n* input\n\n* Indicator source data ([?](valid_input_data_for_indicator))\n\n---\n\n* instance\n\n* The occurrence to check for (1 is the most recent, 2 is the 2nd most recent, etc...)\n\n---\n\n* lookBackPeriod\n\n* Number of bars to look back to check for the test condition, which is evaluated on the current bar and the bars in the look back period.\n\n---\n\n* strength\n\n* The number of required bars to the left and right of the swing point\n\n---\n\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the high price of the most recent swing high\nPrint(\"The high of the swing bar is \" + High[Math.Max(0, Swing(5).SwingHighBar(0, 1, 10))]);\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  },
  {
    "_id": "8a3bd3b1fd16d021159b9e29746a1dec6294564bbfa4e04355ef4cb9efe662b0",
    "_type": "desktopSdkDoc",
    "title": "Time Series Forecast (TSF)",
    "pathName": "time_series_forecast_tsf",
    "parent": "system_indicator_methods",
    "order": 0,
    "status": "updated",
    "section": "references",
    "markdown": "## Description\n\nThe Time Series Forecast function displays the statistical trend of a security's price over a specified time period based on linear regression analysis. Instead of a straight linear regression trendline, the Time Series Forecast plots the last point of multiple linear regression trendlines. This is why this indicator may sometimes be referred to as the \"moving linear regression\" indicator or the \"regression oscillator.\"\n\n## Syntax\n\n**TSF(int forecast, int period)**  \n\n**TSF(ISeries`<double>` input, int forecast, int period)**\n\nReturns default value  \n\n**TSF[int forecast, int period](int barsAgo)**  \n\n**TSF[ISeries`<double>` input, int forecast, int period](int barsAgo)**\n\n## Return Value\n\n**double**; Accessing this method via an index value [int barsAgo] returns the indicator value of the referenced bar.\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **forecast**\n* Forecast period\n\n---\n\n* **input**\n* Indicator source data ([valid input data for indicator](valid_input_data_for_indicator))\n\n---\n\n* **period**\n* Number of bars used in the calculation\n{% /table %}\n\n## Examples\n\n```csharp\n// Prints the current value of a 20 period TSF using default price type\ndouble value = TSF(3, 20)[0];\nPrint(\"The current TSF value is \" + value.ToString());\n```\n\n## Source Code\n\nYou can view this indicator method source code by selecting the menu New > NinjaScript Editor > Indicators within the NinjaTrader Control Center window."
  }
]