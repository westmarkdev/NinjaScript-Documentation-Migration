[
  {
    "_id": "cf34c58a3f490f71f232badeacfdbf444b1a879f5477fc0748e3ba62d3f6b6d4",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DisposeBase.Dispose()",
    "pathName": "sharpdx_disposebase_dispose",
    "parent": "disposebase",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Implements I**Disposable.Dispose()**)\n\n{% callout type=\"note\" %}\n\nTip: For NinjaScript development purposes, the following documented SharpDX objects require **Dispose()** after they are used:\n\n* [Brush](sharpdx_direct2d1_brush)\n* [GeometrySink](sharpdx_direct2d1_geometrysink.md)\n* [GradientStopCollection](sharpdx_direct2d1_gradientstopcollection.md)\n* [LinearGradientBrush](sharpdx_direct2d1_lineargradientbrush.md)\n* [PathGeometry](sharpdx_direct2d1_pathgeometry.md)\n* [RadialGradientBrush](sharpdx_direct2d1_radialgradientbrush.md)\n* [SolidColorBrush](sharpdx_direct2d1_solidcolorbrush)\n* [StrokeStyle](sharpdx_direct2d1_strokestyle.md)\n* [TextFormat](sharpdx_directwrite_textformat)\n* [TextLayout](sharpdx_directwrite_textlayout)\n\nThere are other undocumented SharpDX objects which are NOT included in this reference. Please be careful to dispose of any object (SharpDX or otherwise) which implements the I**Disposable** interface - NinjaTrader is NOT guaranteed to dispose of these objects for you!\n\n{% /callout %}\n\n## Method return value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`disposebaseobject`>.Dispose()**"
  },
  {
    "_id": "36b42d0e8c02afbe79297130923e590227d905d7b4cd18749ad81a699ef6acb3",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DisposeBase.IsDisposed",
    "pathName": "sharpdx_disposebase_isdisposed",
    "parent": "disposebase",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets a value indicating whether this instance is disposed.\n\n## Property Value\n\nA bool which is true if this instance is disposed; otherwise, false.\n\n## Syntax\n\n**<`disposebaseobject>**.IsDisposed"
  },
  {
    "_id": "1c2456958a9358d7c226b8eccaebb152017bbcb963498fec67489f18b02762e1",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Color",
    "pathName": "sharpdx_color",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a 32-bit color (4 bytes) in the form of RGBA (in byte order: R, G, B, A).\n\n{% callout type=\"note\" %}\n\nNotes:  \n\n1. The color of each pixel is represented as a 32-bit number: 8 bits each for alpha, red, green, and blue (ARGB). Each of the four components is a number from 0 through 255, with 0 representing no intensity and 255 representing full intensity. The alpha component specifies the transparency of the color: 0 is fully transparent, and 255 is fully opaque. To determine the alpha, red, green, or blue component of a color, use the **A**, **R**, **G**, or **B** property, respectively.  \n2. Named colors are represented by using the properties of the Color structure. Please see the table of Static Named Colors below.\n{% /callout %}\n\n## Syntax\n\nstruct **Color**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **Color**()\n* Initializes a new instance of the **Color** struct\n\n---\n\n* new **Color**(float red, float green, float blue)\n* Initializes a new instance of the **Color** struct using float values\n\n---\n\n* new **Color**(float red, float green, float blue, float alpha)\n* Initializes a new instance of the **Color** struct using float values with alpha transparency\n\n---\n\n* new **Color**(int red, int green, int blue)\n* Initializes a new instance of the **Color** struct using int values\n\n---\n\n* new **Color**(int red, int green, int blue, int alpha)\n* Initializes a new instance of the **Color** struct using int values with alpha transparency\n\n---\n\n* new **Color**(byte red, byte green, byte blue)\n* Initializes a new instance of the **Color** struct using byte values\n\n---\n\n* new **Color**(byte red, byte green, byte blue, byte alpha)\n* Initializes a new instance of the **Color** struct using byte values with alpha transparency\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Property/Method\n* Description\n\n---\n\n* **R**\n* The red component of the color\n\n---\n\n* **G**\n* The green component of the color\n\n---\n\n* **B**\n* The blue component of the color\n\n---\n\n* **A**\n* The alpha component of the color\n\n---\n\n* **ToColor3()**\n* Converts the color into a [three component](sharpdx_color3) color\n\n---\n\n* **ToColor4()**\n* Converts the color into a [four component](sharpdx_color4) color\n{% /table %}\n\n## Static Named Colors\n\n### Colors by name\n\n{% table %}\n\n* Color Name\n* Description\n\n---\n\n* **SharpDX.Color.Zero**\n* Zero color\n\n---\n\n* **SharpDX.Color.Transparent**\n* Transparent color\n\n---\n\n* **SharpDX.Color.AliceBlue**\n* AliceBlue color\n\n---\n\n* **SharpDX.Color.AntiqueWhite**\n* AntiqueWhite color\n\n---\n\n* **SharpDX.Color.Aqua**\n* Aqua color\n\n---\n\n* **SharpDX.Color.Aquamarine**\n* Aquamarine color\n\n---\n\n* **SharpDX.Color.Azure**\n* Azure color\n\n---\n\n* **SharpDX.Color.Beige**\n* Beige color\n\n---\n\n* **SharpDX.Color.Bisque**\n* Bisque color\n\n---\n\n* **SharpDX.Color.Black**\n* Black color\n\n---\n\n* **SharpDX.Color.BlanchedAlmond**\n* BlanchedAlmond color\n\n---\n\n* **SharpDX.Color.Blue**\n* Blue color\n\n---\n\n* **SharpDX.Color.BlueViolet**\n* BlueViolet color\n\n---\n\n* **SharpDX.Color.Brown**\n* Brown color\n\n---\n\n* **SharpDX.Color.BurlyWood**\n* BurlyWood color\n\n---\n\n* **SharpDX.Color.CadetBlue**\n* CadetBlue color\n\n---\n\n* **SharpDX.Color.Chartreuse**\n* Chartreuse color\n\n---\n\n* **SharpDX.Color.Chocolate**\n* Chocolate color\n\n---\n\n* **SharpDX.Color.Coral**\n* Coral color\n\n---\n\n* **SharpDX.Color.CornflowerBlue**\n* CornflowerBlue color\n\n---\n\n* **SharpDX.Color.Cornsilk**\n* Cornsilk color\n\n---\n\n* **SharpDX.Color.Crimson**\n* Crimson color\n\n---\n\n* **SharpDX.Color.Cyan**\n* Cyan color\n\n---\n\n* **SharpDX.Color.DarkBlue**\n* DarkBlue color\n\n---\n\n* **SharpDX.Color.DarkCyan**\n* DarkCyan color\n\n---\n\n* **SharpDX.Color.DarkGoldenrod**\n* DarkGoldenrod color\n\n---\n\n* **SharpDX.Color.DarkGray**\n* DarkGray color\n\n---\n\n* **SharpDX.Color.DarkGreen**\n* DarkGreen color\n\n---\n\n* **SharpDX.Color.DarkKhaki**\n* DarkKhaki color\n\n---\n\n* **SharpDX.Color.DarkMagenta**\n* DarkMagenta color\n\n---\n\n* **SharpDX.Color.DarkOliveGreen**\n* DarkOliveGreen color\n\n---\n\n* **SharpDX.Color.DarkOrange**\n* DarkOrange color\n\n---\n\n* **SharpDX.Color.DarkOrchid**\n* DarkOrchid color\n\n---\n\n* **SharpDX.Color.DarkRed**\n* DarkRed color\n\n---\n\n* **SharpDX.Color.DarkSalmon**\n* DarkSalmon color\n\n---\n\n* **SharpDX.Color.DarkSeaGreen**\n* DarkSeaGreen color\n\n---\n\n* **SharpDX.Color.DarkSlateBlue**\n* DarkSlateBlue color\n\n---\n\n* **SharpDX.Color.DarkSlateGray**\n* DarkSlateGray color\n\n---\n\n* **SharpDX.Color.DarkTurquoise**\n* DarkTurquoise color\n\n---\n\n* **SharpDX.Color.DarkViolet**\n* DarkViolet color\n\n---\n\n* **SharpDX.Color.DeepPink**\n* DeepPink color\n\n---\n\n* **SharpDX.Color.DeepSkyBlue**\n* DeepSkyBlue color\n\n---\n\n* **SharpDX.Color.DimGray**\n* DimGray color\n\n---\n\n* **SharpDX.Color.DodgerBlue**\n* DodgerBlue color\n\n---\n\n* **SharpDX.Color.Firebrick**\n* Firebrick color\n\n---\n\n* **SharpDX.Color.FloralWhite**\n* FloralWhite color\n\n---\n\n* **SharpDX.Color.ForestGreen**\n* ForestGreen color\n\n---\n\n* **SharpDX.Color.Fuchsia**\n* Fuchsia color\n\n---\n\n* **SharpDX.Color.Gainsboro**\n* Gainsboro color\n\n---\n\n* **SharpDX.Color.GhostWhite**\n* GhostWhite color\n\n---\n\n* **SharpDX.Color.Gold**\n* Gold color\n\n---\n\n* **SharpDX.Color.Goldenrod**\n* Goldenrod color\n\n---\n\n* **SharpDX.Color.Gray**\n* Gray color\n\n---\n\n* **SharpDX.Color.Green**\n* Green color\n\n---\n\n* **SharpDX.Color.GreenYellow**\n* GreenYellow color\n\n---\n\n* **SharpDX.Color.Honeydew**\n* Honeydew color\n\n---\n\n* **SharpDX.Color.HotPink**\n* HotPink color\n\n---\n\n* **SharpDX.Color.IndianRed**\n* IndianRed color\n\n---\n\n* **SharpDX.Color.Indigo**\n* Indigo color\n\n---\n\n* **SharpDX.Color.Ivory**\n* Ivory color\n\n---\n\n* **SharpDX.Color.Khaki**\n* Khaki color\n\n---\n\n* **SharpDX.Color.Lavender**\n* Lavender color\n\n---\n\n* **SharpDX.Color.LavenderBlush**\n* LavenderBlush color\n\n---\n\n* **SharpDX.Color.LawnGreen**\n* LawnGreen color\n\n---\n\n* **LemonChiffon**\n* LemonChiffon color\n\n---\n\n* **SharpDX.Color.LightBlue**\n* LightBlue color\n\n---\n\n* **SharpDX.Color.LightCoral**\n* LightCoral color\n\n---\n\n* **SharpDX.Color.LightCyan**\n* LightCyan color\n\n---\n\n* **SharpDX.Color.LightGoldenrodYellow**\n* LightGoldenrodYellow color\n\n---\n\n* **SharpDX.Color.LightGray**\n* LightGray color\n\n---\n\n* **SharpDX.Color.LightGreen**\n* LightGreen color\n\n---\n\n* **SharpDX.Color.LightPink**\n* LightPink color\n\n---\n\n* **SharpDX.Color.LightSalmon**\n* LightSalmon color\n\n---\n\n* **SharpDX.Color.LightSeaGreen**\n* LightSeaGreen color\n\n---\n\n* **SharpDX.Color.LightSkyBlue**\n* LightSkyBlue color\n\n---\n\n* **SharpDX.Color.LightSlateGray**\n* LightSlateGray color\n\n---\n\n* **SharpDX.Color.LightSteelBlue**\n* LightSteelBlue color\n\n---\n\n* **SharpDX.Color.LightYellow**\n* LightYellow color\n\n---\n\n* **SharpDX.Color.Lime**\n* Lime color\n\n---\n\n* **SharpDX.Color.LimeGreen**\n* LimeGreen color\n\n---\n\n* **SharpDX.Color.Linen**\n* Linen color\n\n---\n\n* **SharpDX.Color.Magenta**\n* Magenta color\n\n---\n\n* **SharpDX.Color.Maroon**\n* Maroon color\n\n---\n\n* **SharpDX.Color.MediumAquamarine**\n* MediumAquamarine color\n\n---\n\n* **SharpDX.Color.MediumBlue**\n* MediumBlue color\n\n---\n\n* **SharpDX.Color.MediumOrchid**\n* MediumOrchid color\n\n---\n\n* **SharpDX.Color.MediumPurple**\n* MediumPurple color\n\n---\n\n* **SharpDX.Color.MediumSeaGreen**\n* MediumSeaGreen color\n\n---\n\n* **SharpDX.Color.MediumSlateBlue**\n* MediumSlateBlue color\n\n---\n\n* **SharpDX.Color.MediumSpringGreen**\n* MediumSpringGreen color\n\n---\n\n* **SharpDX.Color.MediumTurquoise**\n* MediumTurquoise color\n\n---\n\n* **SharpDX.Color.MediumVioletRed**\n* MediumVioletRed color\n\n---\n\n* **SharpDX.Color.MidnightBlue**\n* MidnightBlue color\n\n---\n\n* **SharpDX.Color.MintCream**\n* MintCream color\n\n---\n\n* **SharpDX.Color.MistyRose**\n* MistyRose color\n\n---\n\n* **SharpDX.Color.Moccasin**\n* Moccasin color\n\n---\n\n* **SharpDX.Color.NavajoWhite**\n* NavajoWhite color\n\n---\n\n* **SharpDX.Color.Navy**\n* Navy color\n\n---\n\n* **SharpDX.Color.OldLace**\n* OldLace color\n\n---\n\n* **SharpDX.Color.Olive**\n* Olive color\n\n---\n\n* **SharpDX.Color.OliveDrab**\n* OliveDrab color\n\n---\n\n* **SharpDX.Color.Orange**\n* Orange color\n\n---\n\n* **SharpDX.Color.OrangeRed**\n* OrangeRed color\n\n---\n\n* **SharpDX.Color.Orchid**\n* Orchid color\n\n---\n\n* **SharpDX.Color.PaleGoldenrod**\n* PaleGoldenrod color\n\n---\n\n* **SharpDX.Color.PaleGreen**\n* PaleGreen color\n\n---\n\n* **SharpDX.Color.PaleTurquoise**\n* PaleTurquoise color\n\n---\n\n* **SharpDX.Color.PaleVioletRed**\n* PaleVioletRed color\n\n---\n\n* **SharpDX.Color.PapayaWhip**\n* PapayaWhip color\n\n---\n\n* **SharpDX.Color.PeachPuff**\n* PeachPuff color\n\n---\n\n* **SharpDX.Color.Peru**\n* Peru color\n\n---\n\n* **SharpDX.Color.Pink**\n* Pink color\n\n---\n\n* **SharpDX.Color.Plum**\n* Plum color\n\n---\n\n* **SharpDX.Color.PowderBlue**\n* PowderBlue color\n\n---\n\n* **SharpDX.Color.Purple**\n* Purple color\n\n---\n\n* **SharpDX.Color.Red**\n* Red color\n\n---\n\n* **SharpDX.Color.RosyBrown**\n* RosyBrown color\n\n---\n\n* **SharpDX.Color.RoyalBlue**\n* RoyalBlue color\n\n---\n\n* **SharpDX.Color.SaddleBrown**\n* SaddleBrown color\n\n---\n\n* **SharpDX.Color.Salmon**\n* Salmon color\n\n---\n\n* **SharpDX.Color.SandyBrown**\n* SandyBrown color\n\n---\n\n* **SharpDX.Color.SeaGreen**\n* SeaGreen color\n\n---\n\n* **SharpDX.Color.SeaShell**\n* SeaShell color\n\n---\n\n* **SharpDX.Color.Sienna**\n* Sienna color\n\n---\n\n* **SharpDX.Color.Silver**\n* Silver color\n\n---\n\n* **SharpDX.Color.SkyBlue**\n* SkyBlue color\n\n---\n\n* **SharpDX.Color.SlateBlue**\n* SlateBlue color\n\n---\n\n* **SharpDX.Color.SlateGray**\n* SlateGray color\n\n---\n\n* **SharpDX.Color.Snow**\n* Snow color\n\n---\n\n* **SharpDX.Color.SpringGreen**\n* SpringGreen color\n\n---\n\n* **SharpDX.Color.SteelBlue**\n* SteelBlue color\n\n---\n\n* **SharpDX.Color.Tan**\n* Tan color\n\n---\n\n* **SharpDX.Color.Teal**\n* Teal color\n\n---\n\n* **SharpDX.Color.Thistle**\n* Thistle color\n\n---\n\n* **SharpDX.Color.Tomato**\n* Tomato color\n\n---\n\n* **SharpDX.Color.Turquoise**\n* Turquoise color\n\n---\n\n* **SharpDX.Color.Violet**\n* Violet color\n\n---\n\n* **SharpDX.Color.Wheat**\n* Wheat color\n\n---\n\n* **SharpDX.Color.White**\n* White color\n\n---\n\n* **SharpDX.Color.WhiteSmoke**\n* WhiteSmoke color\n\n---\n\n* **SharpDX.Color.Yellow**\n* Yellow color\n\n---\n\n* **SharpDX.Color.YellowGreen**\n* YellowGreen color\n{% /table %}"
  },
  {
    "_id": "b26e9751aa19a2d824df842143bee328ae5862490f7ea1836422786f62a7919b",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Color3",
    "pathName": "sharpdx_color3",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a color in the form of rgb.\n\n## Syntax\n\n**struct Color3**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* **new Color3()**\n* Initializes a new instance of the Color3 struct.\n\n---\n\n* **new Color3(float red, float green, float blue)**\n* Initializes a new instance of the Color3 struct using float values for red, green, blue.\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Black**\n* The Black color (0, 0, 0)\n\n---\n\n* **White**\n* The White color (1, 1, 1)\n\n---\n\n* **Red**\n* The red component of the color\n\n---\n\n* **Green**\n* The green component of the color\n\n---\n\n* **Blue**\n* The blue component of the color\n{% /table %}"
  },
  {
    "_id": "8d0bf3ffe00a48dffa5da0fc0340d4b81cb54924cd19849e3d303eefd30b89c4",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Color4",
    "pathName": "sharpdx_color4",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a color in the form of rgba.\n\n## Syntax\n\nstruct **Color4**\n\n## Constructor\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* **Color4()**\n* Initializes a new instance of the Color4 struct\n\n---\n\n* **Color4**([Color3](sharpdx_color3))\n* Initializes a new instance of the Color4 struct using a **SharpDX.Color3**([Color3](sharpdx_color3)) struct\n\n---\n\n* **Color4**([Color3](sharpdx_color3), float alpha)\n* Initializes a new instance of the Color4 struct using a **SharpDX.Color3**([Color3](sharpdx_color3)) struct with a float for alpha values\n\n---\n\n* **Color4**(float red, float green, float blue, float alpha)\n* Initializes a new instance of the Color4 struct using float values for red, green, blue\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Black**\n* The Black color (0, 0, 0, 1)\n\n---\n\n* **White**\n* The White color (1, 1, 1, 1)\n\n---\n\n* **Red**\n* The red component of the color\n\n---\n\n* **Green**\n* The green component of the color\n\n---\n\n* **Blue**\n* The blue component of the color\n\n---\n\n* **Alpha**\n* The alpha component of the color\n{% /table %}"
  },
  {
    "_id": "59d7e2d4d841defee7cce46216afa939b43d1b05cd9312209127451be8a3c85a",
    "_type": "desktopSdkDoc",
    "title": "DisposeBase",
    "pathName": "sharpdx_disposebase",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nBase class for a **System.IDisposable** class.\n\n{% callout type=\"note\" %}\n\nTip: For NinjaScript development purposes, the following documented SharpDX objects require **Dispose()** after they are used:\n\n* [Brush](sharpdx_direct2d1_brush)\n* [GeometrySink](sharpdx_direct2d1_geometrysink.md)\n* [GradientStopCollection](sharpdx_direct2d1_gradientstopcollection.md)\n* [LinearGradientBrush](sharpdx_direct2d1_lineargradientbrush.md)\n* [PathGeometry](sharpdx_direct2d1_pathgeometry.md)\n* [RadialGradientBrush](sharpdx_direct2d1_radialgradientbrush.md)\n* [SolidColorBrush](sharpdx_direct2d1_solidcolorbrush)\n* [StrokeStyle](sharpdx_direct2d1_strokestyle.md)\n* [TextFormat](sharpdx_directwrite_textformat)\n* [TextLayout](sharpdx_directwrite_textlayout)\n\nThere are other undocumented SharpDX objects which are NOT included in this reference. Please be careful to dispose of any object (SharpDX or otherwise) which implements the I**Disposable** interface - NinjaTrader is NOT guaranteed to dispose of these objects for you!\n\n{% /callout %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* **IsDisposed**\n* Gets a value indicating whether this instance is disposed.\n\n---\n\n* **Dispose()**\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Implements **IDisposable.Dispose()**)\n{% /table %}"
  },
  {
    "_id": "7a70eca3ab9282c799ff206a8000a3ec4c8c44ebe741350f721ecdc1da250532",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Matrix3x2",
    "pathName": "sharpdx_matrix3x2",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a 3x2 mathematical matrix.\n\n{% callout type=\"note\" %}\n\nTip: For more information on Direct2D transforms, please see the [MSDN Direct2D Transforms Overview](https://msdn.microsoft.com/en-us/library/dd756655(v=vs.85).aspx).\n\n{% /callout %}\n\n## Syntax\n\n**struct** Matrix3x2\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* **new Matrix3x2()**\n* Initializes a new instance of the Matrix3x2 struct\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Property/Method\n* Description\n\n---\n\n* **Identity**\n* Gets the identity matrix.\n\n---\n\n* **M11**\n* A float for the first element of the first row.\n\n---\n\n* **M12**\n* A float for the second element of the first row.\n\n---\n\n* **M21**\n* A float for the first element of the second row.\n\n---\n\n* **M22**\n* A float for the second element of the second row.\n\n---\n\n* **M31**\n* A float for the first element of the third row.\n\n---\n\n* **M32**\n* A float for the second element of the third row.\n\n---\n\n* **TranslationVector**\n* A [SharpDX.Vector2](sharpdx_vector2) for the translation component of this matrix.\n\n---\n\n* **Matrix3x2.Rotation(float angle)**\n* Creates a matrix that rotates.\n\n---\n\n* **Matrix3x2.Scaling(float scale)**\n* Creates a matrix that uniformally scales along all three axis.\n\n---\n\n* **Translation([Vector2](sharpdx_vector2) value)**\n* Creates a translation matrix using the specified offsets.\n{% /table %}"
  },
  {
    "_id": "7b03849f8ea95b09c8a200d7c8e37b8eca8cf69693d611a84715e8d842a25013",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.RectangleF",
    "pathName": "sharpdx_rectanglef",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nStructure using similar layout as **System.Drawing.RectangleF**.\n\n{% callout type=\"note\" %}\n\nThis structure is slightly different from **System.Drawing.RectangleF** as it is internally storing Left, Top, Right, Bottom instead of Left, Top, Width, Height. Although automatic casting from a to **System.Drawing.Rectangle** is provided.\n\n{% /callout %}\n\n## Syntax\n\nstruct **RectangleF**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **RectangleF**()\n* Initializes a new instance of the **RectangleF** struct.\n\n---\n\n* new **RectangleF**(float x, float y, float width, float height)\n* Initializes a new instance of the **RectangleF** with specific dimensions.\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Bottom**\n* Gets or sets the bottom.\n\n---\n\n* **Height**\n* Gets or sets the height.\n\n---\n\n* **Left**\n* Gets or sets the left.\n\n---\n\n* **Right**\n* Gets or sets the right.\n\n---\n\n* **Top**\n* Gets or sets the top.\n\n---\n\n* **Width**\n* Gets or sets the width.\n\n---\n\n* **X**\n* Gets or sets the left position.\n\n---\n\n* **Y**\n* Gets or sets the top position.\n{% /table %}"
  },
  {
    "_id": "8d14d4f35d00c42426959a51a536c523681a04f61ab63138e3aab6e86d4d960a",
    "_type": "desktopSdkDoc",
    "title": "sharpdx_size2f",
    "pathName": "sharpdx_size2f",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nStructure using the same layout as [System.Drawing.SizeF](https://msdn.microsoft.com/en-us/library/system.drawing.sizef(v=vs.110).aspx)\n\n## Syntax\n\nstruct **Size2F**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **Size2F**()\n* Initializes a new instance of the **SizeF** struct\n\n---\n\n* new **Size2F**(float width, float height)\n* Initializes a new instance of the **SizeF** struct from the specified dimensions.\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Height**\n* Gets or sets the vertical component of this **SizeF** structure.\n\n---\n\n* **Width**\n* Gets or sets the horizontal component of this **SizeF** structure.\n{% /table %}\n\n```"
  },
  {
    "_id": "b826dd751998729accbc94a3f4cf50c646bf7b2e4e9767eefbc30232610b6aaa",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Vector2",
    "pathName": "sharpdx_vector2",
    "parent": "sharpdx",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a two dimensional mathematical vector.\n\n## Syntax\n\n**struct** Vector2\n\n## Disclaimer\n\n{% callout type=\"note\" %}\n\nThe [SharpDX SDK Reference](sharpdx_sdk_reference) section was compiled from the official [SharpDX Documentation](http://sharpdx.org/) and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN [Direct2D1](https://msdn.microsoft.com/en-us/library/windows/desktop/dd370990.aspx) and [DirectWrite](https://msdn.microsoft.com/en-us/library/windows/desktop/dd368038.aspx) unmanaged API documentation can also be helpful for understanding the DirectX / Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Tip\n\n{% callout type=\"note\" %}\n\nFor NinjaScript Development Purposes, you can use the **NinjaTrader.Gui.DxExtensions.ToVector2()** helper method to convert a **System.Windows.Point** structure to a **SharpDX.Vector2** used for SharpDX rendering.\n\n{% /callout %}\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* **Vector2()**\n* Initializes a new instance of the Vector2 struct.\n\n---\n\n* **Vector2(float x, float y)**\n* Initializes a new instance of the Vector2 struct using float values for x and y components.\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **X**\n* A float for the X component of the vector.\n\n---\n\n* **Y**\n* A float for the Y component of the vector.\n{% /table %}"
  },
  {
    "_id": "49f7f82acd15bebda7bf89b49d164012b07ef80862c4a27ff839d5dea17e9ebf",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Brush.Opacity",
    "pathName": "sharpdx_direct2d1_brush_opacity",
    "parent": "brush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the degree of opacity of this brush.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371176.aspx))\n\n## Property Value\n\nA float value between zero and 1 that indicates the opacity of the brush. This value is a constant multiplier that linearly scales the alpha value of all pixels filled by the brush. The opacity values are clamped in the range 0–1 before they are multiplied together.\n\n## Syntax\n\n**<`solidcolorbrush>**.Opacity"
  },
  {
    "_id": "83ff1d156968cbbc038048126832cb523a8238945fe52c07090b5fa360ee472d",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Brush.Transform",
    "pathName": "sharpdx_direct2d1_brush_transform",
    "parent": "brush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the transform applied to this brush.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371179(v=vs.85).aspx))\n\n## Note\n\n{% callout type=\"note\" %}\n\nWhen the brush transform is the identity matrix, the brush appears in the same coordinate space as the render target in which it is drawn.\n\n{% /callout %}\n\n## Property Value\n\nA **Matrix3x2** transform applied to this brush.\n\n## Syntax\n\n**<`brush`>.Transform**"
  },
  {
    "_id": "13b33c0119fdd88257595af43c4dc3717f97e1840a6c2b4c10d22583d7ea76c6",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.AddArc()",
    "pathName": "sharpdx_direct2d1_geometrysink_addarc",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nAdds a single arc to the path geometry.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd742733.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>**.AddArc(**ArcSegment arc**)\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* arc\n* The **SharpDX.Direct2D1.ArcSegment** segment to add to the figure.\n{% /table %}"
  },
  {
    "_id": "9304a8ae7ffa548f1f91b2dd27d2d3baf31f59b919ec372ee83c582db20edf3b",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.AddLine()",
    "pathName": "sharpdx_direct2d1_geometrysink_addline",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nCreates a line segment between the current point and the specified end point and adds it to the geometry sink.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316604.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>.AddLine(Vector2 vector2)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **vector2**\n* A [SharpDX.Vector2](sharpdx_vector2) which represents the end point of the line to draw.\n{% /table %}"
  },
  {
    "_id": "f86674c32fe71dca488de9c87a1b0a3a020084c0250d882e3d9f8ec58df0134f",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.AddLines()",
    "pathName": "sharpdx_direct2d1_geometrysink_addlines",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nCreates a sequence of lines using the specified points and adds them to the geometry sink.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316925.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>**.AddLines(Vector2[] pointsRef)\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* pointsRef\n* A **SharpDX.Vector2** array of one or more points that describe the lines to draw. A line is drawn from the geometry sink's current point (the end point of the last segment drawn or the location specified by **BeginFigure()** to the first point in the array. If the array contains additional points, a line is drawn from the first point to the second point in the array, from the second point to the third point, and so on.\n{% /table %}"
  },
  {
    "_id": "b6fa848a510c3b5cb740e0eed434a0d9977c3e2b570c2f648df6444ff0cb1d86",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.BeginFigure()",
    "pathName": "sharpdx_direct2d1_geometrysink_beginfigure",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nStarts a new figure at the specified point.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316929.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>.BeginFigure(Vector2 vector2, FigureBegin figureBegin)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **vector2**\n* The **[SharpDX.Vector2](sharpdx_vector2)** at which to begin the new figure.\n\n---\n\n* **figureBegin**\n* The **[SharpDX.Direct2D1.FigureBegin](sharpdx_direct2d1_figurebegin)** which determines whether the new figure should be hollow or filled.\n{% /table %}"
  },
  {
    "_id": "3e69adfde2681c8f5a8fc816556a922d056a2e6cdc1152d72fa52847081c979c",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.Close()",
    "pathName": "sharpdx_direct2d1_geometrysink_close",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nCloses the geometry sink, indicates whether it is in an error state, and resets the sink's error state.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316932.aspx))\n\n{% callout type=\"note\" %}\n\nDo not close the geometry sink while a figure is still in progress; doing so puts the geometry sink in an error state. For the close operation to be successful, there must be one **EndFigure()** call for each call to **BeginFigure()**. After calling this method, the geometry sink might not be usable. Direct2D implementations of this interface do not allow the geometry sink to be modified after it is closed, but other implementations might not impose this restriction.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>**.Close()\n\n## Parameters\n\nThis method does not accept any parameters."
  },
  {
    "_id": "d0bdea586f2a803c1c0c7965e6a98b7853f9c5ed94398f2c47dbb20223f5c800",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.EndFigure()",
    "pathName": "sharpdx_direct2d1_geometrysink_endfigure",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nEnds the current figure; optionally, closes it.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316934.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>.EndFigure(FigureEnd figureEnd)**\n\n## Parameters\n\n{% table %}\n\n---\n\n* figureEnd\n* A **SharpDX.Direct2D1.FigureEnd** value that indicates whether the current figure is closed. If the figure is closed, a line is drawn between the current point and the start point specified by **BeginFigure()**.\n{% /table %}"
  },
  {
    "_id": "8227852280bf9bb833211afe3d94d70cf82c71a5611e5b82c071f0bbc6382b18",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink.SetFillMode()",
    "pathName": "sharpdx_direct2d1_geometrysink_setfillmode",
    "parent": "geometrysink",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nSpecifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316937.aspx))\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`geometrysink>.SetFillMode(FillMode fillMode)**\n\n## Parameters\n\n{% table %}\n\n---\n\n* **fillMode**\n* The [SharpDX.Direct2D1.FillMode](sharpdx_direct2d1_fillmode) used to determine whether a given point is part of the geometry.\n{% /table %}"
  },
  {
    "_id": "41e2ffc0f45058f1c07e6c6e45dd242aba5016578774c9e5f7906756500e05cd",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GradientStopCollection.ColorInterpolationGamma",
    "pathName": "sharpdx_direct2d1_gradientstopcollection_colorinterpolationgamma",
    "parent": "gradientstopcollection",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates the gamma space in which the gradient stops are interpolated.\n\n(See also **unmanaged API documentation**)\n\n{% callout type=\"note\" %}\n\nInterpolating in a linear gamma space (**Gamma.Linear**) can avoid changes in perceived brightness caused by the effect of gamma correction in spaces where the gamma is not 1.0, such as the default sRGB color space, where the gamma is 2.2.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.Direct2D1.Gamma** enum value specifies which gamma is used for interpolation.\n\nPossible values include:\n\n{% table %}\n\n---\n\n* StandardRgb\n* Interpolation is performed in the standard RGB (sRGB) gamma.\n\n---\n\n* Linear\n* Interpolation is performed in the linear-gamma color space.\n{% /table %}\n\n(see also **unmanaged API documentation**)\n\n## Syntax\n\n**<`gradientstopcollection`>.ColorInterpolationGamma**"
  },
  {
    "_id": "4fec543a3b9d1a2bce5bbdb4ba1b2a0dd9797aac2346bfe81aa051d2b0011c0f",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GradientStopCollection.ExtendMode",
    "pathName": "sharpdx_direct2d1_gradientstopcollection_extendmode",
    "parent": "gradientstopcollection",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates the behavior of the gradient outside the normalized gradient range.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316789.aspx))\n\n{% callout type=\"note\" %}\n\nFor a **LinearGradientBrush**, the brush's content area is the gradient axis. For a **RadialGradientBrush**, the brush's content is the area within the gradient ellipse.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.ExtendMode** enum value which determines how a brush paints areas outside of its normal content area.\n\nPossible values include:\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Clamp\n* Repeat the edge pixels of the brush's content for all regions outside the normal content area.\n\n---\n\n* Wrap\n* Repeat the brush's content.\n\n---\n\n* Mirror\n* The same as Wrap, except that alternate tiles of the brush's content are flipped. (The brush's normal content is drawn untransformed.)\n{% /table %}\n\n(see also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368100.aspx))\n\n## Syntax\n\n**<`gradientstopcollection`>.ExtendMode**"
  },
  {
    "_id": "274e1186e384d2134ef07c2dfead4c7214ea2e2d95f1286b53a178157c9d82bc",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GradientStopCollection.GradientStopCount",
    "pathName": "sharpdx_direct2d1_gradientstopcollection_gradientstopcount",
    "parent": "gradientstopcollection",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the number of gradient stops in the collection.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371454.aspx))\n\n{% callout type=\"note\" %}\n\nFor an **LinearGradientBrush**, the brush's content area is the gradient axis. For a **RadialGradientBrush**, the brush's content is the area within the gradient ellipse.\n\n{% /callout %}\n\n## Property Value\n\nAn **int** value representing the number of gradient stops in the collection.\n\n## Syntax\n\n**<`gradientstopcollection>**.GradientStopCount"
  },
  {
    "_id": "2f7315a96eb159748700318b3ad45321afced88267d2b6e3f00bf4f8363a92ff",
    "_type": "desktopSdkDoc",
    "title": "sharpdx_direct2d1_lineargradientbrushproperties",
    "pathName": "sharpdx_direct2d1_lineargradientbrushproperties",
    "parent": "lineargradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains the starting point and endpoint of the gradient axis for an **LinearGradientBrush**.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd368128.aspx))\n\n## Syntax\n\nstruct **LinearGradientBrushProperties**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **LinearGradientBrushProperties**()\n* Initializes a new instance of the **LinearGradientBrushProperties** structure\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **StartPoint**\n* A **SharpDX.Vector2** representing brush's coordinate space, the starting point of the gradient axis.\n\n---\n\n* **EndPoint**\n* A **SharpDX.Vector2** representing the brush's coordinate space, the endpoint of the gradient axis.\n{% /table %}"
  },
  {
    "_id": "04319c7a28c718204708932b8b363ce4d5876e5cd37d0cc3e71ec079cc155cbf",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.LinearGradientBrush.EndPoint",
    "pathName": "sharpdx_direct2d1_lineargradientbrush_endpoint",
    "parent": "lineargradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the ending coordinates of the linear gradient.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371492.aspx))\n\n{% callout type=\"note\" %}\n\nThe start point and end point are described in the brush's space and are mapped to the render target when the brush is used. If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.Vector2** representing the ending two-dimensional coordinates of the linear gradient, in the brush's coordinate space.\n\n## Syntax\n\n**<`lineargradientbrush`>.EndPoint**"
  },
  {
    "_id": "25b636588ad73756f8314981990f71e51c24a030a72458b5a1b2d3288ca5eb7b",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.LinearGradientBrush.GradientStopCollection",
    "pathName": "sharpdx_direct2d1_lineargradientbrush_gradientstopcollection",
    "parent": "lineargradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the GradientStopCollection associated with this linear gradient brush.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371492.aspx))\n\n## Property Value\n\nA **SharpDX.Direct2D1.GradientStopCollection** object associated with this linear gradient brush object. This parameter is passed uninitialized.\n\n## Syntax\n\n**<`lineargradientbrush`>.GradientStopCollection**"
  },
  {
    "_id": "89dc65477d24d7f435f6c5cd51b8cac82adb0ae5540098155085528e5c79da61",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.LinearGradientBrush.StartPoint",
    "pathName": "sharpdx_direct2d1_lineargradientbrush_startpoint",
    "parent": "lineargradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the starting coordinates of the linear gradient.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371497.aspx))\n\n{% callout type=\"note\" %}\n\nThe start point and end point are described in the brush's space and are mapped to the render target when the brush is used. If there is a non-identity brush transform or render target transform, the brush's start point and end point are also transformed.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.Vector2** representing the starting two-dimensional coordinates of the linear gradient, in the brush's coordinate space.\n\n## Syntax\n\n**<`lineargradientbrush`>.StartPoint**"
  },
  {
    "_id": "5a897c63222fbd093b6f01af45479129a4d3a42ea17a5681fcdf77059ee4b934",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.FigureCount",
    "pathName": "sharpdx_direct2d1_pathgeometry_figurecount",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the number of figures in the path geometry.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371515.aspx))\n\n## Property Value\n\nAn int representing the number of figures.\n\n## Syntax\n\n**<`pathgeometry>**.FigureCount"
  },
  {
    "_id": "b958d8da1d4f228f1254267c125591c77a2757122340c7a9b13561755adc05e6",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.FillContainsPoint()",
    "pathName": "sharpdx_direct2d1_pathgeometry_fillcontainspoint",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316687.aspx))\n\n## Method Return Value\n\nA bool value which is true if the area filled by the geometry contains point; otherwise, false.\n\n## Syntax\n\n**<`pathgeometry>**.FillContainsPoint(**Vector2** point)\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **point**\n* The [SharpDX.Vector2](sharpdx_vector2) point to test.\n{% /table %}"
  },
  {
    "_id": "35093f03e89d5e2833fc8533831617081e848ea4c4cc9ba9542b381aab190b31",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.GetBounds()",
    "pathName": "sharpdx_direct2d1_pathgeometry_getbounds",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the bounds of the geometry.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd742751.aspx))\n\n## Method Return Value\n\nA **SharpDX.RectangleF** which contains the bounds of this geometry. If the bounds are empty, this will be a rect where bounds.left > bounds.right.\n\n## Syntax\n\n<pathgeometry`>.GetBounds()\n\n## Parameters\n\nThis method does not accept any parameters."
  },
  {
    "_id": "18285bc4deb54ead74f983396a83ca112c52b26da23e50830a1bbfd4f6de4a04",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.Open()",
    "pathName": "sharpdx_direct2d1_pathgeometry_open",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the geometry sink that is used to populate the path geometry with figures and segments.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371522.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. Because path geometries are immutable and can only be populated once, it is an error to call **Open()** on a path geometry more than once.\n2. Note that the fill mode defaults to Alternate. To set the fill mode, call [SetFillMode()](sharpdx_direct2d1_geometrysink_setfillmode) before the first call to [BeginFigure()](sharpdx_direct2d1_geometrysink_addlines). Failure to do so will put the geometry sink in an error state.\n{% /callout %}\n\n## Method Return Value\n\nA [SharpDX.Direct2D1.GeometrySink](sharpdx_direct2d1_geometrysink.md) which contains the address of a reference to the geometry sink that is used to populate the path geometry with figures and segments.\n\n## Syntax\n\n**<`pathgeometry`>.Open()**\n\n## Parameters\n\nThis method does not accept any parameters."
  },
  {
    "_id": "99299a6cc7ba56bad74f07d98d6fdc207de0943fa7dead5d5be133d3a64b411a",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.SegmentCount",
    "pathName": "sharpdx_direct2d1_pathgeometry_segmentcount",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the number of segments in the path geometry.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371520.aspx))\n\n## Method Return Value\n\nAn int representing the number of segments\n\n## Syntax\n\n**<`pathgeometry>.SegmentCount**"
  },
  {
    "_id": "625d1ce22511beec7f9840f5f058236f04b243041b035c7e0e6530148ea7e4a3",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry.StrokeContainsPoint()",
    "pathName": "sharpdx_direct2d1_pathgeometry_strokecontainspoint",
    "parent": "pathgeometry",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDetermines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316742.aspx))\n\n## Method Return Value\n\nA bool value set to true if the geometry's stroke contains the specified point; otherwise, false.\n\n## Syntax\n\n**<`pathgeometry`>.StrokeContainsPoint(Vector2 point, float strokeWidth)**  \n\n**<`pathgeometry`>.StrokeContainsPoint(Vector2 point, float strokeWidth, StrokeStyle strokeStyle)**  \n**<`pathgeometry`>.StrokeContainsPoint(Vector2 point, float strokeWidth, StrokeStyle strokeStyle, Matrix3x2 transform)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* point\n* The **SharpDX.Vector2** point to test for containment.\n\n---\n\n* strokeStyle\n* The **SharpDX.Direct2D1.StrokeStyle** style of stroke to apply.\n\n---\n\n* strokeWidth\n* The thickness of the stroke to apply.\n\n---\n\n* transform\n* The **SharpDX.Matrix3x2** transform to apply to the stroked geometry.\n{% /table %}"
  },
  {
    "_id": "de4247cd8829df568b94cee71bec06dca408ed696670939ced92f50f68b80e55",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrush.RadiusY",
    "pathName": "sharpdx_direct2d1_radialgradientbrush_radiusy",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}s\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the y-radius of the gradient ellipse.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371544(v=vs.85).aspx))\n\n## Property Value\n\nA float value representing the y-radius of the gradient ellipse. This value is expressed in the brush's coordinate space.\n\n## Syntax\n\n**<`radialgradientbrush>**.RadiusY"
  },
  {
    "_id": "72157b040a8aa2cdd848c85afb312394182bd422dea780ec2bca93ad45a9ae2a",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrushProperties",
    "pathName": "sharpdx_direct2d1_radialgradientbrushproperties",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains the gradient origin offset and the size and position of the gradient ellipse for a **RadialGradientBrush**.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368149.aspx))\n\n## Syntax\n\nstruct **RadialGradientBrushProperties**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **RadialGradientBrushProperties**()\n* Initializes a new instance of the **RadialGradientBrushProperties** structure\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Center**\n* A **SharpDX.Vector2** representing the brush's coordinate space, the center of the gradient ellipse.\n\n---\n\n* **GradientOriginOffset**\n* A **SharpDX.Vector2** representing brush's coordinate space, the offset of the gradient origin relative to the gradient ellipse's center.\n\n---\n\n* **RadiusX**\n* A float in the brush's coordinate space, the x-radius of the gradient ellipse.\n\n---\n\n* **RadiusY**\n* A float in the brush's coordinate space, the y-radius of the gradient ellipse.\n{% /table %}"
  },
  {
    "_id": "5acb3650d4dca2c36726dc79d1dc601c00a70f7a7a9fd23d8901d281ad778025",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrush.Center",
    "pathName": "sharpdx_direct2d1_radialgradientbrush_center",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the center of the gradient ellipse.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371532.aspx))\n\n## Property Value\n\nA **SharpDX.Vector2** representing the center of the gradient ellipse. This value is expressed in the brush's coordinate space.\n\n## Syntax\n\n**<`radialgradientbrush`>.Center**"
  },
  {
    "_id": "91c42e83e68347e7991dc8369706a4222bfe7949a14358712976fe5bbd9f4ca8",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrush.GradientOriginOffset",
    "pathName": "sharpdx_direct2d1_radialgradientbrush_gradientoriginoffset",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the offset of the gradient origin relative to the gradient ellipse's center.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371535.aspx))\n\n## Property Value\n\nA **SharpDX.Vector2** representing the offset of the gradient origin from the center of the gradient ellipse. This value is expressed in the brush's coordinate space.\n\n## Syntax\n\n**<`radialgradientbrush`>.GradientOriginOffset**"
  },
  {
    "_id": "c2d0bfdb086df9ac94605ab53353231cb55e23e87f27ab0566499ffe0444a811",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrush.GradientStopCollection",
    "pathName": "sharpdx_direct2d1_radialgradientbrush_gradientstopcollection",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the **GradientStopCollection** associated with this radial gradient brush object.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371539.aspx))\n\n{% callout type=\"note\" %}\n\nThe **GradientStopCollection** contains an array of [SharpDX.GradientStopCollection](sharpdx_direct2d1_gradientstopcollection.md) structures and additional information, such as the extend mode and the color interpolation mode.\n\n{% /callout %}\n\n## Property Value\n\nThe **SharpDX.GradientStopCollection** object associated with this linear gradient brush object. This parameter is passed uninitialized.\n\n## Syntax\n\n**<`radialgradientbrush`>.GradientStopCollection**"
  },
  {
    "_id": "37353da0c6ca620026f384fa3ae784f015ba454dc272f2dcae2d6b239067a619",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrush.RadiusX",
    "pathName": "sharpdx_direct2d1_radialgradientbrush_radiusx",
    "parent": "radialgradientbrush",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the x-radius of the gradient ellipse.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd371542(v=vs.85).aspx))\n\n## Property Value\n\nA float value representing the x-radius of the gradient ellipse. This value is expressed in the brush's coordinate space.\n\n## Syntax\n\n**<`radialgradientbrush`>.RadiusX**"
  },
  {
    "_id": "cd35574bb2f953f886bb85d0cc192597f012de2271d387b6502ea000f0c141ff",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.AntialiasMode",
    "pathName": "sharpdx_direct2d1_rendertarget_antialiasmode",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves or sets the current antialiasing mode for nontext drawing operations.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316805.aspx))\n\n## Property Value\n\nA **SharpDX.Direct2D1.AntialiasMode** enum value\n\n## Syntax\n\n**RenderTarget.AntialiasMode**"
  },
  {
    "_id": "438b4e51f968b1bbb2cdf9087d27b3a50ee09f410dc9b3af5d9dd8b36ef88356",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawEllipse()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawellipse",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws the outline of the specified ellipse using the specified stroke style.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371886.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawEllipse(Ellipse ellipse, Brush brush)**  \n\n**RenderTarget.DrawEllipse(Ellipse ellipse, Brush brush, float strokeWidth)**  \n\n**RenderTarget.DrawEllipse(Ellipse ellipse, Brush brush, float strokeWidth, StrokeStyle strokeStyle)**\n\n### Parameters\n\n{% table %}\n\n---\n\n* ellipse\n* The **SharpDX.Direct2D1.Ellipse** position and radius of the ellipse to draw, in device-independent pixels.\n\n---\n\n* brush\n* The **SharpDX.Direct2D1.Brush** used to paint the ellipse's outline.\n\n---\n\n* strokeWidth\n* The thickness of the ellipse's stroke. The stroke is centered on the ellipse's outline.\n\n---\n\n* strokeStyle\n* The **SharpDX.Direct2D1.StrokeStyle** to apply to the ellipse's outline, or null to paint a solid stroke.\n{% /table %}"
  },
  {
    "_id": "62a529fe02ea1f4f1c447c36d9032f36885fdf2f09beec2094342b752106caed",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawGeometry()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawgeometry",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws the outline of the specified geometry using the specified stroke style.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371890.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawGeometry(Geometry geometry, Brush brush)**  \n\n**RenderTarget.DrawGeometry(Geometry geometry, Brush brush, float strokeWidth)**  \n\n**RenderTarget.DrawGeometry(Geometry geometry, Brush brush, float strokeWidth, StrokeStyle strokeStyle)**\n\n### Parameters\n\n{% table %}\n\n---\n\n* **brush**\n* An int which represents the method input\n\n---\n\n* **geometry**\n* The [SharpDX.Direct2D1.Geometry](sharpdx.direct2d1.pathgeometry) to draw\n\n---\n\n* **strokeStyle**\n* The [SharpDX.Direct2D1.StrokeStyle](sharpdx.direct2d1.strokestyle) to apply to the geometry's outline, or null to paint a solid stroke.\n\n---\n\n* **strokeWidth**\n* The thickness of the geometry's stroke. The stroke is centered on the geometry's outline.\n{% /table %}"
  },
  {
    "_id": "2bc7d8d67a075f4252c95906e2540e02d692b28f117843018f613f26a48c84d1",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawLine()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawline",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws a line between the specified points.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371895.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawLine(Vector2 point0, Vector2 point1, Brush brush)**  \n**RenderTarget.DrawLine(Vector2 point0, Vector2 point1, Brush brush, float strokeWidth)**  \n**RenderTarget.DrawLine(Vector2 point0, Vector2 point1, Brush brush, float strokeWidth, StrokeStyle strokeStyle)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **brush**\n* The **SharpDX.Direct2D1.Brush** brush used to paint the line's stroke.\n\n---\n\n* **point0**\n* A **SharpDX.Vector2** which determines the start point of the line, in device-independent pixels.\n\n---\n\n* **point1**\n* A **SharpDX.Vector2** which determines the end point of the line, in device-independent pixels.\n\n---\n\n* **strokeStyle**\n* The **SharpDX.Direct2D1.StrokeStyle** to paint, or null to paint a solid line.\n\n---\n\n* **strokeWidth**\n* A value greater than or equal to 0.0f that specifies the width of the stroke. If this parameter isn't specified, it defaults to 1.0f. The stroke is centered on the line.\n{% /table %}"
  },
  {
    "_id": "099c5cdef99b13079301d1f4ca30f8521c88241aba1c353f34eafbd0254d608d",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawRectangle()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawrectangle",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws the outline of a rectangle that has the specified dimensions and stroke style.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371902.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawRectangle(RectangleF rect, Brush brush)**  \n\n**RenderTarget.DrawRectangle(RectangleF rect, Brush brush, float strokeWidth)**  \n\n**RenderTarget.DrawRectangle(RectangleF rect, Brush brush, float strokeWidth, StrokeStyle strokeStyle)**\n\n## Parameters\n\n{% table %}\n\n---\n\n* brush\n* The **SharpDX.Direct2D1.Brush** used to paint the rectangle's stroke.\n\n---\n\n* rect\n* The **SharpDX.RectangleF** which determines the dimensions of the rectangle to draw, in device-independent pixels.\n\n---\n\n* strokeStyle\n* The **SharpDX.Direct2D1.StrokeStyle** used to paint, or null to paint a solid stroke.\n\n---\n\n* strokeWidth\n* A value greater than or equal to 0.0f that specifies the width of the rectangle's stroke. The stroke is centered on the rectangle's outline.\n{% /table %}"
  },
  {
    "_id": "938149fed9d39a1e2dc309ec134965c8ac865b03e4d823b9a468fe33aef1efa2",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawText()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawtext",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws the specified text using the format information provided by an **SharpDX.DirectWrite.TextFormat** object.\n\n(See also **unmanaged API documentation**)\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawText(string text, TextFormat textFormat, RectangleF layoutRect, Brush defaultForegroundBrush)**\n\n**RenderTarget.DrawText(string text, TextFormat textFormat, RectangleF layoutRect, Brush defaultForegroundBrush, DrawTextOptions options)**  \n\n**RenderTarget.DrawText(string text, TextFormat textFormat, RectangleF layoutRect, Brush defaultForegroundBrush, DrawTextOptions options, MeasuringMode measuringMode)**  \n\n**RenderTarget.DrawText(string text, int stringLength, TextFormat textFormat, RectangleF layoutRect, Brush defaultForegroundBrush, RenderTarget.DrawTextOptions options, MeasuringMode measuringMode)**\n\n### Parameters\n\n{% table %}\n\n* Property\n\n* Description\n\n---\n\n* **defaultForegroundBrush**\n\n* The **SharpDX.Direct2D1.Brush** used to paint the text.\n\n---\n\n* **layoutRect**\n\n* A **SharpDX.RectangleF** which determines size and position of the area in which the text is drawn.\n\n---\n\n* **measuringMode**\n\n* A **SharpDX.Direct2D1.MeasuringMode** value that indicates how glyph metrics are used to measure text when it is formatted. The default value is **DWRITE_MEASURING_MODE_NATURAL**.\n\n---\n\n* **options**\n\n* A **SharpDX.Direct2D1.DrawTextOptions** value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is **None**, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.\n\n---\n\n* **stringLength**\n\n* An **int** value which represents the number of characters in string.\n\n---\n\n* **text**\n\n* A string reference to an array of Unicode characters to draw.\n\n---\n\n* **textFormat**\n\n* A **SharpDX.DirectWrite.TextFormat** object that describes formatting details of the text to draw, such as the font, the font size, and flow direction.\n\n---\n\n{% /table %}"
  },
  {
    "_id": "6f28791b64da90a13a1b0af8049f4cce01eed4a00cf5d4a254a622a61e4ccd5a",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.DrawTextLayout()",
    "pathName": "sharpdx_direct2d1_rendertarget_drawtextlayout",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDraws the formatted text described by the specified **SharpDX.DirectWrite.TextLayout** object.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371913.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. When drawing the same text repeatedly, using the **DrawTextLayout()** method is more efficient than using the **DrawText()** method because the text doesn't need to be formatted and the layout processed with each call.\n2. This method doesn't return an error code if it fails.\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.DrawTextLayout(Vector2 origin, TextLayout textLayout, Brush defaultForegroundBrush)**  \n\n**RenderTarget.DrawTextLayout(Vector2 origin, TextLayout textLayout, Brush defaultForegroundBrush, DrawTextOptions options)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **defaultForegroundBrush**\n* The **SharpDX.Direct2D1.Brush** used to paint any text in textLayout that does not already have a brush associated with it as a drawing effect (specified by the SetDrawingEffect method).\n\n---\n\n* **options**\n* A **SharpDX.Direct2D1.DrawTextOptions** value that indicates whether the text should be snapped to pixel boundaries and whether the text should be clipped to the layout rectangle. The default value is None, which indicates that text should be snapped to pixel boundaries and it should not be clipped to the layout rectangle.\n\n---\n\n* **origin**\n* A **SharpDX.Vector2** described in device-independent pixels, at which the upper-left corner of the text described by textLayout is drawn.\n\n---\n\n* **textLayout**\n* A **SharpDX.DirectWrite.TextLayout** representing the formatted text to draw. Any drawing effects that do not inherit from Resource are ignored. If there are drawing effects that inherit from **ID2D1Resource** that are not brushes, this method fails and the render target is put in an error state.\n{% /table %}"
  },
  {
    "_id": "5266f85577f229c455ddac40b787227ce5b3b434bd9edf4199cb61f2d62e6e62",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.FillEllipse()",
    "pathName": "sharpdx_direct2d1_rendertarget_fillellipse",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints the interior of the specified ellipse.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371928.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.FillEllipse**(**Ellipse ellipse**, **Brush brush**)\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **brush**\n* A **SharpDX.Direct2D1.Brush** used to paint the interior of the ellipse.\n\n---\n\n* **ellipse**\n* A **SharpDX.Direct2D1.Ellipse** which describes the position and radius, in device-independent pixels, of the ellipse to paint.\n{% /table %}"
  },
  {
    "_id": "940cbef1abde4be537b01b85edc9753b1d2db58cb383a9878ac2d8adae3d0e24",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.FillGeometry()",
    "pathName": "sharpdx_direct2d1_rendertarget_fillgeometry",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints the interior of the specified geometry.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371933.aspx))\n\n{% callout type=\"note\" %}\n\n1. If the **opacityBrush** parameter is not null, the alpha value of each pixel of the mapped **opacityBrush** is used to determine the resulting opacity of each corresponding pixel of the geometry. Only the alpha value of each color in the brush is used for this processing; all other color information is ignored. The alpha value specified by the brush is multiplied by the alpha value of the geometry after the geometry has been painted by brush.\n2. This method doesn't return an error code if it fails.\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.FillGeometry(Geometry geometry, Brush brush)**\n\n**RenderTarget.FillGeometry(Geometry geometry, Brush brush, Brush opacityBrush)**\n\n## Parameters\n\n{% table %}\n\n---\n\n* **brush**\n* The [SharpDX.Direct2D1.Brush](sharpdx.direct2d1.brush) used to paint the geometry's interior.\n\n---\n\n* **geometry**\n* The [SharpDX.Direct2D1.Geometry](sharpdx.direct2d1.pathgeometry) to paint.\n\n---\n\n* **opacityBrush**\n* The [SharpDX.Direct2D1.Brush](sharpdx.direct2d1.brush) opacity mask to apply to the geometry, or null for no opacity mask. For more information, see the note section above.\n{% /table %}"
  },
  {
    "_id": "d68c34454390be4663c5586fa0c3d80944a08b7e47c50654e3f5c1e6a51d7c91",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.FillRectangle()",
    "pathName": "sharpdx_direct2d1_rendertarget_fillrectangle",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints the interior of the specified rectangle.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371954.aspx))\n\n{% callout type=\"note\" %}\n\nThis method doesn't return an error code if it fails.\n\n{% /callout %}\n\n## Method Return Value\n\nThis method does not return a value.\n\n## Syntax\n\n**RenderTarget.FillRectangle(RectangleF rect, Brush brush)**\n\n## Parameters\n\n{% table %}\n\n* Parameter\n* Description\n\n---\n\n* **brush**\n* The **SharpDX.Direct2D1.Brush** used to paint the rectangle's interior.\n\n---\n\n* **rect**\n* A **SharpDX.RectangleF** describing the dimension of the rectangle to paint, in device-independent pixels.\n{% /table %}"
  },
  {
    "_id": "037bd037565b437d1022d0d3b6ab5b3f86d4a5e059f9a84786d54c712f545d90",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget.Transform",
    "pathName": "sharpdx_direct2d1_rendertarget_transform",
    "parent": "rendertarget",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the current transform of the render target.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316845.aspx))\n\n## Property Value\n\nA **SharpDX.Matrix3x2**\n\n## Syntax\n\n**RenderTarget.Transform**"
  },
  {
    "_id": "ad082b0175804466905c862f09853ae1f97e87b605891f082e1981302eee74ef",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.AntialiasMode",
    "pathName": "sharpdx_direct2d1_antialiasmode",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nSpecifies how the edges of nontext primitives are rendered.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368061.aspx))\n\n## Syntax\n\nenum **AntialiasMode**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* **PerPrimitive**\n* Edges are antialiased using the Direct2D per-primitive method of high-quality antialiasing.\n\n---\n\n* **Aliased**\n* Objects are aliased in most cases. Objects are antialiased only when they are drawn to a render target created by the CreateDxgiSurfaceRenderTarget method and Direct3D multisampling has been enabled on the backing DirectX Graphics Infrastructure (DXGI) surface.\n{% /table %}"
  },
  {
    "_id": "d95634a31f34ba44a6d62c67f1bcd41b015fc0bbaa767b43398ae4c85edfcf05",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.ArcSegment",
    "pathName": "sharpdx_direct2d1_arcsegment",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes an elliptical arc between two points.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368065.aspx))\n\n## Syntax\n\nstruct **ArcSegment**\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Point**\n* The end point of the arc.\n\n---\n\n* **Size**\n* The x-radius and y-radius of the arc.\n\n---\n\n* **RotationAngle**\n* A value that specifies how many degrees in the clockwise direction the ellipse is rotated relative to the current coordinate system.\n\n---\n\n* **SweepDirection**\n* A [SweepDirection](sharpdx_direct2d1_sweepdirection) enum value that specifies whether the arc sweep is clockwise or counterclockwise.\n\n---\n\n* **ArcSize**\n* A value that specifies whether the given arc is larger than 180 degrees.\n{% /table %}"
  },
  {
    "_id": "99408ec3bbd97d5b987043d83d4260c1603f95003f8aced29b8fbda70d7bed8b",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.ArcSize",
    "pathName": "sharpdx_direct2d1_arcsize",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nSpecifies whether an arc should be greater than 180 degrees.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368068.aspx))\n\n## Syntax\n\nenum **ArcSize**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* **Small**\n* An arc's sweep should be 180 degrees or less.\n\n---\n\n* **Large**\n* An arc's sweep should be 180 degrees or greater.\n{% /table %}"
  },
  {
    "_id": "5251f7c7167b86634abd505b1c338fed6c7a09e8214d023a18f686bc95e2910c",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Brush",
    "pathName": "sharpdx_direct2d1_brush",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDefines an object that paints an area. Interfaces that derive from **Brush** describe how the area is painted.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371173.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. An **Brush** is a device-dependent resource: your application should create brushes after it initializes the render target with which the brush will be used, and recreate the brush whenever the render target needs recreated. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n2. Brush space in Direct2D is specified differently than in XPS and Windows Presentation Foundation (WPF). In Direct2D, brush space is not relative to the object being drawn, but rather is the current coordinate system of the render target, transformed by the brush transform, if present. To paint an object as it would be painted by a WPF brush, you must translate the brush space origin to the upper-left corner of the object's bounding box, and then scale the brush space so that the base tile fills the bounding box of the object.\n3. For convenience, Direct2D provides the [BrushProperties](sharpdx_direct2d1_brushproperties) function for creating new a **Brush**.\n{% /callout %}\n\n## Syntax\n\nclass **Brush**\n\n{% callout type=\"note\" %}\n\nTips:\n\n1. For NinjaScript Development purposes, you can use the [NinjaTrader.Gui.DxExtensions.ToDxBrush()](dxextensions_todxbrush) helper method to convert a **System.Windows.Media.Brush** to a **SharpDX.Direct2D1.Brush**. General information on Direct2D brushes can be found on the [MSDN Direct2D Brushes Overview](https://msdn.microsoft.com/en-us/library/dd756651(v=vs.85).aspx).\n{% /callout %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [Dispose()](sharpdx_disposebase_dispose)\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n\n---\n\n* [IsDisposed](sharpdx_disposebase_isdisposed.md)\n* Gets a value indicating whether this instance is disposed. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n\n---\n\n* [Opacity](sharpdx_direct2d1_brush_opacity)\n* Gets or sets the degree of opacity of this brush.\n\n---\n\n* [Transform](sharpdx_direct2d1_brush_transform)\n* Gets or sets the transform applied to this brush.\n{% /table %}"
  },
  {
    "_id": "1bb537be1fab961c1c13bafa58e8d82d8936a200dfbc758a225b2810e35d1015",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.BrushProperties",
    "pathName": "sharpdx_direct2d1_brushproperties",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes the opacity and transformation of a brush.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368077.aspx))\n\n## Syntax\n\nstruct **BrushProperties**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **BrushProperties**()\n* Initializes a new instance of the **BrushProperties** structure\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Opacity**\n* A value between 0.0f and 1.0f, inclusive, that specifies the degree of opacity of the brush.\n\n---\n\n* **Transform**\n* The transformation that is applied to the brush.\n{% /table %}"
  },
  {
    "_id": "60271938091eec0d0772c96767cff542a544c9b568116eed7431d4541867a6ee",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.CapStyle",
    "pathName": "sharpdx_direct2d1_capstyle",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes the shape at the end of a line or segment.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368079.aspx))\n\n## Syntax\n\nenum **CapStyle**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* **Flat**\n* A cap that does not extend past the last point of the line. Comparable to cap used for objects other than lines.\n\n---\n\n* **Square**\n* Half of a square that has a length equal to the line thickness.\n\n---\n\n* **Round**\n* A semicircle that has a diameter equal to the line thickness.\n\n---\n\n* **Triangle**\n* An isosceles right triangle whose hypotenuse is equal in length to the thickness of the line.\n{% /table %}"
  },
  {
    "_id": "fb0e7b894a298672a3dab7fdeae9c70569d742550f3ac358a5029ba7c5a84505",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.DrawTextOptions",
    "pathName": "sharpdx_direct2d1_drawtextoptions",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nSpecifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. This enumeration allows a bitwise combination of its member values.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368095.aspx))\n\n## Syntax\n\nenum **DrawTextOptions**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* **NoSnap**\n* Text is not vertically snapped to pixel boundaries. This setting is recommended for text that is being animated.\n\n---\n\n* **Clip**\n* Text is clipped to the layout rectangle.\n\n---\n\n* **None**\n* Text is vertically snapped to pixel boundaries and is not clipped to the layout rectangle.\n{% /table %}"
  },
  {
    "_id": "e6157acb4a77ed12598d7068c75e297bb04db7bcbd9c7598a9bdca88b449f9fa",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.Ellipse",
    "pathName": "sharpdx_direct2d1_ellipse",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains the center point, x-radius, and y-radius of an ellipse.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368097.aspx))\n\n## Syntax\n\nstruct **Ellipse**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **Ellipse**()\n* Initializes a new instance of the **Ellipse** struct\n\n---\n\n* new **Ellipse**(**Vector2** center, float radiusX, float radiusY)\n* Initializes a new instance of the **Ellipse** struct with specific dimensions\n{% /table %}\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Point**\n* A **SharpDX.Vector** for the center point of the ellipse\n\n---\n\n* **RadiusX**\n* A float for the X-radius of the ellipse\n\n---\n\n* **RadiusY**\n* A float for the Y-radius of the ellipse\n{% /table %}"
  },
  {
    "_id": "f3181de4e9b11ba403d0ff00e86ac455d0c77279a6cd836101efd6789f963201",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.FigureBegin",
    "pathName": "sharpdx_direct2d1_figurebegin",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates whether a specific **GeometrySink** figure is filled or hollow.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368106.aspx))\n\n## Syntax\n\nenum **FigureBegin**\n\n## Enumerators\n\n{% table %}\n\n---\n\n* Filled \n* Indicates the figure will be filled by the **FillGeometry()** method\n---\n* Hollow \n* Indicates the figure will not be filled by the **FillGeometry()** method and will only consist of an outline. Moreover, the bounds of a hollow figure are zero. **FigureBegin.Hollow** should be used for stroking, or for other geometry operations. \n---\n\n{% /table %}"
  },
  {
    "_id": "36e5238d123e773bdcf1bd4e8817720984b1b21c02b1eb5154341e63266c4fa5",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.FigureEnd",
    "pathName": "sharpdx_direct2d1_figureend",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates whether a specific **GeometrySink** figure is open or closed (See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368108.aspx))\n\n## Syntax\n\n**enum FigureEnd**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* Open\n* The figure is open.\n\n---\n\n* Closed\n* The figure is closed.\n{% /table %}"
  },
  {
    "_id": "973fb62b3ae597bc1f1c36dd2b2ea5b4e2edf61597c8b7081cc2c0ccdc3f0df3",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.FillMode",
    "pathName": "sharpdx_direct2d1_fillmode",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nSpecifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368110.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n* Use the FillMode enumeration when creating or modifying the fill mode of a **GeometrySink** with the **SetFillMode()** method.\n* Direct2D fills the interior of a path by using one of the two fill modes specified by this enumeration: Alternate (alternate) or Winding (winding). Because the modes determine how to fill the interior of a closed shape, all shapes are treated as closed when they are filled. If there is a gap in a segment in a shape, draw an imaginary line to close it.\n{% /callout %}\n\n## Syntax\n\nenum **FillMode**\n\n## Enumerators\n\n{% table %}\n\n* Enumerator\n* Description\n\n---\n\n* Alternate\n* Determines whether a point is in the fill region by drawing a ray from that point to infinity in any direction, and then counting the number of path segments within the given shape that the ray crosses. If this number is odd, the point is in the fill region; if even, the point is outside the fill region.\n\n---\n\n* Winding\n* Determines whether a point is in the fill region of the path by drawing a ray from that point to infinity in any direction, and then examining the places where a segment of the shape crosses the ray. Starting with a count of zero, add one each time a segment crosses the ray from left to right and subtract one each time a path segment crosses the ray from right to left, as long as left and right are seen from the perspective of the ray. After counting the crossings, if the result is zero, then the point is outside the path. Otherwise, it is inside the path.\n{% /table %}"
  },
  {
    "_id": "845ba8dad0b0186a0f2e00b720e822623045f72779a10ca6502200b05f537199",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GeometrySink",
    "pathName": "sharpdx_direct2d1_geometrysink",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316592.aspx))\n\n## Notes\n\n{% callout type=\"note\" %}\n\n1. To create a GeometrySink, describe a **PathGeometry** and retrieve the object using the **PathGeometry.Open()** method.\n2. A geometry sink consists of one or more figures. Each figure is made up of one or more line, curve, or arc segments. To create a figure, call the **BeginFigure** method, specify the figure's start point, and then use its Add methods (such as **AddLine**) to add segments. When you are finished adding segments, call the **EndFigure** method. You can repeat this sequence to create additional figures. When you are finished creating figures, call the **Close** method.\n{% /callout %}\n\n## Syntax\n\ninterface **GeometrySink**\n\n## Methods\n\n{% table %}\n\n* Method\n* Description\n\n---\n\n* **AddArc()**\n* Adds a single arc to the path geometry.\n\n---\n\n* **AddLine()**\n* Creates a line segment between the current point and the specified end point and adds it to the geometry sink.\n\n---\n\n* **AddLines()**\n* Creates a sequence of lines using the specified points and adds them to the geometry sink.\n\n---\n\n* **BeginFigure()**\n* Starts a new figure at the specified point.\n\n---\n\n* **Close()**\n* Closes the geometry sink, indicates whether it is in an error state, and resets the sink's error state.\n\n---\n\n* **Dispose()**\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from **SharpDX.DisposeBase**.)\n\n---\n\n* **EndFigure()**\n* Ends the current figure; optionally, closes it.\n\n---\n\n* **SetFillMode()**\n* Specifies the method used to determine which points are inside the geometry described by this geometry sink and which points are outside.\n{% /table %}"
  },
  {
    "_id": "4e844fe3713f6a8fcf4a276eb8c93532b9e0af6df038c6b2dcda1d82116f8781",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GradientStop",
    "pathName": "sharpdx_direct2d1_gradientstop",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains the position and color of a gradient stop.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368119.aspx))\n\n## Notes\n\n{% callout type=\"note\" %}\n\n1. Gradient stops can be specified in any order if they are at different positions. Two stops may share a position. In this case, the first stop specified is treated as the \"low\" stop (nearer 0.0f) and subsequent stops are treated as \"higher\" (nearer 1.0f). This behavior is useful if a caller wants an instant transition in the middle of a stop.\n2. Typically, there are at least two points in a collection, although creation with only one stop is permitted. For example, one point is at position 0.0f, another point is at position 1.0f, and additional points are distributed in the [0, 1] range. Where the gradient progression is beyond the range of [0, 1], the stops are stored, but may affect the gradient.\n3. When drawn, the [0, 1] range of positions is mapped to the brush, in a brush-dependent way. For details, see LinearGradientBrush and RadialGradientBrush.\n4. Gradient stops with a position outside the [0, 1] range cannot be seen explicitly, but they can still affect the colors produced in the [0, 1] range. For example, a two-stop gradient 0.0f, Black}, {2.0f, White is indistinguishable visually from 0.0f, Black}, {1.0f, Mid-level gray. Also, the colors are clamped before interpolation.\n{% /callout %}\n\n## Syntax\n\nstruct **GradientStop**\n\n## Properties\n\n{% table %}\n\n* Position\n* Color\n\n---\n\n* A float value that indicates the relative position of the gradient stop in the brush. This value must be in the [0.0f, 1.0f] range if the gradient stop is to be seen explicitly.\n* The [SharpDX.Color](sharpdx_color) of the gradient stop.\n{% /table %}"
  },
  {
    "_id": "e7b06cc608a76ace50d96c76d8248f8dcbe1445cb56c23781b47b31258d4ddfe",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.GradientStopCollection",
    "pathName": "sharpdx_direct2d1_gradientstopcollection",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes an elliptical arc between two points.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368065.aspx))\n\n{% callout type=\"note\" %}\n\nA gradient stop collection is a device-dependent resource: your application should create gradient stop collections after it initializes the render target with which the gradient stop collection will be used, and recreate the gradient stop collection whenever the render target needs recreated. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n\n{% /callout %}\n\n## Syntax\n\nclass **GradientStopCollection**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **GradientStopCollection**([**RenderTarget**](sharpdx_direct2d1_rendertarget.md) renderTarget, [**GradientStop**](sharpdx_direct2d1_gradientstop)[] gradientStops) | Creates an **GradientStopCollection** from the specified gradient stops, a **Gamma.StandardRgb**, and **ExtendMode.Clamp**\n* new **GradientStopCollection**([**RenderTarget**](sharpdx_direct2d1_rendertarget.md) renderTarget, [**GradientStop**](sharpdx_direct2d1_gradientstop)[] gradientStops, [**ExtendMode**](sharpdx_direct2d1_gradientstopcollection_extendmode) extendMode) | Creates an **GradientStopCollection** from the specified gradient stops, color **Gamma.StandardRgb**, and extend mode\n* new **GradientStopCollection**([**RenderTarget**](sharpdx_direct2d1_rendertarget.md) renderTarget, [**GradientStop**](sharpdx_direct2d1_gradientstop)[] gradientStops, [**Gamma**](sharpdx_direct2d1_gradientstopcollection_colorinterpolationgamma) colorInterpolationGamma) | Creates an **GradientStopCollection** from the specified gradient stops, color interpolation gamma, and **ExtendMode.Clamp**\n* new **GradientStopCollection**([**RenderTarget**](sharpdx_direct2d1_rendertarget.md) renderTarget, [**GradientStop**](sharpdx_direct2d1_gradientstop)[] gradientStops, [**Gamma**](sharpdx_direct2d1_gradientstopcollection_colorinterpolationgamma) colorInterpolationGamma, [**ExtendMode**](sharpdx_direct2d1_gradientstopcollection_extendmode) extendMode) | Creates an **GradientStopCollection** from the specified gradient stops, color interpolation gamma, and extend mode\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Property/Method\n* Description\n\n---\n\n* [**ColorInterpolationGamma**](sharpdx_direct2d1_gradientstopcollection_colorinterpolationgamma) | Indicates the gamma space in which the gradient stops are interpolated\n* [**Dispose()**](sharpdx_disposebase_dispose) | Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [**SharpDX.DisposeBase**](sharpdx_disposebase.md).)\n* [**ExtendMode**](sharpdx_direct2d1_gradientstopcollection_extendmode) | Indicates the behavior of the gradient outside the normalized gradient range\n* [**GradientStopCount**](sharpdx_direct2d1_gradientstopcollection_gradientstopcount.md) | Retrieves the number of gradient stops in the collection\n* [**IsDisposed**](sharpdx_disposebase_isdisposed.md) | Gets a value indicating whether this instance is disposed. (Inherited from [**SharpDX.DisposeBase**](sharpdx_disposebase.md).)\n{% /table %}"
  },
  {
    "_id": "40c98802bc6387b47ef10582d9e4e237e700463033b16634e191404fb8843bd1",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.LinearGradientBrush",
    "pathName": "sharpdx_direct2d1_lineargradientbrush",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints an area with a linear gradient.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371488.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. A **LinearGradientBrush** paints an area with a linear gradient along a line between the brush start point and end point. The gradient, defined by the brush [GradientStopCollection](sharpdx_direct2d1_lineargradientbrush_gradientstopcollection), is extruded perpendicular to this line, and then transformed by a brush [transform](sharpdx_direct2d1_brush_transform) (if specified).\n2. The start point and end point are described in the brush space and are mapped to the render target when the brush is used. Note the starting and ending coordinates are absolute, not relative to the render target size. A value of (0, 0) maps to the upper-left corner of the render target, while a value of (1, 1) maps one pixel diagonally away from (0, 0). If there is a nonidentity [brush transform](sharpdx_direct2d1_brush_transform) or [render target transform](sharpdx_direct2d1_rendertarget_transform), the brush [start point](sharpdx_direct2d1_lineargradientbrush_startpoint) and [end point](sharpdx_direct2d1_lineargradientbrush_endpoint) are also transformed.\n3. It is possible to specify a gradient axis that does not completely fill the area that is being painted. When this occurs, the ExtendMode, specified by the [GradientStopCollection](sharpdx_direct2d1_lineargradientbrush_gradientstopcollection), determines how the remaining area is painted.\n4. The **LinearGradientBrush** can only be used with the [render target](sharpdx_direct2d1_rendertarget.md) that created it or with the compatible targets for that render target.\n5. A **LinearGradientBrush** is a device-dependent resource: your application should create linear gradient brushes after it initializes the render target with which the brushes will be used, and recreate the brushes whenever the render target needs recreated. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n6. For convenience, Direct2D provides the [RadialGradientBrushProperties](sharpdx_direct2d1_lineargradientbrushproperties) function for creating a new **LinearGradientBrush**.\n{% /callout %}\n\n## Syntax\n\nclass **SolidColorBrush**\n\n{% callout type=\"note\" %}\n\nTips:\n\n1. For NinjaScript Development purposes, you can use the [NinjaTrader.Gui.DxExtensions.ToDxBrush()](dxextensions_todxbrush) helper method to convert a **System.Windows.Media.LinearGradientBrush** to a **SharpDX.Direct2D1.LinearGradientBrush**.\n2. General information on Direct2D brushes can be found on the [MSDN Direct2D Brushes Overview](https://msdn.microsoft.com/en-us/library/dd756651(v=vs.85).aspx).\n{% /callout %}\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **LinearGradientBrush**([RenderTarget](sharpdx_direct2d1_rendertarget.md) renderTarget, [LinearGradientBrushProperties](sharpdx_direct2d1_lineargradientbrushproperties) linearGradientBrushProperties, [GradientStopCollection](sharpdx_direct2d1_gradientstopcollection.md) gradientStopCollection)\n* Creates a **LinearGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n\n---\n\n* new **LinearGradientBrush**([RenderTarget](sharpdx_direct2d1_rendertarget.md) renderTarget, [LinearGradientBrushProperties](sharpdx_direct2d1_lineargradientbrushproperties) linearGradientBrushProperties, Nullable&lt;[BrushProperties](sharpdx_direct2d1_brushproperties)&gt; brushProperties, [GradientStopCollection](sharpdx_direct2d1_gradientstopcollection.md) gradientStopCollection)\n* Creates a **LinearGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [Dispose()](sharpdx_disposebase_dispose)\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md)).\n\n---\n\n* [EndPoint](sharpdx_direct2d1_lineargradientbrush_endpoint)\n* Retrieves or sets the ending coordinates of the linear gradient.\n\n---\n\n* [GradientStopCollection](sharpdx_direct2d1_lineargradientbrush_gradientstopcollection)\n* Retrieves the GradientStopCollection associated with this linear gradient brush.\n\n---\n\n* [IsDisposed](sharpdx_disposebase_isdisposed.md)\n* Gets a value indicating whether this instance is disposed. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md)).\n\n---\n\n* [Opacity](sharpdx_direct2d1_brush_opacity)\n* Gets or sets the degree of opacity of this brush. (Inherited from [Brush](sharpdx_direct2d1_brush)).\n\n---\n\n* [StartPoint](sharpdx_direct2d1_lineargradientbrush_startpoint)\n* Retrieves or sets the starting coordinates of the linear gradient.\n\n---\n\n* [Transform](sharpdx_direct2d1_brush_transform)\n* Gets or sets the transform applied to this brush. (Inherited from [Brush](sharpdx_direct2d1_brush)).\n{% /table %}"
  },
  {
    "_id": "d39bff449eb8c62b34e3914ef36eab025382528875ace57ff9433289a877b98e",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.MeasuringMode",
    "pathName": "sharpdx_direct2d1_measuringmode",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nIndicates the measuring method used for **text layout**.\n\n(See also **unmanaged API documentation**)\n\n## Syntax\n\nenum **MeasuringMode**\n\n## Enumerators\n\n{% table %}\n\n---\n\n* **Natural**\n* Specifies that text is measured using glyph ideal metrics whose values are independent to the current display resolution.\n\n---\n\n* **GdiClassic**\n* Specifies that text is measured using glyph display-compatible metrics whose values tuned for the current display resolution.\n\n---\n\n* **GdiNatural**\n* Specifies that text is measured using the same glyph display metrics as text measured by GDI using a font created with **CLEARTYPE_NATURAL_QUALITY**.\n{% /table %}"
  },
  {
    "_id": "52639131d8bd6aaa94dc734f2f775cc86549c80df7f1a5576162a21e856db495",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.PathGeometry",
    "pathName": "sharpdx_direct2d1_pathgeometry",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents a complex shape that may be composed of arcs, curves, and lines.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371512.aspx))\n\n{% callout type=\"note\" %}\n\n* A PathGeometry object enables you to describe a geometric path. To describe a PathGeometry object's path, use the object's **Open** method to retrieve an **GeometrySink**. Use the sink to populate the path geometry with figures and segments.\n* PathGeometry objects are device-independent resources created by Factory. In general, you should create geometries once and retain them for the life of the application, or until they need to be modified. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n{% /callout %}\n\n## Syntax\n\nclass **PathGeometry**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **PathGeometry**(**Factory** factory)\n* Creates an empty PathGeometry.\n{% /table %}\n\n{% table %}\n\n* Tips\n\n---\n\n* 1. For NinjaScript development purposes, when creating a **PathGeometry** object you should use the **NinjaTrader.Core.Globals.D2DFactory** property.\n* 2. General information Direct2D Path Geometries can be found on the [MSDN Path Geometries Overview](https://msdn.microsoft.com/en-us/library/ee264309(v=vs.85).aspx).\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [Dispose()](sharpdx_disposebase_dispose)\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n* [FigureCount](sharpdx_direct2d1_pathgeometry_figurecount)\n* Retrieves the number of figures in the path geometry.\n* [FillContainsPoint()](sharpdx_direct2d1_pathgeometry_fillcontainspoint)\n* Indicates whether the area filled by the geometry would contain the specified point given the specified flattening tolerance.\n* [GetBounds()](sharpdx_direct2d1_pathgeometry_getbounds)\n* Retrieves the bounds of the geometry.\n* [IsDisposed](sharpdx_disposebase_isdisposed.md)\n* Gets a value indicating whether this instance is disposed. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n* [Open()](sharpdx_direct2d1_pathgeometry_open)\n* Retrieves the geometry sink that is used to populate the path geometry with figures and segments.\n* [SegmentCount](sharpdx_direct2d1_pathgeometry_segmentcount)\n* Retrieves the number of segments in the path geometry.\n* [StrokeContainsPoint()](sharpdx_direct2d1_pathgeometry_strokecontainspoint)\n* Determines whether the geometry's stroke contains the specified point given the specified stroke thickness, style, and transform.\n{% /table %}\n\n```"
  },
  {
    "_id": "55f6da363d8aec14b7acc0f8c62c363245e1ca36d35c7165c02a64d02d29b6c9",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RadialGradientBrushProperties",
    "pathName": "sharpdx_direct2d1_radialgradientbrush",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints an area with a radial gradient.\n\n(See also **unmanaged API documentation**)\n\n{% callout type=\"note\" %}\n\n* 1. The **RadialGradientBrush** is similar to the **LinearGradientBrush** in that they both map a collection of gradient stops to a gradient. However, the linear gradient has a start and an end point to define the gradient vector, while the radial gradient uses an ellipse and a gradient origin to define its gradient behavior. To define the position and size of the ellipse, use the **Center**, **RadiusX**, and **RadiusY** properties to specify the center, x-radius, and y-radius of the ellipse. The gradient origin is the center of the ellipse, unless a gradient offset is specified by using the **GradientOriginOffset** method.\n* 2. The brush maps the gradient stop position 0.0f of the gradient origin, and the position 1.0f is mapped to the ellipse boundary. When the gradient origin is within the ellipse, the contents of the ellipse enclose the entire **0, 1** range of the brush gradient stops. If the gradient origin is outside the bounds of the ellipse, the brush still works, but its gradient is not well-defined.\n* 3. The start point and end point are described in the brush space and are mapped to the **render target** when the brush is used. Note the starting and ending coordinates are absolute, not relative to the render target size. A value of (0, 0) maps to the upper-left corner of the render target, while a value of (1, 1) maps just one pixel diagonally away from (0, 0). If there is a nonidentity brush transform or render target transform, the brush ellipse and gradient origin are also transformed.\n* 4. It is possible to specify an ellipse that does not completely fill the area being painted. When this occurs, the **ExtendMode** and setting (specified by the brush **GradientStopCollection**) determines how the remaining area is painted.\n* 5. A **RadialGradientBrush** may be used only with the **render target** that created it or with the compatible targets for that render target.\n* 6. A **RadialGradientBrush** is a device-dependent resource: your application should create radial gradient brushes after it initializes the render target with which the brushes will be used, and recreate the brushes whenever the render target needs recreated. Please see the **MSDN Direct2D Resources Overview** for more information.\n* 7. For convenience, Direct2D provides the **RadialGradientBrushProperties** function for creating a new **RadialGradientBrush**.\n{% /table %}\n\n## Syntax\n\nclass **SolidColorBrush**\n\n{% callout type=\"note %}\n\n* Tips\n\n---\n\n* 1. For NinjaScript Development purposes, you can use the **NinjaTrader.Gui.DxExtensions.ToDxBrush()** helper method to convert a **System.Windows.Media.LinearGradientBrush** to a **SharpDX.Direct2D1.LinearGradientBrush**.\n* 2. General information on Direct2D brushes can be found on the **MSDN Direct2D Brushes Overview**.\n{% /callout %}\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **RadialGradientBrush**(**RenderTarget** renderTarget, **RadialGradientBrushProperties** radialGradientBrushProperties, **GradientStopCollection** gradientStopCollection)\n* Creates a **RadialGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n\n---\n\n* new **RadialGradientBrush**(**RenderTarget** renderTarget, **RadialGradientBrushProperties** radialGradientBrushProperties, **GradientStopCollection** gradientStopCollection)\n* Creates a **RadialGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n\n---\n\n* new **RadialGradientBrush**(**RenderTarget** renderTarget, **RadialGradientBrushProperties** radialGradientBrushProperties, **BrushProperties** brushProperties, **GradientStopCollection** gradientStopCollection)\n* Creates a **RadialGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n\n---\n\n* new **RadialGradientBrush**(**RenderTarget** renderTarget, **RadialGradientBrushProperties** radialGradientBrushProperties, Nullable<**BrushProperties**> brushProperties, **GradientStopCollection** gradientStopCollection)\n* Creates a **RadialGradientBrush** that contains the specified gradient stops and has the specified transform and base opacity.\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* **Center**\n* Retrieves or sets the center of the gradient ellipse.\n\n---\n\n* **Dispose()**\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from **SharpDX.DisposeBase**.)\n\n---\n\n* **IsDisposed**\n* Gets a value indicating whether this instance is disposed. (Inherited from **SharpDX.DisposeBase**.)\n\n---\n\n* **GradientOriginOffset**\n* Retrieves or sets the offset of the gradient origin relative to the gradient ellipse's center.\n\n---\n\n* **GradientStopCollection**\n* Retrieves the **GradientStopCollection** associated with this radial gradient brush object.\n\n---\n\n* **Opacity**\n* Gets or sets the degree of opacity of this brush. (Inherited from **Brush**.)\n\n---\n\n* **RadiusX**\n* Retrieves or sets the x-radius of the gradient ellipse.\n\n---\n\n* **RadiusY**\n* Retrieves or sets the y-radius of the gradient ellipse.\n\n---\n\n* **Transform**\n* Gets or sets the transform applied to this brush. (Inherited from **Brush**.)\n{% /table %}"
  },
  {
    "_id": "fae8ddc321c044f5fe27d4f2df89f74ac8c09867cf253bd0e948f9dd08b39b59",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.RenderTarget",
    "pathName": "sharpdx_direct2d1_rendertarget",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRepresents an object that can receive drawing commands.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd371766.aspx))\n\n## Syntax\n\n**class RenderTarget**\n\n## Tips\n\n1. For NinjaScript Development purposes, [DrawingTools](drawingtool), [ChartStyles](chartstyletype), [Indicators](docs/references/Language%20Reference/2.0%20Common/system_indicator_methods.md), and [Strategies](strategy) implement the Chart's [RenderTarget](rendertarget) ready to be used in the OnRender() method.\n2. General information on Direct2D Render Targets can be found on the [MSDN Direct2D Render Targets Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx).\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [AntialiasMode](sharpdx_direct2d1_rendertarget_antialiasmode)\n* Retrieves or sets the current antialiasing mode for nontext drawing operations.\n\n---\n\n* [DrawEllipse()](sharpdx_direct2d1_rendertarget_drawellipse)\n* Draws the outline of the specified ellipse using the specified stroke style.\n\n---\n\n* [DrawGeometry()](sharpdx_direct2d1_rendertarget_drawgeometry)\n* Draws the outline of the specified geometry.\n\n---\n\n* [DrawLine()](sharpdx_direct2d1_rendertarget_drawline)\n* Draws a line between the specified points.\n\n---\n\n* [DrawRectangle()](sharpdx_direct2d1_rendertarget_drawrectangle)\n* Draws the outline of a rectangle that has the specified dimensions.\n\n---\n\n* [DrawText()](sharpdx_direct2d1_rendertarget_drawtext)\n* Draws the specified text using the format information provided by an **SharpDX.DirectWrite.TextFormat** object.\n\n---\n\n* [DrawTextLayout()](sharpdx_direct2d1_rendertarget_drawtextlayout)\n* Draws the formatted text described by the specified **SharpDX.DirectWrite.TextLayout** object.\n\n---\n\n* [FillEllipse()](sharpdx_direct2d1_rendertarget_fillellipse)\n* Paints the interior of the specified ellipse.\n\n---\n\n* [FillGeometry()](sharpdx_direct2d1_rendertarget_fillgeometry)\n* Paints the interior of the specified geometry.\n\n---\n\n* [FillRectangle()](sharpdx_direct2d1_rendertarget_fillrectangle)\n* Paints the interior of the specified rectangle.\n\n---\n\n* [IsDisposed](sharpdx_disposebase_isdisposed.md)\n* Gets a value indicating whether this instance is disposed. (Inherited from **SharpDX.DisposeBase**.)\n\n---\n\n* [Transform](sharpdx_direct2d1_rendertarget_transform)\n* Gets or sets the current transform of the render target.\n{% /table %}"
  },
  {
    "_id": "8c4ffda3cb9725c66c4537b169d62be20ef65d934e4fbfdbf290704e9a7c9a86",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.SolidColorBrush",
    "pathName": "sharpdx_direct2d1_solidcolorbrush",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nPaints an area with a solid color.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd372207.aspx))\n\n{% callout type=\"note\" %}\n\n* The **SolidColorBrush** can only be used with the render target that created it or with the compatible targets for that render target.\n* A **SolidColorBrush** is a device-dependent resource. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n* For convenience, Direct2D provides the [BrushProperties](sharpdx_direct2d1_brushproperties) function for creating a new **SolidColorBrush**.\n{% /callout %}\n\n## Syntax\n\nclass **SolidColorBrush**\n\n{% table %}\n\n* Tips\n\n---\n\n* 1. For NinjaScript Development purposes, you can use the [NinjaTrader.Gui.DxExtensions.ToDxBrush()](dxextensions_todxbrush) helper method to convert a **System.Windows.Media.SolidColorBrush** to a **SharpDX.Direct2D1.SolidColorBrush**.\n* 2. General information on Direct2D brushes can be found on the [MSDN Direct2D Brushes Overview](https://msdn.microsoft.com/en-us/library/dd756651(v=vs.85).aspx).\n{% /table %}\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **SolidColorBrush**(RenderTarget renderTarget, Color4 color) | Creates a new **SolidColorBrush** that has the specified color and opacity.\n* new **SolidColorBrush**(RenderTarget renderTarget, Color4 color, Nullable<`brushproperties`> brushProperties) | Creates a new **SolidColorBrush** that has the specified color and opacity.\n{% /table %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [Color](sharpdx_direct2d1_solidcolorbrush_color) \n* Retrieves or sets the color of the solid color brush.\n---\n* [Dispose()](sharpdx_disposebase_dispose) \n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n---\n* [IsDisposed](sharpdx_disposebase_isdisposed.md) \n* Gets a value indicating whether this instance is disposed. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n---\n* [Opacity](sharpdx_direct2d1_brush_opacity) \n* Gets or sets the degree of opacity of this brush. (Inherited from [Brush](sharpdx_direct2d1_brush).)\n---\n* [Transform](sharpdx_direct2d1_brush_transform) \n* Gets or sets the transform applied to this brush. (Inherited from [Brush](sharpdx_direct2d1_brush).)\n---\n\n{% /table %}"
  },
  {
    "_id": "eec994d16d7e89c70199f777b09f762d72003bf29b3cc0da2b294c2f56703a9e",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle",
    "pathName": "sharpdx_direct2d1_strokestyle",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes the caps, miter limit, line join, and dash information for a stroke.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd372217.aspx))\n\n{% callout type=\"note\" %}\n\n1. A stroke style is a device-independent resource; you can create it once then retain it for the life of your application. Please see the [MSDN Direct2D Resources Overview](https://msdn.microsoft.com/en-us/library/dd756757(v=vs.85).aspx) for more information.\n2. For convenience, Direct2D provides the [StrokeStyleProperties](sharpdx_direct2d1_strokestyleproperties.md) function for creating new a StrokeStyle. |\n{% /callout %}\n\n## Syntax\n\n**class StrokeStyle**\n\n## Constructors\n\n{% table %}\n\n---\n\n* **new StrokeStyle(Factory factory, [StrokeStyleProperties](sharpdx_direct2d1_strokestyleproperties.md) properties)** \n* Creates an StrokeStyle that describes start cap, dash pattern, and other features of a stroke. \n---\n* **new StrokeStyle(Factory factory, [StrokeStyleProperties](sharpdx_direct2d1_strokestyleproperties.md) properties, float[] dashes)** \n* Creates an StrokeStyle that describes start cap, dash pattern, and other features of a stroke. \n{% /table %}\n\n{% callout type=\"note\" %}\n\n---\n\n* Tip: For NinjaScript development purposes, when creating a StrokeStyle object you should use the [NinjaTrader.Core.Globals.D2DFactory](d2dfactory) property |\n{% /callout %}\n\n## Method and Properties\n\n{% table %}\n\n---\n\n* [DashCap](sharpdx_direct2d1_strokestyle_dashcap) \n* Gets a value that specifies how the ends of each dash are drawn. \n---\n* [DashesCount](sharpdx_direct2d1_strokestyle_dashescount) \n* Retrieves the number of entries in the dashes array. \n---\n* [DashOffset](sharpdx_direct2d1_strokestyle_dashoffset) \n* Retrieves a value that specifies how far in the dash sequence the stroke will start. \n---\n* [DashStyle](sharpdx_direct2d1_strokestyle_dashstyle) \n* Gets a value that describes the stroke's dash pattern. \n---\n* [Dispose()](sharpdx_disposebase_dispose) \n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n---\n* [EndCap](sharpdx_direct2d1_strokestyle_endcap) \n* Retrieves the type of shape used at the end of a stroke. \n---\n* [GetDashes()](sharpdx_direct2d1_strokestyle_getdashes)\n* Copies the dash pattern to the specified array. \n---\n* [IsDisposed](sharpdx_disposebase_isdisposed.md) \n* Gets a value indicating whether this instance is disposed. (Inherited from DisposeBase.)\n---\n* [LineJoin](sharpdx_direct2d1_strokestyle_linejoin) \n* Retrieves the type of joint used at the vertices of a shape's outline.\n---\n* [MiterLimit](sharpdx_direct2d1_strokestyle_miterlimit) \n* Retrieves the limit on the ratio of the miter length to half the stroke's thickness. \n---\n* [StartCap](sharpdx_direct2d1_strokestyle_startcap)\n* Retrieves the type of shape used at the beginning of a stroke.\n{% /table %}"
  },
  {
    "_id": "7e2d54e6895d16e72216cc8ae43510ba14f5d3cacf4aff439f350d1924b1179a",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyleProperties",
    "pathName": "sharpdx_direct2d1_strokestyleproperties",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nDescribes the stroke that outlines a shape.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368164.aspx))\n\n## Syntax\n\nstruct **StrokeStyleProperties**\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **StartCap**\n* The [StartCap](sharpdx_direct2d1_strokestyle_startcap) value applied to the start of all the open figures in a stroked geometry.\n\n---\n\n* **EndCap**\n* The [EndCap](sharpdx_direct2d1_strokestyle_endcap) value applied to the end of all the open figures in a stroked geometry.\n\n---\n\n* **DashCap**\n* The [DashCap](sharpdx_direct2d1_strokestyle_dashcap) value for the shape at either end of each dash segment.\n\n---\n\n* **LineJoin**\n* A [LineJoin](sharpdx_direct2d1_strokestyle_linejoin) value that describes how segments are joined. This value is ignored for a vertex if the segment flags specify that the segment should have a smooth join.\n\n---\n\n* **MiterLimit**\n* The [MeterLImit](sharpdx_direct2d1_strokestyle_miterlimit) value of the thickness of the join on a mitered corner. This value is always treated as though it is greater than or equal to 1.0f.\n\n---\n\n* **DashStyle**\n* A [DashStyle](sharpdx_direct2d1_strokestyle_dashstyle) value that specifies whether the stroke has a dash pattern and, if so, the dash style.\n\n---\n\n* **DashOffset**\n* A [DashOffset](sharpdx_direct2d1_strokestyle_dashoffset) value that specifies an offset in the dash sequence. A positive dash offset value shifts the dash pattern, in units of stroke width, toward the start of the stroked geometry. A negative dash offset value shifts the dash pattern, in units of stroke width, toward the end of the stroked geometry.\n{% /table %}"
  },
  {
    "_id": "5b65c6b1c35543869149c85865d1bebac1982d86f9367022ee3aa7098ba7c0bc",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.SweepDirection",
    "pathName": "sharpdx_direct2d1_sweepdirection",
    "parent": "sharpdx_direct2d1",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n{% table %}\n\n---\n\n* CounterClockwise\n* Arcs are drawn in a counterclockwise (negative-angle) direction.\n\n---\n\n* Clockwise\n* Arcs are drawn in a clockwise (positive-angle) direction.\n{% /table %}\n\n## Definition\n\nDefines the direction that an elliptical arc is drawn.\n\n(See also **unmanaged API documentation**)\n\n## Syntax\n\nenum **SweepDirection**\n\n## Enumerators\n\n{% table %}\n\n---\n\n* CounterClockwise\n* Arcs are drawn in a counterclockwise (negative-angle) direction.\n\n---\n\n* Clockwise\n* Arcs are drawn in a clockwise (positive-angle) direction.\n{% /table %}"
  },
  {
    "_id": "1b8b4df621ad8e8742be3c7dc04502400913d6bfbb50c4979024c1a792746461",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.SolidColorBrush.Color",
    "pathName": "sharpdx_direct2d1_solidcolorbrush_color",
    "parent": "solidcolorbrush",
    "order": 0,
    "section": "references",
    "markdown": "## SharpDX.Direct2D1.SolidColorBrush.Color\n\n{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the color of the solid color brush.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372209.aspx))\n\n## Property Value\n\nThe **SharpDX.Color4** of this solid color brush.\n\n## Syntax\n\n**<`solidcolorbrush>.Color**"
  },
  {
    "_id": "e9854464f3aeff60eaa8372a6e7357321530684a4c7b3a6bf14fa8d50ed16ba8",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.DashCap",
    "pathName": "sharpdx_direct2d1_strokestyle_dashcap",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets a value that specifies how the ends of each dash are drawn.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd372218.aspx))\n\n## Property Value\n\nA **SharpDX.Direct2D1.CapStyle** value that specifies how the ends of each dash are drawn.\n\n## Syntax\n\n**<`strokestyle`>.DashCap**"
  },
  {
    "_id": "748c5e3f0577ac332acaaddb419187bb7aea48f695b0607bae7c5f5c16913baf",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.DashesCount",
    "pathName": "sharpdx_direct2d1_strokestyle_dashescount",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the number of entries in the dashes array.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372232.aspx))\n\n## Property Value\n\nAn int for the number of entries in the dashes array if the stroke is dashed; otherwise, 0.\n\n## Syntax\n\n**<`strokestyle`>.DashesCount**"
  },
  {
    "_id": "6b8219b70fa0c069431e62b1be5d7300cbda2ec4939721c469d0ae3eafa0fb5f",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.DashOffset",
    "pathName": "sharpdx_direct2d1_strokestyle_dashoffset",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the number of entries in the dashes array.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372234.aspx))\n\n## Property Value\n\nA float value that specifies how far in the dash sequence the stroke will start.\n\n## Syntax\n\n**<`strokestyle>.DashesCount**"
  },
  {
    "_id": "f5714b01137f2235a50ef7c47820cf36f3df0267f7f8627d456ff8cf82d008d2",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.DashStyle",
    "pathName": "sharpdx_direct2d1_strokestyle_dashstyle",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets a value that describes the stroke's dash pattern.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd372217.aspx))\n\n{% callout type=\"note\" %}\n\nIf a custom dash style is specified, the dash pattern is described by the dashes array, which can be retrieved by calling the **GetDashes()** method.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.Direct2D1.DashStyle** enum value that describes the predefined dash pattern used, or **DashStyle.Custom** if a custom dash style is used.\n\nPossible Values are:\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Solid\n* A solid line with no breaks.\n\n---\n\n* Dash\n* A dash followed by a gap of equal length. The dash and the gap are each twice as long as the stroke thickness. The equivalent dash array for Dash is {2, 2}.\n\n---\n\n* Dot\n* A dot followed by a longer gap. The equivalent dash array for Dot is {0, 2}.\n\n---\n\n* DashDot\n* A dash, followed by a gap, followed by a dot, followed by another gap. The equivalent dash array for DashDot is {2, 2, 0, 2}.\n\n---\n\n* DashDotDot\n* A dash, followed by a gap, followed by a dot, followed by another gap, followed by another dot, followed by another gap. The equivalent dash array for DashDotDot is {2, 2, 0, 2, 0, 2}.\n\n---\n\n* Custom\n* The dash pattern is specified by an array of floating-point values.\n{% /table %}\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368087.aspx))\n\n## Syntax\n\n**<`strokestyle`>.DashStyle**"
  },
  {
    "_id": "6cf084ef2421446b2bf6743868779fb94dba8502dc84ab8ac19a11a507c658fa",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.EndCap",
    "pathName": "sharpdx_direct2d1_strokestyle_endcap",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the type of shape used at the end of a stroke.\n\n(See also **unmanaged API documentation**)\n\n## Property Value\n\nA **SharpDX.Direct2D1.CapStyle** value that specifies the type of joint used at the vertices of a shape's outline.\n\n## Syntax\n\n**<`strokestyle`>.EndCap**"
  },
  {
    "_id": "dfc00027bf6ce8229dd2d6d2c6c4570c1d98ab69fe746bf7184098860087caaf",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.GetDashes()",
    "pathName": "sharpdx_direct2d1_strokestyle_getdashes",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nCopies the dash pattern to the specified array.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372230.aspx))\n\n{% callout type=\"note\" %}\n\nNote: The dashes are specified in units that are a multiple of the stroke width, with subsequent members of the array indicating the dashes and gaps between dashes: the first entry indicates a filled dash, the second a gap, and so on.\n\n{% /callout %}\n\n## Method return value\n\nThis method does not return a value.\n\n## Syntax\n\n**<`strokestyle>**.GetDashes(float[] dashes, int dashesCount)\n\n## Parameters\n\n{% table %}\n\n---\n\n* dashes\n* A float pointer to an array that will receive the dash pattern. The array must be able to contain at least as many elements as specified by dashesCount. You must allocate storage for this array.\n---\n* dashesCount\n* The int number of dashes to copy. If this value is less than the number of dashes in the stroke style's dashes array, the returned dashes are truncated to dashesCount. If this value is greater than the number of dashes in the stroke style's dashes array, the extra dashes are set to 0.0f. To obtain the actual number of dashes in the stroke style's dashes array, use the **DashesCount** property.\n{% /table %}"
  },
  {
    "_id": "b08db0ab48a3af40e3984f7eddb627cda2b962dfde7ebcf4106d42f6e109d2dd",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.LineJoin",
    "pathName": "sharpdx_direct2d1_strokestyle_linejoin",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the type of joint used at the vertices of a shape's outline.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372240.aspx))\n\n{% callout type=\"note\" %}\n\nNote: A miter limit affects how sharp miter joins are allowed to be. If the line join style is **MiterOrBevel**, then the join will be mitered with regular angular vertices if it doesn't extend beyond the miter limit; otherwise, the line join will be beveled.\n\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.Direct2D1.LineJoin** enum value that specifies the type of joint used at the vertices of a shape's outline.\n\nPossible values are:\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Miter\n* Regular angular vertices.\n\n---\n\n* Bevel\n* Beveled vertices.\n\n---\n\n* Round\n* Rounded vertices.\n\n---\n\n* MiterOrBevel\n* Regular angular vertices unless the join would extend beyond the miter limit; otherwise, beveled vertices.\n{% /table %}\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd368130.aspx))\n\n## Syntax\n\n**<`strokestyle`>.LineJoin**"
  },
  {
    "_id": "85e01e13b2e4c2bc801c1c910f50b116d16c2f8bb5af673b8f564cb13daa20d0",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.MiterLimit",
    "pathName": "sharpdx_direct2d1_strokestyle_miterlimit",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the limit on the ratio of the miter length to half the stroke's thickness.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372242.aspx))\n\n## Property Value\n\nA positive float value greater than or equal to **1.0f** that describes the limit on the ratio of the miter length to half the stroke's thickness.\n\n## Syntax\n\n**<`strokestyle`>.MiterLimit**"
  },
  {
    "_id": "d4c5ad1ead33c7aedf393db7b06640b8a8da9f9625b90b438c6cb2068335dafc",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1.StrokeStyle.StartCap",
    "pathName": "sharpdx_direct2d1_strokestyle_startcap",
    "parent": "strokestyle",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the type of shape used at the beginning of a stroke.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd372244.aspx))\n\n## Property Value\n\nA **SharpDX.Direct2D1.CapStyle** value for the type of shape used at the beginning of a stroke.\n\n## Syntax\n\n**<`strokestyle`>.StartCap**"
  },
  {
    "_id": "4b2c9d8bf4d48511bc5f1c343d56dc008ead8c81fd25d29f5054125c8ed7c6e0",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout.LineMetrics",
    "pathName": "sharpdx_directwrite_linemetrics",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains information about a formatted line of text.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd368099(v=vs.85).aspx))\n\n## Syntax\n\n**LineMetrics**[int idx]\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* **Baseline**\n* A float for the distance from the top of the text line to its baseline.\n\n---\n\n* **Height**\n* A float for the height of the text line.\n\n---\n\n* **IsTrimmed**\n* A bool indicating the line is trimmed.\n\n---\n\n* **Length**\n* An **int** value for the number of text positions in the text line. This includes any trailing whitespace and newline characters.\n\n---\n\n* **NewlineLength**\n* An **int** value for the number of characters in the newline sequence at the end of the text line. If the count is zero, then the text line was either wrapped or it is the end of the text.\n\n---\n\n* **TrailingWhitespaceLength**\n* An **int** value for the number of whitespace positions at the end of the text line. Newline sequences are considered whitespace.\n{% /table %}"
  },
  {
    "_id": "0d86ef1cdb3c4d2fa899db2f5b5338fb45a008dd212ce1b12466050c62afc666",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat",
    "pathName": "sharpdx_directwrite_textformat",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nThe **TextFormat** interface describes the font and paragraph properties used to format text, and it describes locale information.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316628.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. These properties cannot be changed after the **TextFormat** object is created. To change these properties, a new **TextFormat** object must be created with the desired properties.\n2. The **TextFormat** interface is used to draw text with a single format. To draw text with multiple formats, or to use a custom text renderer, use the [TextLayout](sharpdx_directwrite_textlayout) interface. **TextLayout** enables the application to change the format for ranges of text within the string.\n3. This object may not be thread-safe, and it may carry the state of text format change.\n4. To draw simple text with a single format, Direct2D provides the [DrawText()](sharpdx_direct2d1_rendertarget_drawtext) method, which draws a string using the format information provided by a **TextFormat** object.\n{% /callout %}\n\n## Syntax\n\nclass **TextFormat**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **TextFormat**(Factory factory, string fontFamilyName, float fontSize)\n* Creates a text format object used for text layout with normal weight, style and stretch.\n\n---\n\n* new **TextFormat**(Factory factory, string fontFamilyName, [FontWeight](sharpdx_directwrite_textformat_fontweight) fontWeight, [FontStyle](sharpdx_directwrite_textformat_fontstyle) fontStyle, float fontSize)\n* Creates a text format object used for text layout with normal stretch.\n\n---\n\n* new **TextFormat**(Factory factory, string fontFamilyName, [FontWeight](sharpdx_directwrite_textformat_fontweight) fontWeight, [FontStyle](sharpdx_directwrite_textformat_fontstyle) fontStyle, [FontStretch](sharpdx_directwrite_textformat_fontstretch) fontStretch, float fontSize)\n* Creates a text format object used for text layout.\n{% /table %}\n\n{% callout type=\"note\" %}\n\nTip: For NinjaScript development purposes, when creating a **TextFormat** object you should use the [NinjaTrader.Core.Globals.DirectWriteFactory](directwritefactory) property.\n\n{% /callout %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [Dispose()](sharpdx_disposebase_dispose)\n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n\n---\n\n* [FlowDirection](sharpdx_directwrite_textformat_flowdirection)\n* Gets or sets the direction that text lines flow.\n\n---\n\n* [FontFamilyName](sharpdx_directwrite_textformat_fontfamilyname)\n* Creates a text format object used for text layout with normal weight, style and stretch.\n\n---\n\n* [FontSize](sharpdx_directwrite_textformat_fontsize)\n* Creates a text format object used for text layout with normal stretch.\n\n---\n\n* [FontStretch](sharpdx_directwrite_textformat_fontstretch)\n* Creates a text format object used for text layout.\n\n---\n\n* [FontStyle](sharpdx_directwrite_textformat_fontstyle)\n* Gets the font style of the text.\n\n---\n\n* [FontWeight](sharpdx_directwrite_textformat_fontweight)\n* Gets the font weight of the text.\n\n---\n\n* [IsDisposed](sharpdx_disposebase_isdisposed.md)\n* Gets a value indicating whether this instance is disposed. (Inherited from [SharpDX.DisposeBase](sharpdx_disposebase.md).)\n\n---\n\n* [ParagraphAlignment](sharpdx_directwrite_textformat_paragraphalignment)\n* Gets or sets the alignment option of a paragraph which is relative to the top and bottom edges of a layout box.\n\n---\n\n* [ReadingDirection](sharpdx_directwrite_textformat_readingdirection)\n* Gets or sets the current reading direction for text in a paragraph.\n\n---\n\n* [TextAlignment](sharpdx_directwrite_textformat_textalignment)\n* Gets or sets the alignment option of text relative to the layout box's leading and trailing edge.\n\n---\n\n* [WordWrapping](sharpdx_directwrite_textformat_wordwrapping)\n* Gets or sets the word wrapping option.\n{% /table %}"
  },
  {
    "_id": "4672b7296dbb5b3bc60cac46be9521b758ee9fbe72d385db5af5ac696f03963e",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FlowDirection",
    "pathName": "sharpdx_directwrite_textformat_flowdirection",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets the direction that text lines flow.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316631.aspx))\n\n## Property Value\n\nA **SharpDX.DirectWrite.FlowDirection** enum which determines text lines flow within their parent container.\n\n## Possible values are\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* **TopToBottom**\n* Specifies that text lines are placed from top to bottom.\n{% /table %}\n\n## Syntax\n\n**<`textlayout`>.FlowDirection**"
  },
  {
    "_id": "56d41272ac598c1b22da0b52f6246c8b06d6fcc0af2924a7353fc728bff7bd98",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FontFamilyName",
    "pathName": "sharpdx_directwrite_textformat_fontfamilyname",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets a copy of the font family name.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316636(v=vs.85).aspx))\n\n## Property Value\n\nA **string** value representing the current font family name.\n\n## Syntax\n\n**<`textlayout>**.FontFamilyName"
  },
  {
    "_id": "1c438f688f87e2970c5680a88f0d7f877b018794cc8204840a07888f3c6f8d7f",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FontSize",
    "pathName": "sharpdx_directwrite_textformat_fontsize",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets the font size in DIP units.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316643.aspx))\n\n## Property Value\n\nA float representing the current font size in DIP units.\n\n## Syntax\n\n**<`textlayout`>.FontSize**"
  },
  {
    "_id": "2f155640ab351d533ee7d98331e955dfa2396d2b228bf19d9a7ac6fc37065483",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FontStretch",
    "pathName": "sharpdx_directwrite_textformat_fontstretch",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets the font stretch of the text.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316646.aspx))\n\n{% callout type=\"note\" %}\n\n1. A font stretch describes the degree to which a font form is stretched from its normal aspect ratio, which is the original width to height ratio specified for the glyphs in the font.\n2. Values other than the ones defined in the enumeration are considered to be invalid, and are rejected by font API functions.\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.DirectWrite.FontStretch** enum value which indicates the type of font stretch (such as normal or condensed). See table below.\n\n## Syntax\n\n<textlayout`>.FontStretch\n\nPossible values are:\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Undefined\n* Predefined font stretch: Not known (0).\n\n---\n\n* UltraCondensed\n* Predefined font stretch: Ultra-condensed (1).\n\n---\n\n* ExtraCondensed\n* Predefined font stretch: Extra-condensed (2).\n\n---\n\n* Condensed\n* Predefined font stretch: Condensed (3).\n\n---\n\n* SemiCondensed\n* Predefined font stretch: Semi-condensed (4).\n\n---\n\n* Normal\n* Predefined font stretch: Normal (5).\n\n---\n\n* Medium\n* Predefined font stretch: Medium (5).\n\n---\n\n* SemiExpanded\n* Predefined font stretch: Semi-expanded (6).\n\n---\n\n* Expanded\n* Predefined font stretch: Expanded (7).\n\n---\n\n* ExtraExpanded\n* Predefined font stretch: Extra-expanded (8).\n\n---\n\n* UltraExpanded\n* Predefined font stretch: Ultra-expanded (9).\n{% /table %}"
  },
  {
    "_id": "27a8ce53aa7c5c632a5d1255bdce3d4ea9f759ca61dbd702a50c98e21d2eb729",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FontStyle",
    "pathName": "sharpdx_directwrite_textformat_fontstyle",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets the font style of the text.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316649.aspx))\n\n## Property Value\n\nA **SharpDX.DirectWrite.FontStyle** enum value which indicates the type of font style (such as slope or incline).\n\n## Possible values are\n\n{% table %}\n\n* Font Style\n* Description\n\n---\n\n* Normal\n* The characters in a normal, or roman, font are upright.\n\n---\n\n* Oblique\n* The characters in an oblique font are artificially slanted.\n\n---\n\n* Italic\n* The characters in an italic font are truly slanted and appear as they were designed.\n{% /table %}\n\n## Syntax\n\n**<`textlayout`>.FontStyle**"
  },
  {
    "_id": "bcc4eb2a9c27ef53a90f65619f9d6e6a8f12c21218c01fb6f00ef8eaba26e158",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.FontWeight",
    "pathName": "sharpdx_directwrite_textformat_fontweight",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets the font weight of the text.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316652.aspx))\n\n{% callout type=\"note\" %}\n\nNotes:\n\n1. Weight differences are generally differentiated by an increased stroke or thickness that is associated with a given character in a typeface, as compared to a \"normal\" character from that same typeface.\n2. Not all weights are available for all typefaces. When a weight is not available for a typeface, the closest matching weight is returned.\n3. Font weight values less than 1 or greater than 999 are considered invalid, and they are rejected by font API functions.\n{% /callout %}\n\n## Property Value\n\nA **SharpDX.DirectWrite.FontWeight** enum value that indicates the type of weight (such as normal, bold, or black). See table below.\n\n## Syntax\n\n<textlayout`>.FontWeight\n\n## Possible values are\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Thin\n* Predefined font weight: Thin (100).\n\n---\n\n* ExtraLight\n* Predefined font weight: Extra-light (200).\n\n---\n\n* UltraLight\n* Predefined font weight: Ultra-light (200).\n\n---\n\n* Light\n* Predefined font weight: Light (300).\n\n---\n\n* Normal\n* Predefined font weight: Normal (400).\n\n---\n\n* Regular\n* Predefined font weight: Regular (400).\n\n---\n\n* Medium\n* Predefined font weight: Medium (500).\n\n---\n\n* DemiBold\n* Predefined font weight: Demi-bold (600).\n\n---\n\n* SemiBold\n* Predefined font weight: Semi-bold (600).\n\n---\n\n* Bold\n* Predefined font weight: Bold (700).\n\n---\n\n* ExtraBold\n* Predefined font weight: Extra-bold (800).\n\n---\n\n* UltraBold\n* Predefined font weight: Extra-bold (800).\n\n---\n\n* Black\n* Predefined font weight: Black (900).\n\n---\n\n* Heavy\n* Predefined font weight: Heavy (900).\n\n---\n\n* ExtraBlack\n* Predefined font weight: Extra-black (950).\n\n---\n\n* UltraBlack\n* Predefined font weight: Ultra-black (950).\n\n---\n\n* SemiLight\n* Predefined font weight: Normal (400).\n{% /table %}"
  },
  {
    "_id": "c4fc6288305de462e9898c4fa403fe4b66841a2bb940cde2433582446d4aa4b7",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.ParagraphAlignment",
    "pathName": "sharpdx_directwrite_textformat_paragraphalignment",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the alignment option of a paragraph which is relative to the top and bottom edges of a layout box.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316675.aspx))\n\n## Property Value\n\nA **SharpDX.DirectWrite.ParagraphAlignment** enum value that indicates the current paragraph alignment option.\n\n## Possible values are\n\n{% table %}\n\n* Alignment Type\n* Description\n\n---\n\n* Near\n* The top of the text flow is aligned to the top edge of the layout box.\n\n---\n\n* Far\n* The bottom of the text flow is aligned to the bottom edge of the layout box.\n\n---\n\n* Center\n* The center of the flow is aligned to the center of the layout box.\n{% /table %}\n\n## Syntax\n\n**<`textlayout`>.ParagraphAlignment**"
  },
  {
    "_id": "d75b630623da0cd57afe2052213163775ca65bd22f8682db7c1320fecba5f6d8",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.ReadingDirection",
    "pathName": "sharpdx_directwrite_textformat_readingdirection",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the current reading direction for text in a paragraph.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316678.aspx))\n\n## Property Value\n\nA **SharpDX.DirectWrite.ReadingDirection** enum value that indicates the current reading direction for text in a paragraph.\n\n## Possible values are\n\n{% table %}\n\n---\n\n* LeftToRight\n* Indicates that reading progresses from left to right.\n\n---\n\n* RightToLeft\n* Indicates that reading progresses from right to left.\n{% /table %}\n\n## Syntax\n\n**<`textlayout>**.ReadingDirection"
  },
  {
    "_id": "d5debf25b242729d18a5e53216281c7416a8c62b9cb060afb037a1f24b601d2b",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.TextAlignment",
    "pathName": "sharpdx_directwrite_textformat_textalignment",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the alignment option of text relative to the layout box's leading and trailing edge.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316681.aspx))\n\n## Property Value\n\nA **SharpDX.DirectWrite.TextAlignment** enum value of the current paragraph.\n\nPossible values are:\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Leading\n* The leading edge of the paragraph text is aligned to the leading edge of the layout box.\n\n---\n\n* Trailing\n* The trailing edge of the paragraph text is aligned to the trailing edge of the layout box.\n\n---\n\n* Center\n* The center of the paragraph text is aligned to the center of the layout box.\n\n---\n\n* Justified\n* Align text to the leading side, and also justify text to fill the lines.\n{% /table %}\n\n## Syntax\n\n**<`textlayout`>.TextAlignment**"
  },
  {
    "_id": "f17a43b622b4bcf3bb1e18f902d6c57c9ef91f11c25f2b0bd1b6fb4f9277466f",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextFormat.WordWrapping",
    "pathName": "sharpdx_directwrite_textformat_wordwrapping",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the word wrapping option.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316688.aspx))\n\n## Property Value\n\nThe **SharpDX.DirectWrite.WordWraping** enum value which determines the word wrapping option.\n\n## Possible values are\n\n{% table %}\n\n* Value\n* Description\n\n---\n\n* Wrap\n* Indicates that words are broken across lines to avoid text overflowing the layout box.\n\n---\n\n* NoWrap\n* Indicates that words are kept within the same line even when it overflows the layout box. This option is often used with scrolling to reveal overflow text.\n{% /table %}\n\n## Syntax\n\n**<`textlayout`>.WordWrapping**"
  },
  {
    "_id": "824ead31e7e3dca91c7cb8f2239d04370f5f5c5737b49f3305d8efbf0e6a77b3",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout",
    "pathName": "sharpdx_directwrite_textlayout",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nThe **TextLayout** interface represents a block of text after it has been fully analyzed and formatted.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd316718.aspx))\n\n{% callout type=\"note\" %}\n\nNote: To draw a formatted string represented by a **TextLayout** object, Direct2D provides the **DrawTextLayout** method.\n\n{% /callout %}\n\n## Syntax\n\nclass **TextLayout**\n\n## Constructors\n\n{% table %}\n\n* Constructor\n* Description\n\n---\n\n* new **TextLayout**(**Factory** factory, **string** text, [**TextFormat**](sharpdx_directwrite_textformat) textFormat, **float** maxWidth, **float** maxHeight) | Takes a string, text format, and associated constraints, and produces an object that represents the fully analyzed and formatted result.\n{% /table %}\n\n{% callout type=\"note\" %}\n\nTip: For NinjaScript development purposes, when creating a **TextLayout** object you should use the [**NinjaTrader.Core.Globals.DirectWriteFactory**](directwritefactory) property.\n\n{% /callout %}\n\n## Methods and Properties\n\n{% table %}\n\n* Method/Property\n* Description\n\n---\n\n* [**Dispose()**](sharpdx_disposebase_dispose) \n* Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. (Inherited from [**SharpDX.DisposeBase**](sharpdx_disposebase.md).)\n---\n* [**FlowDirection**](sharpdx_directwrite_textformat_flowdirection)\n* Gets or sets the direction that text lines flow. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**FontFamilyName**](sharpdx_directwrite_textformat_fontfamilyname) \n* Gets a copy of the font family name. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**FontSize**](sharpdx_directwrite_textformat_fontsize) \n* Gets the font size in DIP units. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**FontStretch**](sharpdx_directwrite_textformat_fontstretch) \n* Gets the font stretch of the text. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**FontStyle**](sharpdx_directwrite_textformat_fontstyle) \n* Gets the font style of the text. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**FontWeight**](sharpdx_directwrite_textformat_fontweight) \n* Gets the font weight of the text. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**IsDisposed**](sharpdx_disposebase_isdisposed.md) \n* Gets a value indicating whether this instance is disposed. (Inherited from [**SharpDX.DisposeBase**](sharpdx_disposebase.md).)\n---\n* [**MaxHeight**](sharpdx_directwrite_textlayout_maxheight)\n* Gets or sets the layout maximum height.\n---\n* [**MaxWidth**](sharpdx_directwrite_textlayout_maxwidth) \n* Gets or sets the layout maximum width.\n---\n* [**Metrics**](sharpdx_directwrite_textlayout_metrics) \n* Contains the metrics associated with text after layout. All coordinates are in device independent pixels (DIPs).\n---\n* [**ParagraphAlignment**](sharpdx_directwrite_textformat_paragraphalignment) \n* Gets or sets the alignment option of a paragraph which is relative to the top and bottom edges of a layout box. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**ReadingDirection**](sharpdx_directwrite_textformat_readingdirection) \n* Gets or sets the current reading direction for text in a paragraph. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**TextAlignment**](sharpdx_directwrite_textformat_textalignment) \n* Gets or sets the alignment option of text relative to the layout box's leading and trailing edge. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n* [**WordWrapping**](sharpdx_directwrite_textformat_wordwrapping) \n* Gets or sets the word wrapping option. (Inherited from [**TextFormat**](sharpdx_directwrite_textformat).)\n---\n\n{% /table %}"
  },
  {
    "_id": "444a9ea3f8a0ef630f39527709edd59cf2a827e9e1288905e760958dc6426dac",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout.GetLineMetrics()",
    "pathName": "sharpdx_directwrite_textlayout_getlinemetrics",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nRetrieves the information about each individual text line of the text string.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316763(v=vs.85).aspx))\n\n## Method Return Value\n\nA [LineMetrics](sharpdx_directwrite_linemetrics)[] contains a pointer to an array of structures containing various calculated length values of individual text lines.\n\n## Syntax\n\n**<`textlayout`>.GetLineMetrics()**\n\n## Parameters\n\nThis method does not accept any parameters."
  },
  {
    "_id": "fda840cfa79192706bdd2fdec8b62d4ddac8ffe0fa1e4a981131de5dcbd8b799",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout.MaxHeight",
    "pathName": "sharpdx_directwrite_textlayout_maxheight",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the layout maximum height.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316776.aspx))\n\n## Property Value\n\nA **float** representing the text layout maximum height.\n\n## Syntax\n\n<`textlayout`>.**MaxHeight**"
  },
  {
    "_id": "a1190ae6672cd9899a57c1084aecdb555a9a96e22d1be87decf605d491e28e89",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout.MaxWidth",
    "pathName": "sharpdx_directwrite_textlayout_maxwidth",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nGets or sets the layout maximum width.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd316781.aspx))\n\n## Property Value\n\nA **float** representing the text layout maximum width.\n\n## Syntax\n\n**<`textlayout>**.MaxWidth"
  },
  {
    "_id": "4068b1835217327c4bff3cc39d080da47ec32bcac52d056810f481c5fe6f1149",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite.TextLayout.Metrics",
    "pathName": "sharpdx_directwrite_textlayout_metrics",
    "parent": "sharpdx_directwrite",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\n## Definition\n\nContains the metrics associated with text after layout. All coordinates are in device independent pixels (DIPs).\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd368135.aspx))\n\n## Syntax\n\n**<`textlayout`>.Metrics**\n\n## Properties\n\n{% table %}\n\n* Property\n* Description\n\n---\n\n* Left\n* A float value that indicates the left-most point of formatted text relative to the layout box, while excluding any glyph overhang.\n\n---\n\n* Top\n* A float value that indicates the top-most point of formatted text relative to the layout box, while excluding any glyph overhang.\n\n---\n\n* Width\n* A float value that indicates the width of the formatted text, while ignoring trailing whitespace at the end of each line.\n\n---\n\n* WidthIncludingTrailingWhitespace\n* A float value that indicates width of the formatted text, taking into account the trailing whitespace at the end of each line.\n\n---\n\n* Height\n* A float value that indicates the height of the formatted text. The height of an empty string is set to the same value as that of the default font.\n\n---\n\n* LayoutWidth\n* A float value that indicates the initial width given to the layout. It can be either larger or smaller than the text content width, depending on whether the text was wrapped.\n\n---\n\n* LayoutHeight\n* A float value that indicates the initial height given to the layout. Depending on the length of the text, it may be larger or smaller than the text content height.\n\n---\n\n* MaxBidiReorderingDepth\n* An **int** value representing the maximum reordering count of any line of text, used to calculate the most number of hit-testing boxes needed. If the layout has no bidirectional text, or no text at all, the minimum level is 1.\n\n---\n\n* LineCount\n* An **int** value representing total number of lines.\n{% /table %}"
  },
  {
    "_id": "225f574b019c2f92bbd46b8112bc51abc36c3d3644d5887b79bd7e09c9ff13f1",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.Direct2D1",
    "pathName": "sharpdx_direct2d1",
    "parent": "sharpdx_sdk_reference",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\nThe SharpDX.Direct2D1 namespace provides a managed Direct2D API. Direct2D is a hardware-accelerated, immediate-mode, 2-D graphics API that provides high performance and high-quality rendering for 2-D geometry, bitmaps, and text.\n\n(See also [unmanaged API documentation](http://msdn.microsoft.com/en-us/library/dd370990.aspx))\n\n## In this section\n\n{% table %}\n\n* Member\n* Description\n\n---\n\n* [AntialiasMode](sharpdx_direct2d1_antialiasmode)\n* Specifies how the edges of nontext primitives are rendered.\n\n---\n\n* [ArcSegment](sharpdx_direct2d1_arcsegment)\n* Describes an elliptical arc between two points.\n\n---\n\n* [ArcSize](sharpdx_direct2d1_arcsize)\n* Specifies whether an arc should be greater than 180 degrees.\n\n---\n\n* [Brush](sharpdx_direct2d1_brush)\n* Defines an object that paints an area. Interfaces that derive from Brush describe how the area is painted.\n\n---\n\n* [BrushProperties](sharpdx_direct2d1_brushproperties)\n* Describes the opacity and transformation of a brush.\n\n---\n\n* [DrawTextOptions](sharpdx_direct2d1_drawtextoptions)\n* Specifies whether text snapping is suppressed or clipping to the layout rectangle is enabled. This enumeration allows a bitwise combination of its member values.\n\n---\n\n* [Ellipse](sharpdx_direct2d1_ellipse)\n* Contains the center point, x-radius, and y-radius of an ellipse.\n\n---\n\n* [FigureBegin](sharpdx_direct2d1_figurebegin)\n* Indicates whether a specific GeometrySink figure is filled or hollow.\n\n---\n\n* [FigureEnd](sharpdx_direct2d1_figureend)\n* Indicates whether a specific GeometrySink figure is open or closed.\n\n---\n\n* [FillMode](sharpdx_direct2d1_fillmode)\n* Specifies how the intersecting areas of geometries or figures are combined to form the area of the composite geometry.\n\n---\n\n* [GeometrySink](sharpdx_direct2d1_geometrysink.md)\n* Describes a geometric path that can contain lines, arcs, cubic Bezier curves, and quadratic Bezier curves.\n\n---\n\n* [MeasuringMode](sharpdx_direct2d1_measuringmode)\n* Indicates the measuring method used for **text layout**.\n\n---\n\n* [PathGeometry](sharpdx_direct2d1_pathgeometry.md)\n* Represents a complex shape that may be composed of arcs, curves, and lines.\n\n---\n\n* [RenderTarget](sharpdx_direct2d1_rendertarget.md)\n* Represents an object that can receive drawing commands.\n\n---\n\n* [SolidColorBrush](sharpdx_direct2d1_solidcolorbrush)\n* Paints an area with a solid color.\n\n---\n\n* [StrokeStyle](sharpdx_direct2d1_strokestyle.md)\n* Describes the caps, miter limit, line join, and dash information for a stroke.\n\n---\n\n* [SweepDirection](sharpdx_direct2d1_sweepdirection)\n* Defines the direction that an elliptical arc is drawn.\n{% /table %}"
  },
  {
    "_id": "3d33a64fef6a12cd08619cd379bf306a4285ce3a0b0526bd11f0a7f74202e1d8",
    "_type": "desktopSdkDoc",
    "title": "SharpDX.DirectWrite",
    "pathName": "sharpdx_directwrite",
    "parent": "sharpdx_sdk_reference",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\nThe SharpDX.DirectWrite namespace provides a managed DirectWrite API. DirectWrite supports high-quality text rendering, resolution-independent outline fonts, and full Unicode text and layouts.\n\n(See also [unmanaged API documentation](https://msdn.microsoft.com/en-us/library/dd368038.aspx))\n\n## In this section\n\n{% table %}\n\n---\n\n* [TextFormat](sharpdx_directwrite_textformat)\n* The TextFormat interface describes the font and paragraph properties used to format text, and it describes locale information.\n\n---\n\n* [TextLayout](sharpdx_directwrite_textlayout)\n* The TextLayout interface represents a block of text after it has been fully analyzed and formatted.\n{% /table %}"
  },
  {
    "_id": "881e658623e76f12279b8ced37336ce783235cc18752e42796cca0abd20a8bb1",
    "_type": "desktopSdkDoc",
    "title": "SharpDX SDK Reference",
    "pathName": "sharpdx_sdk_reference",
    "parent": "sharpdx_sdk_reference",
    "order": 0,
    "section": "references",
    "markdown": "{% callout type=\"warning\" %}\n\nDisclaimer: The **SharpDX SDK Reference** section was compiled from the official **SharpDX Documentation** and was NOT authored by NinjaTrader. The contents of this section are provided as-is and only cover a fraction of what is available from the SharpDX SDK. This page was intended only as a reference guide to help you get started with some of the 2D Graphics concepts used in the NinjaTrader.Custom assembly. Please refer to the official SharpDX Documentation for additional members not covered in this reference. For more seasoned graphic developers, the original MSDN **Direct2D1** and **DirectWrite** unmanaged API documentation can also be helpful for understanding the DirectX/Direct2D run-time environment. For NinjaScript development purposes, we document only essential members in the structure of this page.\n\n{% /callout %}\n\nSharpDX is an [open-source](https://github.com/sharpdx/SharpDX) managed .NET wrapper of the DirectX API allowing the development of high performance game, 2D and 3D graphics rendering as well as realtime sound application.\n\n{% callout type=\"note\" %}\n\nTip: The concepts discussed in this section only apply to NinjaScript objects which use the Chart's **OnRender()** method. For code examples which demonstrate usage, please refer to the [Using SharpDX for Custom Chart Rendering](using_sharpdx_for_custom_chart_rendering) educational resource. You may also view the source code of various [ChartStyles](chartstyletype) , [DrawingTools](drawing_tools) , and [Indicators](docs/references/Language%20Reference/2.0%20Common/system_indicator_methods.md) which come pre-installed in the NinjaTrader.Custom project (Documents\\NinjaTrader 8\\bin\\Custom).\n\n{% /callout %}\n\n## In this section\n\n{% table %}\n\n---\n\n* [SharpDX](sharpdx) \n\n* The SharpDX namespace contains fundamental classes used by SharpDX. |\n---\n\n* [SharpDX.Direct2D1](sharpdx_direct2d1) \n* The SharpDX.Direct2D1 namespace provides a managed Direct2D API. Direct2D is a hardware-accelerated, immediate-mode, 2-D graphics API that provides high performance and high-quality rendering for 2-D geometry, bitmaps, and text.\n---\n* [SharpDX.DirectWrite](sharpdx_directwrite) \n* The SharpDX.DirectWrite namespace provides a managed DirectWrite API. DirectWrite supports high-quality text rendering, resolution-independent outline fonts, and full Unicode text and layouts.\n---\n\n{% /table %}"
  }
]